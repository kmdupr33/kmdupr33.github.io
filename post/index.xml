<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Philosophical Hacker</title>
    <link>https://www.philosophicalhacker.com/post/index.xml</link>
    <description>Recent content in Post-rsses on Philosophical Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Jan 2017 09:19:38 -0500</lastBuildDate>
    <atom:link href="https://www.philosophicalhacker.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Espresso Test Addiction: An Anti-pattern</title>
      <link>https://www.philosophicalhacker.com/post/espresso-test-addiction/</link>
      <pubDate>Sat, 28 Jan 2017 09:19:38 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/espresso-test-addiction/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;More than 1000 apps&amp;hellip;they have espresso tests for the first time using the test recorder&amp;hellip;espresso adoption has also grown since the introduction of [the espresso test recorder].&lt;/p&gt;

&lt;p&gt;Android Developers Backstage, &lt;a href=&#34;http://androidbackstage.blogspot.com/2016/10/episode-57-espresso-test-recorder.html&#34;&gt;Episode 37 Espresso Test Recorder&lt;/a&gt;, 31:10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Record-playback tools are almost always a bad idea for any kind of automation, since they resist changeability and obstruct useful abstractions. They are only worth having as a tool to generate fragments of scripts which you can then &lt;strong&gt;edit&lt;/strong&gt; as a proper programming language&amp;hellip;&lt;/p&gt;

&lt;p&gt;Martin Fowler, &lt;a href=&#34;https://martinfowler.com/bliki/TestPyramid.html&#34;&gt;&amp;ldquo;Test Pyramid&amp;rdquo;&lt;/a&gt; (emphasis mine)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Espresso tests make a nice addition to our testing tool-belt. The espresso test recorder, moreover, makes getting started with testing and espresso very easy. As I&amp;rsquo;ve said before, &lt;a href=&#34;https://www.philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/&#34;&gt;getting started with automated testing on Android is hard&lt;/a&gt;, so having nice tools and an clear on-boarding ramp for testing is a good thing.&lt;/p&gt;

&lt;p&gt;Of course, we all know that its possible to have too much of a good thing, and I sometimes worry that espresso and espresso recorder are contributing to the formation of a UI testing addiction in the Android community. I worry, moreover, that this addiction that will probably lead to less testing in the long-run.&lt;/p&gt;

&lt;p&gt;UI tests and test recorders are, of course, not new, so they have well-understood limitations. Moreover, lots of smart programmers have said smart things about how to best use these tools. This post reviews these limitations and best practices in general and suggests how we ought to apply those practices to Android development.&lt;/p&gt;

&lt;h3 id=&#34;ui-tests-outside-the-android-community&#34;&gt;UI Tests Outside the Android Community&lt;/h3&gt;

&lt;p&gt;Outside the Android community, the caution around writing too many UI tests is actually surprisingly loud and clear.&lt;/p&gt;

&lt;p&gt;Mike Cohn, for example, expresses this caution with &lt;a href=&#34;https://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid&#34;&gt;his testing pyramid suggestion&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At the base of the test automation pyramid is unit testing. Unit testing should be the foundation of a solid test automation strategy and as such represents the largest part of the pyramid&amp;hellip;Automated user interface testing is placed at the top of the test automation pyramid &lt;strong&gt;because we want to do as little of it as possible.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cohn warns us in this article (and the book the article is advertising) that if we don&amp;rsquo;t have a healthy test pyramid, then &amp;ldquo;all other testing ends up being performed through the user interface, resulting in tests that are expensive to run, expensive to write, and brittle.&amp;rdquo; This test pyramid suggestion is echoed by &lt;a href=&#34;https://martinfowler.com/bliki/TestPyramid.html&#34;&gt;Martin Fowler&lt;/a&gt; and by &lt;a href=&#34;https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html&#34;&gt;Google&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Michael Feathers, to take another example, also talks about the limitations of large tests, particularly with respect to how useful they are in helping us refactor with confidence:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unit testing is one of the most important components in legacy code work. System-level regression tests are great, but small, localized tests are invaluable. They can give you feedback as you develop and allow you to refactor with much more safety.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And later on, contrasting unit tests with larger tests, he says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Larger tests tend to take longer to execute. This tends to make test runs rather frustrating. Tests that take too long to run end up not being run.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, Gerard Meszaros in his &lt;em&gt;xUnit Test Patterns&lt;/em&gt; has an entire section explaining why over-using UI tests isn&amp;rsquo;t a great idea.&lt;sup&gt;3&lt;/sup&gt; Here&amp;rsquo;s one specific passage with a strong caution against using recorded UI tests in particular:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the last decade [1998-2008], more general-purpose test automation tools have become available for testing applications through their user interfaces. Some of these tools use scripting languages to define the tests; the sexier tools rely on the &amp;ldquo;robot user&amp;rdquo; or &amp;ldquo;record and playback&amp;rdquo; metaphor for test automation. Unfortunately, many of the early experiences with these latter tools left the testers and test managers less than satisfied. The cause was high test maintenance costs caused by the &amp;ldquo;fragile test&amp;rdquo; problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The gist of all of these quotes is that writing too many UI tests will likely result in a suite that is a) too slow to support development/refactoring, b) too difficult to maintain, as changes in the UI can break a large amount of tests.&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;but-what-about-the-robot-pattern&#34;&gt;But what about the &amp;ldquo;robot pattern?&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;At this point, some readers may wonder whether &amp;ldquo;&lt;a href=&#34;https://realm.io/news/kau-jake-wharton-testing-robots/&#34;&gt;the robot pattern&lt;/a&gt;&amp;rdquo; makes writing a ton of UI tests ok. The robot pattern, to refresh your memory, is a way of making your UI tests more resistant to change by hiding the details of view interaction behind &amp;ldquo;robot&amp;rdquo; objects. While the robot pattern does &lt;em&gt;mitigate&lt;/em&gt; the issue of brittle tests, over-relying on UI tests, even with the robot pattern, is still going to result in a sub-par testing suite. Here&amp;rsquo;s why.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by noting that the robot pattern is not new. The robot pattern is just &lt;a href=&#34;https://martinfowler.com/bliki/PageObject.html&#34;&gt;Martin Fowler&amp;rsquo;s page object pattern&lt;/a&gt;.&lt;sup&gt;5&lt;/sup&gt; So, when other software engineers outside the Android community suggest that too much UI testing is a bad idea, its not because they aren&amp;rsquo;t aware of the possibility of &amp;ldquo;the robot pattern.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Next, we can note something obvious about the robot pattern: it does nothing to improve the &lt;em&gt;speed&lt;/em&gt; of UI tests. The lack of speed of UI tests is one of the main disadvantages of over-relying on them.&lt;/p&gt;

&lt;p&gt;Finally, although the robot pattern does make UI tests resistant to small UI changes, it does not allow tests to gracefully adapt to larger UI changes. Suppose, for example, that a particular piece of functionality is moved to a different screen within our app. If this happens, we&amp;rsquo;ll need to update our tests &lt;em&gt;and&lt;/em&gt; our robots.&lt;/p&gt;

&lt;p&gt;For the reasons, the robot pattern doesn&amp;rsquo;t change the fact that we&amp;rsquo;re often better off trying to find a way of testing functionality at the unit-level or integration-level.&lt;/p&gt;

&lt;h3 id=&#34;how-to-use-espresso-tests-and-the-recorder&#34;&gt;How to use Espresso Tests and the Recorder&lt;/h3&gt;

&lt;p&gt;Based on experiences and recommendations of &lt;em&gt;very&lt;/em&gt; experienced software engineers outside the Android community, here&amp;rsquo;s how I recommend we handle use espresso and recorder for UI tests:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If there&amp;rsquo;s a way to test the functionality that you&amp;rsquo;re trying to test at the unit level, do so.&lt;/li&gt;
&lt;li&gt;If you can&amp;rsquo;t do this, refactor so that you can test the functionality at the unit-level. Use the test recorder to record a UI test to support your refactoring to be sure that you didn&amp;rsquo;t break anything.&lt;sup&gt;6&lt;/sup&gt; After you&amp;rsquo;ve refactored your code to test the functionality at the unit-level, delete the recorded test.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re &lt;em&gt;really&lt;/em&gt; interested in testing how the application works &lt;em&gt;as a whole&lt;/em&gt;, using a UI test is fine, but, as the epigraph opening this post suggests, &lt;em&gt;refactor&lt;/em&gt; your recorded tests to use the &amp;ldquo;robot pattern&amp;rdquo; to keep your UI tests resistant to small changes in the UI.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Espresso and the test recorder are great tools, but don&amp;rsquo;t let them suck you into writing too many UI tests. That way lies madness&amp;hellip;and slow, fragile tests. These are tests that won&amp;rsquo;t be useful, and as a result, &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;the fear that&amp;rsquo;s supposed to be alleviated by writing unit tests will return&lt;/a&gt;. I don&amp;rsquo;t want to work with code I&amp;rsquo;m afraid to change, so selfishly, I hope we&amp;rsquo;ll all do better here.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Michael Feathers, &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;, 34-35.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid., 35-36.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Gerard Meszaros, &lt;em&gt;xUnit Test Patterns&lt;/em&gt;, 299.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Poor defect localization is another disadvantage of UI tests that I&amp;rsquo;m not covering in detail here. Writing too many UI tests &lt;em&gt;can&lt;/em&gt; be a way of ignoring the design feedback your tests are trying to give you. (&lt;a href=&#34;https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/&#34;&gt;The same thing can happen when we write robolectric tests.&lt;/a&gt;) Unit testing android applications is hard because our Android apps often have bad architecture. Instead of listening to our tests that are telling us &amp;ldquo;your classes are tightly coupled and they violate the principle of single responsibility,&amp;rdquo; we just say, &amp;ldquo;forget unit tests. I&amp;rsquo;ll just test everything through the UI instead.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The key idea of this pattern, however, is definitely older than Fowler&amp;rsquo;s page object pattern. Gerard Meszaros talks about it in &lt;em&gt;xUnit Test Patterns&lt;/em&gt;, for example, which was published in 2007.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This strategy is recommended by both Feathers and Meszaros.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Exploiting Android-Specific Seams for Testing and Flexibility</title>
      <link>https://www.philosophicalhacker.com/post/exploiting-android-specific-seams-for-testing-and-flexibility/</link>
      <pubDate>Sat, 21 Jan 2017 11:20:01 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/exploiting-android-specific-seams-for-testing-and-flexibility/</guid>
      <description>

&lt;p&gt;As I pointed out throughout my &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-makes-android-apps-testable/&#34;&gt;series of posts on writing testable Android applications&lt;/a&gt;, the key to writing testable Android apps, is creating and exploiting seams. During these posts, I pointed out two types of seams that are available in any OO programming language and any programming environment. In this post, I want to highlight some Android-specific seams that we can leverage to make our applications more testable and flexible.&lt;/p&gt;

&lt;h3 id=&#34;manifest-seams&#34;&gt;Manifest Seams&lt;/h3&gt;

&lt;p&gt;Manifest seams allow you to change a manifest that&amp;rsquo;s used for a particular build variant without editing your main manifest in place. Changing your manifest, of course, results in different behavior for your app. These new behaviors can be used to make your app more testable. To flesh out the concept of a manifest seam, let&amp;rsquo;s look at using manifest seams to set up your app&amp;rsquo;s &amp;ldquo;mock mode.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;An application running in mock mode stubs out its interactions with external services for testing purposes.&lt;sup&gt;1&lt;/sup&gt; A nice example of mock mode in action is &lt;a href=&#34;https://github.com/JakeWharton/u2020&#34;&gt;Jake Wharton&amp;rsquo;s u2020 app&lt;/a&gt;. In his implementation of mock mode, Wharton uses an object seam, along with dagger, to swap out views within Activities so that in mock mode, the &lt;code&gt;MainActivity&lt;/code&gt;&amp;rsquo;s view will contain a debug drawer that can be used to configure the stubbing behavior for the app.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MainActivity&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Activity &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Inject&lt;/span&gt; ViewContainer viewContainer&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Bundle savedInstanceState&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;

    ViewGroup container &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; viewContainer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;forActivity&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;    

    inflater&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;inflate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;layout&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;main_activity&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; container&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    ButterKnife&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;bind&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; container&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;  
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code gives u2020 users the ability to change mock behavior using the app&amp;rsquo;s UI without having to modify any production code. We could use manifest seams, however, to accomplish the same thing.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Manifest seams are made possible via manifest merging and &lt;a href=&#34;https://developer.android.com/studio/build/manifest-merge.html#merge_rule_markers&#34;&gt;merge rule markers&lt;/a&gt;. To exploit a manifest seam for mock mode, we can use merge rule markers to tell the manifest merger to change the initial &lt;code&gt;Activity&lt;/code&gt; that&amp;rsquo;s launched for a particular build variant.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;&amp;lt;!-- src/mock/AndroidManifest.xml --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;activity&lt;/span&gt;
  &lt;span style=&#34;color: #7D9029&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;.StubConfigActivity&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;android.intent.action.MAIN&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;category&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;android.intent.category.LAUNCHER&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;activity&lt;/span&gt;
  &lt;span style=&#34;color: #7D9029&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;.MainActivity&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;intent-filter&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;tools:node=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;remove&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;android.intent.action.MAIN&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;category&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;android.intent.category.LAUNCHER&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The resulting manifest for the mock build variant will have the &lt;code&gt;StubConfigActivity&lt;/code&gt; as its launching activity, rather than the &lt;code&gt;MainActivity&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I think there are other interesting possibilities here that are worth exploring. For example, you could use merge rule markers to substitute out which actions and categories are on non-launcher &lt;code&gt;Activity&lt;/code&gt;&amp;rsquo;s intent-filter and thereby change which activities are started when we call &lt;code&gt;context.startActivity&lt;/code&gt; with implicit intents.&lt;/p&gt;

&lt;h3 id=&#34;buildconfig-seams&#34;&gt;BuildConfig Seams&lt;/h3&gt;

&lt;p&gt;BuildConfig seams allow us to change the values stored in the &lt;code&gt;BuildConfig&lt;/code&gt;&amp;rsquo;s constants depending on which build variant we&amp;rsquo;re building. By default, &lt;code&gt;BuildConfig&lt;/code&gt; contains some useful values like, &lt;code&gt;DEBUG&lt;/code&gt; and &lt;code&gt;FLAVOR&lt;/code&gt;, but we can actually create additional &lt;code&gt;BuildConfig&lt;/code&gt; constants via gradle. Let&amp;rsquo;s start by looking a simple example of creating a BuildConfig field:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;productFlavors &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  mock &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    buildConfigField&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Boolean&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;MOCK&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A simple use case for BuildConfig seams is setting up the base url for the api your app is hitting. This can make testing easier because you can point your app to a staging, sandbox, mock, or production servers without modifying production code.&lt;sup&gt;3&lt;/sup&gt; Leveraging a BuildConfig seam in this way might look something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;defaultConfig &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  buildConfigField&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;String&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;API_BASE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;\&amp;quot;api.awesomecompany.com\&amp;quot;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
productFlavors &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  sandbox &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    buildConfigField&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;String&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;API_BASE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;\&amp;quot;localhost:8080\&amp;quot;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could then use the BuildConfig field like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #0000FF&#34;&gt;buildGetAwesomenessApiUrl&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;http://&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; BuildConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;API_BASE&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/awesomenesss&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those of you who have read &lt;a href=&#34;https://www.philosophicalhacker.com/post/build-variants-and-link-seams/&#34;&gt;my post on link seams&lt;/a&gt;, BuildConfig seams may just look like a special case of using build variants to create link seams. In some sense, that&amp;rsquo;s true.&lt;/p&gt;

&lt;p&gt;However, BuildConfig seams have an advantage over placing identically named files in different sourcesets for different build variants: you can set a BuildConfig field for the default configuration and override it for specific build variants. You can&amp;rsquo;t do this by placing identically named files in the &lt;code&gt;main&lt;/code&gt; and build-variant sourcesets folders because the compiler will complain that there&amp;rsquo;s two files with the same name.&lt;/p&gt;

&lt;p&gt;There are other things to explore here as well. One use case I&amp;rsquo;ve found for BuildConfig seams is in &lt;em&gt;composing&lt;/em&gt; dagger configuration behavior for multi-dimensional product flavors by storing class names in BuildConfig fields and instantiating them via reflection. I&amp;rsquo;m not very confident that this is a sensible way to use BuildConfig seams, but its interesting anyway, and it might serve as a foundation for a better way to use BuildConfig seams.&lt;/p&gt;

&lt;h3 id=&#34;resource-seams&#34;&gt;Resource Seams&lt;/h3&gt;

&lt;p&gt;Resources from different build variants, like AndroidManifests, get merged. Unlike manifest merging, we don&amp;rsquo;t have merge rule markers that allow us to tweak how the resources are merged. However, we can still take advantage of the default merge behavior to change the behavior of our apps without editing production code in place. The default merge behavior, according to &lt;a href=&#34;https://developer.android.com/studio/write/add-resources.html#resource_merging&#34;&gt;the docs&lt;/a&gt;, is this:&lt;/p&gt;

&lt;p&gt;build variant &amp;gt; build type &amp;gt; product flavor &amp;gt; main source set &amp;gt; library dependencies&lt;/p&gt;

&lt;p&gt;This means that we can place resources in the main source set as a kind of default and override them for specific build variants. Again, this is something that we can&amp;rsquo;t do by placing identically named java files in different sourcesets.&lt;/p&gt;

&lt;p&gt;BuildConfig seams and Resource seams obviously have some similarities, which makes choosing between them confusing. Off the cuff, we can say that using a BuildConfig field is easier than getting a resource value, so we may want to prefer BuildConfig seams when we don&amp;rsquo;t have access to a &lt;code&gt;Context&lt;/code&gt;. Stuffing all of our build variant specific values into a single BuildConfig class, however, isn&amp;rsquo;t going to scale well, so we may want to prefer Resource seams if we do have access to a &lt;code&gt;Context&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Android developers have their own Android-specific seams that they can exploit for testing purposes. Manifest seams rely on manifest merging and merge rule markers. BuildConfig seams rely on the &lt;code&gt;productFlavor.buildConfigField&lt;/code&gt; method. Resource seams rely on Android&amp;rsquo;s default the resource merging behavior.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you don&amp;rsquo;t know why we&amp;rsquo;d want to do this, &lt;a href=&#34;https://android-developers.googleblog.com/2015/12/leveraging-product-flavors-in-android.html&#34;&gt;read this&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Manifest seams may be an inferior way of doing this, as Wharton&amp;rsquo;s strategy allows users to change mock behavior throughout their session with the app, while manifest seams, as we&amp;rsquo;ll see, only allow us to change this behavior when the app is first launched. My purpose here isn&amp;rsquo;t to say which approach is better. Its just to point out that manifest seams exist.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I haven&amp;rsquo;t found much use for mock web servers. I can eliminate flaky tests without them, and they often slow tests down since the tests are still making network requests.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>TDD &gt; The Principle of Single Responsibility</title>
      <link>https://www.philosophicalhacker.com/post/tdd-is-greater-than-the-principle-of-single-responsibility/</link>
      <pubDate>Sat, 14 Jan 2017 10:54:43 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/tdd-is-greater-than-the-principle-of-single-responsibility/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of &lt;strong&gt;realizing grand conceptual structures&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fred Brooks, The Mythical Man-Month&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Grand structures &amp;ndash; whether they are conceptual, programmatic, or physical &amp;ndash; require strong foundations. This is true in two senses.&lt;/p&gt;

&lt;p&gt;In the first, obvious sense, strong foundations are required for a structure to withstand its own weight and the forces that want to knock it down. Structures without strong foundations often collapse.&lt;/p&gt;

&lt;p&gt;In the second, less obvious sense, there&amp;rsquo;s another kind of foundation that&amp;rsquo;s crucial to a structure&amp;rsquo;s integrity: the epistemic foundations that guide the architect as she lays the foundation and builds her structure, the architect&amp;rsquo;s first principles. These epistemic foundations are even more fundamental to the structure&amp;rsquo;s integrity than the foundation the structure actually sits upon. An architect that doesn&amp;rsquo;t understand the foundational principles of her craft builds bad foundations, which leads to structures that collapse.&lt;/p&gt;

&lt;p&gt;The principle of single responsibility is supposed to be this second kind of strong foundation for those of us that &amp;ldquo;build castles in the air.&amp;rdquo; Its a principle that&amp;rsquo;s supposed to help us build software with strong foundations, software that won&amp;rsquo;t topple under its own weight and under the weight of forces that want to knock it down.&lt;/p&gt;

&lt;p&gt;I think that TDD actually serves as a better foundation for designing robust software. The epigraph I opened this article with actually provides a nice preview of why I think this: building abstractions is a big part of building good software, but without these abstractions, the principle of responsibility isn&amp;rsquo;t very helpful in guiding me. I often need something that pushes me to discover and build abstractions in the first place, and TDD does a better job of this than the principle of single responsibility.&lt;/p&gt;

&lt;p&gt;In the rest of this post, I&amp;rsquo;ll unpack and attempt to justify that last statement.&lt;/p&gt;

&lt;h3 id=&#34;abstraction-and-the-psr&#34;&gt;Abstraction and the PSR&lt;/h3&gt;

&lt;p&gt;Imagine for a moment that Bill, another engineer shows you an app he&amp;rsquo;s working on. When you take a look at it, you notice that the app consists of a single class that &lt;em&gt;implements&lt;/em&gt; the entirety of your application. Until recently, if this happened to me, I would have immediately reached for the principle of single responsibility to explain what he did wrong.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Have you ever heard of the principle of single responsibility?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bill:&lt;/strong&gt; Yeah. Actually, that principle was guiding me as I wrote this class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Really? Well, what is this class&amp;rsquo; responsibility?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bill:&lt;/strong&gt; Well, this class is responsible for running the app. This class didn&amp;rsquo;t seem to violate the PSR because the class fits Bob Martin&amp;rsquo;s definition of a class that follows the PSR. He says that &amp;ldquo;a class should only have one reason to change.&amp;rdquo;&lt;sup&gt;1&lt;/sup&gt; That&amp;rsquo;s true of this class. There&amp;rsquo;s only one reason it&amp;rsquo;ll change: if the app needs to behave differently, we&amp;rsquo;ll have to change this class. Also, the class passed Steve Freeman and Nat Pryce&amp;rsquo;s test for whether a class follows the PSR: I can state the class&amp;rsquo;s responsibility without any and&amp;rsquo;s, or&amp;rsquo;s, or but&amp;rsquo;s.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This is an absurd conversation, but its an extreme case to demonstrate an important point: whether a class seems to satisfy the principle of single responsibility depends largely on whether we can &lt;em&gt;identify&lt;/em&gt; other responsibilities that our class is tackling. Bill&amp;rsquo;s position feels absurd because we, as experienced developers, can identify other non-trivial responsibilities that are handled by his God class.&lt;/p&gt;

&lt;p&gt;However, here&amp;rsquo;s the kicker: its not always obvious that a class is handling multiple responsibilities. Bob Martin even says this in his chapter on the principle of single responsibility:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The SRP is one of the simplest of the principles, and one of the hardest to get right. Con-
joining responsibilities is something that we do naturally. &lt;strong&gt;Finding&lt;/strong&gt; and separating those responsibilities from one another is much of what software design is really about.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we keep in mind that the act of &lt;em&gt;naming&lt;/em&gt; another responsibility is already the first step creating an abstraction,&lt;sup&gt;4&lt;/sup&gt; we see that Michael Feathers gives us more evidence that finding and separating responsibilities is not a trivial exercise:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;one pervasive problem in legacy code bases is that there often aren’t any layers of abstraction; the most important code in the system often sits intermingled with low-level API calls.&lt;sup&gt;5&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To say that there are no layers of abstraction is to say that the programmer has failed to identify and separate responsibilities. In this particular example, the programmer has failed to identify domain-related responsibilities as separate from the responsibility of talking to some library or framework via low-level API calls.&lt;sup&gt;6&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s one more piece of evidence that identifying responsibilities is not trivial. Again, I&amp;rsquo;m trading here on the idea that identifying responsibilities is the beginning of creating abstractions. Creating abstractions, in turn, is a part of creating a higher-level vocabulary with which to write your programs. Apparently, Kent Beck has said something like this recently:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Reading through my notes &amp;amp; saw this pretty quote: &amp;quot;You’re creating a vocabulary, not writing a program. Be a poet for a moment.&amp;quot; &lt;a href=&#34;https://twitter.com/KentBeck&#34;&gt;@KentBeck&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jessica (@encompassky) &lt;a href=&#34;https://twitter.com/encompassky/status/813931671116451841&#34;&gt;December 28, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;Think about how much careful thought, experience, and discovery goes into creating sensible vocabularies. David West has a great bit about this in his book &lt;em&gt;Object Thinking&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we discover new things, we invent (or borrow) new words to express our discovery. When we want to make critical distinctions between or among similar notions, we use specialized vocabularies. The use of special vocabularies is common in our professional lives because, as specialists, we need to become familiar with unique ideas and to make important distinctions that as laypersons we might not make.&lt;sup&gt;7&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we think of programming as naming responsibilities to create abstractions that make up a vocabulary, then the non-triviality of creating vocabularies in general has a direct bearing on the difficulty of identifying responsibilities while writing programs, which, if we take Kent Beck seriously, is just a particular kind of vocabulary construction.&lt;/p&gt;

&lt;p&gt;So, whether a class seems to satisfy the principle of single responsibility depends on whether we can identify other responsibilities a class might be tackling. This isn&amp;rsquo;t a trivial task and the PSR doesn&amp;rsquo;t do anything to aid us in accomplishing it.&lt;/p&gt;

&lt;h3 id=&#34;abstraction-and-tdd&#34;&gt;Abstraction and TDD&lt;/h3&gt;

&lt;p&gt;TDD, on the other hand, actually puts pressure on us to identify responsibilities that may be hidden in the object we&amp;rsquo;re trying to test. This happens for two reasons.&lt;/p&gt;

&lt;p&gt;One reason is that we can&amp;rsquo;t unit test a class at all if we won&amp;rsquo;t have a way of getting the object into the right state for a test and a way of verifying the object is in the correct state after we&amp;rsquo;ve exercised it. Often, doing this requires that we identify an object&amp;rsquo;s dependencies and interactions AS separate objects with separate responsibilities. Steve Freeman and Nat Pryce seem to say something like this without actually using the language of responsibility:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;…to construct an object for a unit test, we have to pass its dependencies to it, which means that we have to know what they are.&lt;sup&gt;8&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There&amp;rsquo;s another quotation that supports my point here, albeit in a less direct way. Freeman and Pryce say, &amp;ldquo;for a class to be easy to unit-test, the class must…be loosely coupled and &lt;strong&gt;highly cohesive&lt;/strong&gt; —in other words, well-designed.&amp;rdquo; Cohesion, in Bob Martin&amp;rsquo;s mind, is closely linked with the idea of a class&amp;rsquo; responsibility, so this quote is almost a way of saying that unit testable classes are likely to follow the PSR.&lt;sup&gt;9&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The second reason TDD helps us identify responsibilities is that a part of the TDD process is to eliminate duplication. Kent Beck actually has a nice summary of how this creates cohesion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The first feature goes in&amp;hellip;the second feature, a variation on the first, goes in. &lt;strong&gt;The duplication between the two features is put in one place, whereas the differences tend to go in different places (different methods or even different classes).&lt;/strong&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quotations from famous software engineers aside, if we think for a second about what would happen if Bill tried to unit test his God class, I think we&amp;rsquo;ll find some intuitive support for the idea that TDD exerts pressure to identify responsibilities.&lt;/p&gt;

&lt;p&gt;For example, his app likely displays data in a format that&amp;rsquo;s different from how its stored in the database. When writing a test to verify that his God object massages the data into a more presentable format correctly, he&amp;rsquo;ll see that the database needs to have specific data pre-loaded in order for the test to pass. He could solve this problem by creating a sandbox database and pre-loading it with specific data, but it would be &lt;em&gt;easier&lt;/em&gt; to unit test his class if he identifies &amp;ldquo;getting data from the database&amp;rdquo; as a separate responsibility, creates a class for it, and injects that dependency into his God class.&lt;/p&gt;

&lt;p&gt;Testing other pieces of functionality of his application will require the same process, which, theoretically, will involve more identifying and separating of responsibilities.&lt;sup&gt;11&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The PSR is supposed to serve as a foundational principle for helping us write good software. However, the PSR isn&amp;rsquo;t helpful if we fail to identify hidden responsibilities that our class may be assuming. Because identifying these responsibilities isn&amp;rsquo;t trivial and because the PSR does nothing to help us with this non-trivial task, the PSR alone isn&amp;rsquo;t very helpful.&lt;/p&gt;

&lt;p&gt;TDD actually does a better job at helping us identify responsibilities. A class won&amp;rsquo;t be easy to unit test unless we&amp;rsquo;ve identified and injected its dependencies, and to identify a dependency is to identify a responsibility. Eliminating duplication, moreover, forces us to identify and create abstractions to co-locate common functionality so that it can be reused, and to identify an abstraction is to identify a responsibility.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Robert Martin, &lt;em&gt;Agile Software Development: Principles, Patterns, and Practices&lt;/em&gt;, 110. Excerpt &lt;a href=&#34;https://drive.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/view&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Steve Freeman and Nat Pryce, &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;, 96-97.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Robert Martin, &lt;em&gt;Agile Software Development: Principles, Patterns, and Practices&lt;/em&gt;, 114. Excerpt &lt;a href=&#34;https://drive.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/view&#34;&gt;here&lt;/a&gt;. Emphasis mine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Michael Feathers, &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;, 350-352.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Perhaps this is why &amp;ldquo;naming things&amp;rdquo; is one of the two things that are hard about computer science, &lt;a href=&#34;https://martinfowler.com/bliki/TwoHardThings.html&#34;&gt;according to Phil Karlton&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I think that a part of the reason finding responsibilities can be difficult is because we have to think at a level of abstraction that is actually lower than the one we were using when we decided to create the class in the first place. When Bill created the &lt;code&gt;Application&lt;/code&gt; class, he did so because he thought, &amp;ldquo;I need a class that&amp;rsquo;ll run my application.&amp;rdquo; When he started writing database-related code in this class, he could continue to think &amp;ldquo;this code is just helping this class fulfill its responsibility of running the app,&amp;rdquo; and in a sense, he would be right, but he&amp;rsquo;d be thinking at the wrong level of abstraction. Dropping down a level, he&amp;rsquo;d see that his Application class displays UI &lt;em&gt;and&lt;/em&gt; talks to a database &lt;em&gt;and&lt;/em&gt;&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;David West, &lt;em&gt;Object Thinking&lt;/em&gt;, 143-144.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Steve Freeman and Nat Pryce, &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;, 43.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid., 103-104.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Robert Martin, &lt;em&gt;Agile Software Development: Principles, Patterns, and Practices&lt;/em&gt;, 109. Excerpt &lt;a href=&#34;https://drive.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/view&#34;&gt;here&lt;/a&gt;. Martin Actually sees the PSR as being first described using the language of cohesion. Personally, I prefer the vocabulary of cohesion to the PSR because a class can have cohesiveness in degrees. Somehow, the more gradient (vs. binary) way of thinking about class design along this dimension seems to fit better with the idea that identifying responsibilities is related to the level of abstraction we&amp;rsquo;re on when we&amp;rsquo;re thinking about a class, but my thoughts on this aren&amp;rsquo;t well formed enough to say more.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kent Beck, &lt;em&gt;TDD By Example&lt;/em&gt;, 195.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Technically, this doesn&amp;rsquo;t fit the definition of TDD because the tests are written last, but there is a real sense in which the tests are driving the re-design of Bill&amp;rsquo;s app. This is why I say TDD is actually helping him design better classes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Why I Don&#39;t use Robolectric</title>
      <link>https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/</link>
      <pubDate>Fri, 06 Jan 2017 22:01:04 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/</guid>
      <description>

&lt;p&gt;The more that I learn about testing, the more suspicious of Robolectric I get. I&amp;rsquo;m honestly starting to think that many of the heros of unit testing (e.g., Kent Beck, Michael Feathers, Steve Freeman, and Nat Pryce) would be pretty suspicious of Robolectric. Here are my concerns:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Robolectric is &lt;em&gt;largely&lt;/em&gt;&lt;sup&gt;1&lt;/sup&gt; a set of mocks for a set of types we don&amp;rsquo;t own. Mocking types we don&amp;rsquo;t own is not recommended by the folks who invented mocks.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Robolectric turns TDD on its head by allowing us to ignore something our standard unit tests are trying to tell us: our logic is tightly coupled and muddled with Android-SDK-related implementation details. That&amp;rsquo;s why we have such a hard time writing standard unit tests. Instead of listening to the design feedback of standard unit tests, Robolectric asks us to use a giant mock instead.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These concerns lead me to believe that Robolectric should be used sparingly, if at all. Let&amp;rsquo;s look at the concerns in detail. Along the way, I&amp;rsquo;ll be pulling in quotes from Feathers, Freeman, and Pryce to bolster my claim that the folks who are largely responsible for our practices of unit testing today would be suspicious of Robolectric.&lt;/p&gt;

&lt;h3 id=&#34;mocking-types-we-don-t-own&#34;&gt;Mocking Types We Don&amp;rsquo;t Own&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve already talked about how mocking types we don&amp;rsquo;t own can be a problem in &lt;a href=&#34;http://www.philosophicalhacker.com/post/how-we-misuse-mocks-for-android-tests/&#34;&gt;my post on how we misuse mocks for Android development&lt;/a&gt;, so I won&amp;rsquo;t repeat those points in detail here. The gist of this worry is twofold:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;According to Steve Freeman and Nat Pryce, the folks who really popularized mocks, mocking types we don&amp;rsquo;t own partially defeats the purpose of mocking and testing because the process of testing is supposed to tell us something about the design of the code we&amp;rsquo;re mocking. Because we don&amp;rsquo;t own the types, we can&amp;rsquo;t actually do anything with the design feedback our tests are giving us.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Secondly, and perhaps more importantly, mocking types we don&amp;rsquo;t own forces us to ensure that the mocked versions of the types our tests depend on actually match the behavior of their un-mocked counterparts. This is a concern that&amp;rsquo;s shared both by Freeman and Pryce and by Jake Wharton.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;robolectric-turns-tdd-on-its-head&#34;&gt;Robolectric turns TDD on its head&lt;/h3&gt;

&lt;p&gt;Obviously, Android developers aren&amp;rsquo;t the first ones who have tried testing code that relies on a framework. Typically, when folks outside the Android community are test driving code that depends on a framework, TDD encourages them to add a layer of abstraction between the framework and their code. This keeps the code loosely coupled and highly cohesive. The framework code stays at a layer below the application code.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s Freeman and Pryce on this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;we grow our systems a slice of functionality at a time. As the code scales up&amp;hellip;we use two principal heuristics to guide this structuring: Separation of Concerns&amp;hellip;[and] Higher Levels of Abstraction&amp;hellip;Applied consistently, these two forces will push the structure of an application towards something like Cockburn’s “ports and adapters” architecture [Cockburn08] , in which the code for the business domain is isolated from its dependencies on technical infrastructure, such as databases and user interfaces.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Higher levels of abstraction make our code more understandable and maintainable, and in order to achieve this in our design, we need to make sure our objects are &amp;ldquo;Context Independent,&amp;rdquo; which means that &amp;ldquo;each object has no build-in knowledge of the system in which it executes.&amp;rdquo;&lt;sup&gt;3&lt;/sup&gt; A few pages later in the next chapter, they go on to talk about how TDD specifically helps them drive towards this goal:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;to construct an object for a unit test, we have to pass its dependencies to it, which means that we have to know what they are. This encourages context independence, since we have to be able to set up the target object’s environment before we can unit-test it—a unit test is just another context. We’ll notice that an object with implicit (or just too many) dependencies is painful to prepare for testing—and make a point of cleaning it up.&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many of the difficulties we have as Android developers in testing (and otherwise) arise because our systems don&amp;rsquo;t exhibit separation of concerns and higher levels of abstraction. Freeman and Pryce are saying that there&amp;rsquo;s a direct link between these properties and testability, a link that Feathers echos in his book:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;one pervasive problem in legacy code bases is that there often aren’t any layers of abstraction; the most important code in the system often sits intermingled with low-level API calls. We’ve already seen how this can make testing difficult, but the problems go beyond testing. &lt;strong&gt;Code is harder to understand when it is littered with wide interfaces containing dozens of unused methods.&lt;/strong&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The emphasis on the last sentence is mine. It&amp;rsquo;s meant to highlight that Feathers and Freeman and Pryce are in agreement on the link between testability, abstraction, and understandable code.&lt;/p&gt;

&lt;p&gt;So, outside the Android community, its widely recognized that writing tests without any layers of abstraction between our application code and a framework is often impossible, so TDD exerts a positive influence on us to create layers of abstraction and because of this, we wind up with cleaner code.&lt;/p&gt;

&lt;p&gt;Hopefully, now we can start to see why Robolectric actually turns TDD on its head. Let&amp;rsquo;s start by remembering something I noted at the outset of this post: unfortunately, most Android apps are written in a way that muddles and couples application code with Android-SDK-related implementation details. The natural direction TDD with pure unit tests is pushing us in is to &lt;strong&gt;move the code we want to test OUT of Android framework classes like Activities, Fragments, and Services;&lt;/strong&gt; its pushing us in a cleaner direction of separating our application-specific logic from the Android SDK.&lt;sup&gt;6&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Robolectric, on the other hand, allows us to test our apps while leaving our application code mixed in with the Android SDK. Robolectric does this by &amp;ldquo;defanging the Android SDK&amp;rdquo; by mocking types we don&amp;rsquo;t own to make testing easier, but if we take traditional TDD seriously, &lt;strong&gt;this is exactly backwards&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t need to make testing easier by leaving our app code the same and changing the way we do testing. Instead, we need to make testing easier by listening to the tests and moving our application specific logic to a layer that&amp;rsquo;s higher than the Android SDK.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So, there you have it. Those are the biggest reasons why I don&amp;rsquo;t use robolectric. If you&amp;rsquo;ve got some ideas on where robolectric may be appropriate, I&amp;rsquo;d love to hear them.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Jake Wharton has pointed out &lt;a href=&#34;https://www.reddit.com/r/androiddev/comments/5mimhe/why_i_dont_use_roboletric_philosophical_hacker/dc40feu/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;fragmentedpodcast.com/episodes/7/&#34;&gt;here&lt;/a&gt; that some parts of Robolectric actually use real Android code, so I guess these parts wouldn&amp;rsquo;t really count as mocks.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;, Steve Freeman and Nat Pryce, 93-94.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid., 99-100.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid., 103-104.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;, Michael Feathers, 350-352. Emphasis mine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To some extent, I&amp;rsquo;ve been hitting on this at various points. See &lt;a href=&#34;https://www.philosophicalhacker.com/2015/04/10/against-android-unit-tests/&#34;&gt;Against Android Unit Tests&lt;/a&gt;, &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-we-should-stop-putting-logic-in-activities/&#34;&gt;Why we shouldn&amp;rsquo;t put logic in Activities&lt;/a&gt; and &lt;a href=&#34;post/object-seams-and-mvp-for-testability.md&#34;&gt;Object Seams and MVP&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>What Should we Unit Test?</title>
      <link>https://www.philosophicalhacker.com/post/what-should-we-unit-test/</link>
      <pubDate>Sun, 01 Jan 2017 16:41:45 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-should-we-unit-test/</guid>
      <description>

&lt;p&gt;When I go to work, I&amp;rsquo;m afraid of three things. I worry that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the new feature I&amp;rsquo;m implementing won&amp;rsquo;t work as expected&lt;/li&gt;
&lt;li&gt;the code I&amp;rsquo;m tweaking will break functionality that used to work&lt;/li&gt;
&lt;li&gt;the application isn&amp;rsquo;t architected in a way that makes it easy for me to adapt it to ever-changing business requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Automated testing is supposed to help alleviate all three of these fears, but when we&amp;rsquo;re first getting started with automated testing, it can be difficult to know where to start. We might look at a piece of code and wonder to ourselves, &amp;ldquo;Should I write a test for this code?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Cursory research on the question yields platitudes like &amp;ldquo;unit test your business logic,&amp;rdquo; but when I first got started, that didn&amp;rsquo;t really mean much to me&lt;sup&gt;1&lt;/sup&gt; and now that I have a bit more experience writing android unit tests, I find that answer to be too simplistic.&lt;/p&gt;

&lt;p&gt;Over-zealous testing enthusiasts may shout a different answer at us: &amp;ldquo;YOU SHOULD TEST (ALMOST) EVERYTHING!&amp;rdquo; They may be right. They&amp;rsquo;re not over-zealous because of how much they want us to test. Rather, they&amp;rsquo;re over-zealous because that&amp;rsquo;s a very unhelpful answer to the question &amp;ldquo;Where should I &lt;em&gt;start&lt;/em&gt; testing?&amp;rdquo; Its simply not true that all tests are equally helpful, a fact that Kent Beck, the guy who popularized TDD, recently tweeted about:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Being proud of 100% test coverage is like being proud of reading every word in the newspaper. Some are more important than others.&lt;/p&gt;&amp;mdash; Kent Beck (@KentBeck) &lt;a href=&#34;https://twitter.com/KentBeck/status/812703192437981184&#34;&gt;December 24, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;I think that if we keep in mind the fears that lead us to write tests in the first place, we&amp;rsquo;ll have a much easier time figuring out what to test. This should come as no surprise. After all, Kent Beck&amp;rsquo;s answer to the question of what to test is this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write tests until fear is transformed into boredom.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post is about the tests that fear drives us to write, tests that we should be spending most of our time writing.&lt;/p&gt;

&lt;h3 id=&#34;when-new-functionality-is-complicated&#34;&gt;When new functionality is complicated&lt;/h3&gt;

&lt;p&gt;Sometimes we write complicated code when simpler code could have done the trick. Sometimes, however, we can&amp;rsquo;t make our code any simpler. The problem we&amp;rsquo;re solving or the domain/rule we&amp;rsquo;re modeling is just complicated. When this happens, I get a little anxious. For example, suppose you had to implement the following functionality:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Show a &amp;ldquo;rate dialog&amp;rdquo; to a user if they&amp;rsquo;ve used the app three times. The user can opt to rate the app, request to be reminded to rate the app, or decline to rate the app. If the user opts to rate the app, take them to the google play store and don&amp;rsquo;t show the rate dialog again. If the user opts to be reminded to rate the app, reshow the dialog after three days have passed. If the user declines to rate the app, never show the dialog again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This isn&amp;rsquo;t terribly complicated, but its enough to make me anxious that I&amp;rsquo;ve covered all my bases as I&amp;rsquo;m writing the code. This is the kind of thing I&amp;rsquo;d write a unit test for.&lt;/p&gt;

&lt;h3 id=&#34;when-you-ve-got-old-code-that-breaks-often&#34;&gt;When you&amp;rsquo;ve got old code that breaks often&lt;/h3&gt;

&lt;p&gt;Sometimes there are parts of a code base that are very brittle. I typically dread having to make changes in these parts of a codebase. Even worse: some brittle parts of the code base have to change often and this causes lots of bugs. Making changes in this kind of code is like leaving food and dirty dishes out a crappy apartment: it invites bugs.&lt;/p&gt;

&lt;p&gt;Working on code that changes often and is often the source of bugs is maybe the scariest part of being a software engineer. You watch your co-workers trudge through the scary code and then they eventually find out the code that they changed introduced a bug. When you get assigned a ticket in that area, you have to pretend that you didn&amp;rsquo;t just see your co-worker get pwned by the code there. The fear is strong, so this is a great place to write tests.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, brittle code isn&amp;rsquo;t typically code that going to be easily unit testable, so you may have to settle for a functional-level test. Alternatively, you could employ some very conservative refactoring to get the brittle code into a unit-testable state.&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;when-you-think-your-code-will-change&#34;&gt;When you think your code will change&lt;/h3&gt;

&lt;p&gt;If you think you&amp;rsquo;re code will change, you&amp;rsquo;ve got a few reasons to write tests for it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tested code can be changed without introducing bugs.&lt;/li&gt;
&lt;li&gt;Tested code has a more flexible architecture that makes it is easier to change.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For some of us, all the code we write is susceptible to change. That&amp;rsquo;s why test zealots aren&amp;rsquo;t crazy in my mind. However, we can and should prioritize code that we think it is more likely to change in the near feature and make sure that we have tests around that code.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you let fear be your guide, you&amp;rsquo;ll write the tests you need to write. We&amp;rsquo;re writing tests because we&amp;rsquo;re afraid that if we don&amp;rsquo;t, new functionality won&amp;rsquo;t work as expected, that we&amp;rsquo;ll break stuff that used to work, or that we won&amp;rsquo;t be able to cope with changing business requirements. Keeping these fears in mind will lead us to write tests when we&amp;rsquo;re writing complicated new features, when we&amp;rsquo;re finding that our old code breaks often, and when we suspect that our code will need to change.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I think this is partially because many of us in the android community don&amp;rsquo;t have a firm grasp of the meaning of the phrase &amp;ldquo;business logic.&amp;rdquo; People often give hand-wavy definitions of business logic during their presentations. (I&amp;rsquo;ve been guilty of giving such definitions myself.) Sometimes I&amp;rsquo;ll even hear someone give an example of business logic and I&amp;rsquo;ll think to myself, &amp;ldquo;That&amp;rsquo;s not really business logic.&amp;rdquo; (I thought this when I heard Jake Wharton&amp;rsquo;s example of business logic in &lt;a href=&#34;http://fragmentedpodcast.com/episodes/7/&#34;&gt;Fragmented Episode 7 on testing&lt;/a&gt;.) Another reason I think this platitude is unhelpful is that business logic, on whatever definition you fancy, is often mixed in with all other types of code in Android applications. This makes its hard to tease out the subset of the Android code that is properly called &amp;ldquo;business logic.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;TDD By Example&lt;/em&gt;, Kent Beck, 194. On this same page, Beck also reluctantly gives us a list of things to test: conditionals, loops, operations, and polymorphism.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I&amp;rsquo;d love it if there was a tool that looked through my jira bug tickets, found the associated commits for addressing those tickets, and told me the classes and packages that needed to be changed to fix those bugs. I&amp;rsquo;d focus my efforts on writing tests for these buggy classes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Michael Feathers talks about these conservative refactoring techniques in &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>How we Misuse Mocks for Android Tests</title>
      <link>https://www.philosophicalhacker.com/post/how-we-misuse-mocks-for-android-tests/</link>
      <pubDate>Tue, 27 Dec 2016 08:21:42 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/how-we-misuse-mocks-for-android-tests/</guid>
      <description>

&lt;p&gt;Mocks are a pretty standard tool in our android developer tool belt. The extent to which we should use this tool for unit testing is a complicated and controversial issue.&lt;sup&gt;1&lt;/sup&gt; Within the Android community specifically, I think that a part of the controversy is due to confusion over the intended use of mocks. More specifically, some android developers seem intent on mocking types they don&amp;rsquo;t own and on verifying all interactions of a target class with a collaborator.&lt;/p&gt;

&lt;p&gt;It turns out that these two practices are not recommended by the folks who invented mocks because they have well-known have disadvantages. These disadvantages are precisely the ones that people seem to cite when they argue against mocks. There may be good arguments against mocks, but citing disadvantages of using them in a way that they aren&amp;rsquo;t meant to be used is about as compelling as arguing that we shouldn&amp;rsquo;t use hammers because they aren&amp;rsquo;t good for fastening screws.&lt;/p&gt;

&lt;p&gt;In this post, we&amp;rsquo;ll look at two ways I&amp;rsquo;ve seen mocks misused. Hopefully, by pointing out the intended use of mocks, we&amp;rsquo;ll find them more useful for unit testing android applications.&lt;/p&gt;

&lt;h3 id=&#34;too-many-verifications&#34;&gt;Too many verifications&lt;/h3&gt;

&lt;p&gt;A common complaint about mocks is that they tie tests too closely with the implementation details of the target code. Since we want our tests to help us refactor those implementation details with confidence, this coupling ruins one of the major advantages of writing tests.&lt;/p&gt;

&lt;p&gt;There are two things we can say in response to this complaint.&lt;/p&gt;

&lt;p&gt;First, Steve Freeman and Nat Pryce, the folks who really pioneered the use of mocks in testing, are well aware that this can occur when using mocks. This is why they recommend that we &amp;ldquo;write few expectations&amp;rdquo; in our tests using mocks:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A colleague, Romilly Cocking, when he first started working with us, was surprised by how few expectations we usually write in a unit test. Just like “everyone” has now learned to avoid too many assertions in a test, we try to avoid too many expectations. If we have more than a few, then either we’re trying to test too large a unit, or we’re locking down too many of the object’s interactions.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Second, whether a particular object&amp;rsquo;s interaction with a collaborator is an implementation detail depends on how we think about object-oriented programming and on the most compelling interpretation of OO I&amp;rsquo;m aware of, some interactions with collaborators aren&amp;rsquo;t really implementation details. Freeman puts this nicely &lt;a href=&#34;http://higherorderlogic.com/2013/01/some-mocks/&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some of us think about objects in terms of Alan Kay’s emphasis on message passing, others don’t. In my world, I’m interested in the protocols of how objects communicate, not what’s inside them, so testing based on interactions is a natural fit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think a compelling example of an object interacting with a collaborator in a way that isn&amp;rsquo;t an implementation detail is actually a &lt;code&gt;Presenter&lt;/code&gt; interacting with a &lt;code&gt;View&lt;/code&gt; in MVP. Take, for example, this &lt;code&gt;Presenter&lt;/code&gt; that we talked about in &lt;a href=&#34;https://www.philosophicalhacker.com/post/object-seams-and-mvp-for-testability/&#34;&gt;my post on MVP and object seams&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Presenter&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;presentCards&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mIsAttendeeAtVenue&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;mMsgSettings&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasAnsweredMessagePrompt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        mExploreView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;addMessageOptInCard&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this snippet, the &lt;code&gt;Presenter&lt;/code&gt;&amp;rsquo;s responsibility is to display the appropriate cards depending on various factors. When we write a test that includes the line &lt;code&gt;verify(mExploreView).addMessageOptInCard()&lt;/code&gt;, we&amp;rsquo;re merely making sure that the &lt;code&gt;Presenter&lt;/code&gt; does its job. We&amp;rsquo;re concerned with the &amp;ldquo;what,&amp;rdquo; not with the &amp;ldquo;how.&amp;rdquo; If &lt;code&gt;mExploreView&lt;/code&gt; wants to change how it actually adds a message opt in card, we don&amp;rsquo;t care. If the implementation of &lt;code&gt;MessageSettings.hasAnsweredMessagePrompt&lt;/code&gt; changes, again, we don&amp;rsquo;t care.&lt;/p&gt;

&lt;h3 id=&#34;mocking-types-we-don-t-own&#34;&gt;Mocking Types We Don&amp;rsquo;t Own&lt;/h3&gt;

&lt;p&gt;Although the exceptions thrown by running android unit tests that exercise unmocked android dependencies suggests otherwise, we shouldn&amp;rsquo;t be in the business of mocking types we don&amp;rsquo;t own. Again, Freeman and Pryce are explicit about the disadvantages of doing this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We find that tests that mock external libraries often need to be complex to get the code into the right state for the functionality we need to exercise. The mess in such tests is telling us that the design isn’t right but, instead of fixing the problem by improving the code, we have to carry the extra complexity in both code and test. A second risk is that we have to be sure that the behavior we stub or mock matches what the external library will actually do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This second risk is actually something that Jake Wharton has commented on explicitly in the context of using robolectric for Android testing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[With robolectric], you end up testing the wrong thing&amp;hellip;your test is testing the robolectric implementation of these lifecycles and these mechanisms&amp;hellip;the fact that you&amp;rsquo;re relying on those behaviors&amp;hellip;it&amp;rsquo;s going to devalue the actual test itself.&lt;/p&gt;

&lt;p&gt;-Jake Wharton, Fragmented Podcast Episode 7 4:10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The approach recommended by Freeman and Pryce &amp;ndash; and the approach that I strive to follow when writing tests for my code &amp;ndash; is to instead write an adapter layer that translates requests from our application to the third party library, which in this case is the Android SDK. The &lt;code&gt;View&lt;/code&gt; in MVP is often a part of this adapter layer, as it translates requests made in the language of our application into code that talks directly to the Android SDK.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So, don&amp;rsquo;t make too many verifications on your mocks and don&amp;rsquo;t mock types you don&amp;rsquo;t own. Following this advice &amp;ndash; advice that&amp;rsquo;s given by the inventors of mocks &amp;ndash; will make your tests simpler and less tied to implementation details of the class you&amp;rsquo;re trying to test.&lt;sup&gt;3&lt;/sup&gt; If we follow this advice, I think we&amp;rsquo;ll find that mocks are a very apt tool for unit testing android applications.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;See &lt;a href=&#34;http://martinfowler.com/articles/mocksArentStubs.html&#34;&gt;&amp;ldquo;Mocks Aren&amp;rsquo;t Stubs&amp;rdquo;&lt;/a&gt; and &lt;a href=&#34;http://higherorderlogic.com/2013/01/some-mocks/&#34;&gt;&amp;ldquo;Some Mocks&amp;rdquo;&lt;/a&gt; for example.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Growing Object Oriented Software Guided by Tests,&amp;rdquo; 319.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I actually think following these two pieces of advice leads to a virtuous circle: if you only mock types you own, then you have to define types in the language of your application. This makes your test less coupled to implementation details, as stubbing these types in the arrange step of your unit test will actually just feel like you&amp;rsquo;re declaratively specifying preconditions in the language of your application. Conversely, there&amp;rsquo;s a vicious cycle caused by mocking types you don&amp;rsquo;t own. You&amp;rsquo;re tests are going to be more tied to implementation details and because mocking types we don&amp;rsquo;t own winds up being complicated, its especially painful to change tests when implementation details need to change.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Build Variants and Link Seams</title>
      <link>https://www.philosophicalhacker.com/post/build-variants-and-link-seams/</link>
      <pubDate>Sun, 18 Dec 2016 15:39:11 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/build-variants-and-link-seams/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This post is just another installment in a series of posts that are a written version of &lt;a href=&#34;https://devfestflorida.org/schedule/day1?sessionId=113&#34;&gt;my Florida dev fest talk&lt;/a&gt;. &lt;a href=&#34;https://www.philosophicalhacker.com/post/object-seams-and-mvp-for-testability/&#34;&gt;Last time&lt;/a&gt;, we talked about object seams and how they make our apps more testable. This time, we&amp;rsquo;ll talk about how link seams help you write more testable apps and how build variants are used to create link seams.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-are-link-seams&#34;&gt;What are link seams?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;“[code] contains calls to code in other files. Linkers…resolve each of the calls so that you can have a complete program at runtime…you can usually exploit [this] to substitute pieces of your program”&lt;/p&gt;

&lt;p&gt;-Michael Feathers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above quotation is Feathers&amp;rsquo; definition of a link seam. Recall that a seam is just something that allows us to change the behavior of a particular piece of code without modifying that code in that place.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try to clarify this concept of a link seam by looking at one way of solving the &amp;ldquo;dr. jekyll/mr. hyde&amp;rdquo; smell I mentioned in &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-makes-android-apps-testable/&#34;&gt;my first post&lt;/a&gt; in this series. Hopefully, this picture will help jog your memory of that smell:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/dr-jekyll-poster.jpg&#34; alt=&#34;Dr. Jekyll and Mr. Hyde&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the smelly code that used to live in the Google I/O app:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;PresenterFragmentImpl&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Fragment
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;implements&lt;/span&gt; Presenter&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; UpdatableView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;UserActionListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
        LoaderManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LoaderCallbacks&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Cursor&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; Loader&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Cursor&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onCreateLoader&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; id&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Bundle args&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        Loader&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Cursor&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; cursorLoader &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; createLoader&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        mLoaderIdlingResource&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onLoaderStarted&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;cursorLoader&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; cursorLoader&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onLoadFinished&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Loader&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Cursor&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; loader&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                               Cursor data&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        processData&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;loader&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        mLoaderIdlingResource&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onLoaderFinished&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;loader&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The two highlighted lines point to a smell: this code mixes testing responsibilities in with production code. Idling resources, in case you didn&amp;rsquo;t know, are used to tell espresso when it can continue executing tests. They&amp;rsquo;re used to avoid having to place &lt;code&gt;sleep&lt;/code&gt; calls all over your tests.&lt;/p&gt;

&lt;p&gt;Now, we &lt;em&gt;could&lt;/em&gt; actually solve this issue by using link seams. As we&amp;rsquo;ll see later, using link seams to solve this problem directly is probably a bad idea, but its a useful example for introducing link seams and showing why they might be useful.&lt;/p&gt;

&lt;p&gt;Before we see how this is possible, let&amp;rsquo;s step back and remember that build variants are a thing. Build variants create special source sets that will get loaded onto the classpath whenever we are building a particular variant apk.&lt;/p&gt;

&lt;p&gt;The typical example of build variants are &amp;ldquo;free&amp;rdquo; and &amp;ldquo;paid&amp;rdquo; versions of your app, but those variants wouldn&amp;rsquo;t solve our problem. Our problem is this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The app needs to be in a state we can use for testing that&amp;rsquo;ll have a way of telling espresso to wait for some long-running operation to complete.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We also want a normal state for the app that we&amp;rsquo;d use for production that doesn&amp;rsquo;t care about espresso at all.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, let&amp;rsquo;s say we created build variants for these to two states. Suppose we had a &amp;ldquo;mock&amp;rdquo; build variant that we wanted to use for testing and a &amp;ldquo;prod&amp;rdquo; version that we wanted to use for production. If we had those variants, we&amp;rsquo;d have special source sets and our project structure would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/sourcesets-testable-apps-3.png&#34; alt=&#34;debug and mock source sets&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we had these different source sets, we could create two different &lt;code&gt;PresenterFragmentImpl.java&lt;/code&gt; files. One would live in the &lt;code&gt;mock&lt;/code&gt; build variant. The other would live in the &lt;code&gt;prod&lt;/code&gt; variant. Common functionality could be abstracted to a superclass that lives in the &lt;code&gt;main&lt;/code&gt; sourceset.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;If we&amp;rsquo;ve got things setup this way, then when the &lt;code&gt;PresenterFragmentImpl&lt;/code&gt; gets instantiated, we&amp;rsquo;ll have different implementations depending on whether we&amp;rsquo;re building a &lt;code&gt;prod&lt;/code&gt; or &lt;code&gt;mock&lt;/code&gt; build variant. In that case, we can change the behavior of our program while also leaving the code that instantiates and uses our &lt;code&gt;PresenterFragmentImpl&lt;/code&gt; alone:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; PresenterFragmentImpl &lt;span style=&#34;color: #0000FF&#34;&gt;addPresenterFragment&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; uVResId&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                                  Model model&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                                  QueryEnum&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; queries&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                                            UserActionEnum&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; actions&lt;span style=&#34;color: #666666&#34;&gt;){&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;presenter &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//Create, set up and add the presenter.&lt;/span&gt;
    presenter &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; PresenterFragmentImpl&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; presenter&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What we&amp;rsquo;ve done perfectly fits the definition of a link seam: we&amp;rsquo;ve manipulated the classpath to link together different files in such a way that we can modify the behavior of the code that instantiates and uses &lt;code&gt;PresenterFragmentImpl&lt;/code&gt; without actually modifying the source files that create and use &lt;code&gt;PresenterFragmentImpl&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;what-should-they-be-used-for&#34;&gt;What should they be used for?&lt;/h3&gt;

&lt;p&gt;Now that we (hopefully) have an idea of what link seams are, we can ask, &amp;ldquo;How &lt;em&gt;should&lt;/em&gt; we use link seams to make our Android apps testable?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I think link seams are most appropriately used for espresso tests.&lt;sup&gt;2&lt;/sup&gt; However, there are a lot of &lt;em&gt;disadvantages&lt;/em&gt; with the way I was using link seams above. I don&amp;rsquo;t want to really spend any time on why I think this, but basically it boils down to this: once your object graph / dependency situation starts getting more complicated, your seams can wind up looking very messy.&lt;/p&gt;

&lt;p&gt;In order to understand a better way to exploit link seams, it helps to be familiar with Feathers&amp;rsquo; concept of an &amp;ldquo;enabling point.&amp;rdquo; Feathers defines an enabling point as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every seam has an enabling point, a place where you can make the decision to use one behavior or another.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The enabling point for object seams is the point where those objects are instantiated, which is why dependency injection creates seams. If you instantiate a dependency within the client object, that client is tightly coupled with a particular implementation of that dependency. You can&amp;rsquo;t change the behavior of that object without changing the source code of the class. Inverting the control of dependency implementation selection, on the other hand, creates an object seam whose enabling point is the point at which the dependency of a particular object is instantiated.&lt;/p&gt;

&lt;p&gt;The enabling point for link seams created by build variants is the point when we make the decision to run &lt;code&gt;assembleMockDebug&lt;/code&gt; or &lt;code&gt;assembleProdDebug&lt;/code&gt;. That&amp;rsquo;s the point at which we choose which behavior the app is going to have.&lt;/p&gt;

&lt;p&gt;Instead of using link seams directly to make our code testable, I think, we&amp;rsquo;re better off using link seams as an &lt;em&gt;enabling point&lt;/em&gt; for object seams. As we said &lt;a href=&#34;https://www.philosophicalhacker.com/post/object-seams-and-mvp-for-testability/&#34;&gt;last time&lt;/a&gt;, object seams are often created via dependency injection. So, what I&amp;rsquo;m suggesting is that we&amp;rsquo;re better off setting up our code so that the different build variants choose how our dependency injection gets setup.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s flesh suggestion out by seeing how it would apply to the above example. Instead of having a &lt;code&gt;PresenterFragmentImpl&lt;/code&gt; for each sourceset, we&amp;rsquo;d have a different factory for each sourceset.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// prod sourcest&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;FragFactory&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; PresenterFragmentImpl &lt;span style=&#34;color: #0000FF&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; PresenterFragmentImpl&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// mock sourcest&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;FragFactory&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; PresenterFragmentImpl &lt;span style=&#34;color: #0000FF&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; MockPresenterFragmentImpl&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, instead of directly instantiating a &lt;code&gt;PresenterFragmentImpl&lt;/code&gt;, we&amp;rsquo;d get one from a factory.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; PresenterFragmentImpl &lt;span style=&#34;color: #0000FF&#34;&gt;addPresenterFragment&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; uVResId&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                                  Model model&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                                  QueryEnum&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; queries&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                                  UserActionEnum&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; actions&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;presenter &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//Create, set up and add the presenter.&lt;/span&gt;
      presenter &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mFragFactory&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...        &lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; presenter&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Getting the instance from a factory actually allows us the ability to change our apps behavior at run time instead of compile time, which can be very useful. &lt;a href=&#34;https://speakerdeck.com/jakewharton/android-apps-with-dagger-devoxx-2013?slide=168&#34;&gt;Square, for example, has a &amp;ldquo;mock mode&amp;rdquo;&lt;/a&gt; in their applications for testing where they can pull out a navigation drawer and tell the app to stub network responses instead of hitting their servers. The app restarts and does exactly that. This allows the stubbing code they wrote to be useful both for automated and manual testing.&lt;/p&gt;

&lt;p&gt;Mock mode is neat, but there&amp;rsquo;s a more important reason for using link seams as an enabling point for object seams: it opens us up to the possibility of using some kind of dependency injection library for managing the different states we want the app to be in for testing purposes. For example, we can set up our dagger modules differently depending on what build variant is being built and clients can consume all of the appropriate dependencies exposed by dagger.&lt;sup&gt;3&lt;/sup&gt; Solutions like this give us a clean way of managing our seams.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Link seams are ways of changing the behavior of a particular piece of code without editing that code in place by exploiting the way that files are linked together. With android, we do this via build variants. Link seams are useful for espresso tests, but shouldn&amp;rsquo;t be used directly to put the app into a testable state. Instead, link seams should be used as an enabling point for object seams. This enables us to put our apps into a more testable state at run time (e.g., square&amp;rsquo;s mock mode) and it helps us keep our seams clean, especially if we use a DI library.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you already have a free and paid build variant, for example, and you&amp;rsquo;re worried about how you would create mock and prod variants of those variants, you should look into &lt;a href=&#34;http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Multi-flavor-variants&#34;&gt;flavor dimensions&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;However, if you&amp;rsquo;re trying to get unit tests around a particularly gnarly class whose dependencies aren&amp;rsquo;t injected, it may be appropriate to use link seams.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Turns out there&amp;rsquo;s actually &lt;a href=&#34;https://google.github.io/dagger/testing.html&#34;&gt;a guide in the dagger 2 docs&lt;/a&gt; that specifically addresses how to do this.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Object Seams and MVP for Testability</title>
      <link>https://www.philosophicalhacker.com/post/object-seams-and-mvp-for-testability/</link>
      <pubDate>Fri, 09 Dec 2016 18:29:54 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/object-seams-and-mvp-for-testability/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-makes-android-apps-testable/&#34;&gt;my last post&lt;/a&gt;, a continuation of a written version of the talk I gave at Florida dev fest, I tried to give an answer to the question, &amp;ldquo;What makes apps testable?&amp;rdquo; The answer: seams. Seams make apps testable, and in this post, I want to talk about a particular kind of seam: object seams.&lt;/p&gt;

&lt;p&gt;The key insight behind object seams in this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The fundamental thing to recognize is that when we look at a call in an object-oriented program, it does not define which method will actually be executed.&lt;/p&gt;

&lt;p&gt;-Michael Feathers, Working Effectively with Legacy Code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we use this fact to modify the behavior of a particular piece of code without editing the code in that place, then we&amp;rsquo;re using an object seam. The refactoring I showed in my last post was an example of exploiting an object seam, but we&amp;rsquo;re going to look at another example.&lt;/p&gt;

&lt;p&gt;Before we do that, however, I want to point out that dependency injection is one of the key ways&lt;sup&gt;1&lt;/sup&gt; that we create object seams. There still seems to be some confusion about dependency injection, so let me quickly try to clarify: Dependency injection is pattern; its not dagger or any other library.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a definition of dependency injection:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The code that needs dependencies is not responsible for getting them&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If that&amp;rsquo;s true of code that you&amp;rsquo;re writing, you&amp;rsquo;re using dependency injection.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;With this in mind, we&amp;rsquo;re now in a position to see something that I struggled to discover over a year ago when I wrote &lt;a href=&#34;https://www.philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/&#34;&gt;my series on posts on why android unit testing is hard&lt;/a&gt;: the reason MVP makes our apps more testable is because MVP creates object seams via dependency injection.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see an example of this. Here&amp;rsquo;s a video of some functionality in the 2015 Google I/O app. Notice that when I first open the app, I&amp;rsquo;m presented with some cards that ask my preferences on a few things. Once I return to the app, however, those cards are no longer present.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/RtGSl9h-SoE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;Here&amp;rsquo;s the relevant code for this functionality:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;setupCards&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;CollectionView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;Inventory&lt;/span&gt; inventory&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SettingsUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isAttendeeAtVenue&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getContext&lt;span style=&#34;color: #666666&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;ConfMessageCardUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasAnsweredConfMessageCardsPrompt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getContext&lt;span style=&#34;color: #666666&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;            inventoryGroup
            &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; InventoryGroup&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;GROUP_ID_MESSAGE_CARDS&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
            MessageData conferenceMessageOptIn &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; MessageCardHelper
                    &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getConferenceOptInMessageData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getContext&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
            inventoryGroup&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;addItemWithTag&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;conferenceMessageOptIn&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
            inventoryGroup&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setDisplayCols&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(1);&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;            inventory&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;addGroup&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;inventoryGroup&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// ...&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Take a look at the first two lines. Right away, we have a red flag: static methods. Every use of a static method is a missed opportunity to create an object seam. If we decide we need to unit test some of the code here, we&amp;rsquo;re going to have trouble arranging in our test code.&lt;/p&gt;

&lt;p&gt;Look at that last line of code. In order to convince yourself that you really understand the concept of a seam, ask yourself, &amp;ldquo;Is there a seam at this line of code?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;We can change the behavior of this particular line of code without editing the source file, so there is in fact a seam here. We can change the behavior of this line of code by passing in various subclasses of &lt;code&gt;CollectionView.Inventory&lt;/code&gt; to this method.&lt;/p&gt;

&lt;p&gt;Ok, so we&amp;rsquo;ve got a mixed bag in terms of our seams. Let&amp;rsquo;s say we refactor this code to use MVP. Our presenter looks something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Presenter&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;presentCards&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mIsAttendeeAtVenue&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;mMsgSettings&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasAnsweredMessagePrompt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;                mExploreView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;addMessageOptInCard&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Stuff&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The view is one of the injected dependencies and we can easily verify that the appropriate method has been called in our tests. This is the main way in which MVP helps us write more testable code: all of the interaction with the UI can now be verified by swapping out the injected View with an implementation that records its interaction with the Presenter. In our case, this implementation is usually generated by mockito.&lt;/p&gt;

&lt;p&gt;One other thing to notice here: we&amp;rsquo;ve replaced static method calls with calls to injected dependencies. This isn&amp;rsquo;t necessarily mandated by MVP, but its something that we need to do if want to make this code unit testable.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another kind of seam that we haven&amp;rsquo;t explored yet: linking seams. Linking seams are created using build variants, and we&amp;rsquo;ll talk about those more in &lt;a href=&#34;https://www.philosophicalhacker.com/post/build-variants-and-link-seams/&#34;&gt;my next post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Another way is by using inheritance. Feathers&amp;rsquo; Extract and Override Method, Push Down Dependencies, and Pull Up Dependencies techniques are three interesting ways of creating object seams using inheritance.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://martinfowler.com/articles/injection.html&#34;&gt;Martin Fowler&amp;rsquo;s article&lt;/a&gt; is the definitive source on DI. He basically coined the phrase.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>What makes Android Apps Testable?</title>
      <link>https://www.philosophicalhacker.com/post/what-makes-android-apps-testable/</link>
      <pubDate>Sat, 03 Dec 2016 18:16:18 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-makes-android-apps-testable/</guid>
      <description>&lt;p&gt;This post is a continuation of my attempt to reproduce &lt;a href=&#34;https://devfestflorida.org/schedule/day1?sessionId=113&#34;&gt;my recent DevFest talk&lt;/a&gt; in written form.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;penrose-steps-dr-jekyll-mr-hyde-and-android-testing&#34;&gt;Penrose Steps, Dr. Jekyll/Mr. Hyde, and Android Testing&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s say you&amp;rsquo;re sold on the importance of testing. (If not, maybe check out &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-we-should-probably-write-more-tests-for-our-android-apps/&#34;&gt;this article&lt;/a&gt;.) Let&amp;rsquo;s say you actually start using the junit dependency that&amp;rsquo;s been sitting in your build.gradle file and try to write your first test. I suspect that you&amp;rsquo;re going to find yourself in a kind of &amp;ldquo;penrose steps situation.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The penrose steps, shown above, is an impossible structure. Penrose steps cannot exist in 3d space. What&amp;rsquo;s interesting about the 2d image of penrose steps, however, is that its not immediately obvious that what is being depicted is impossible.&lt;/p&gt;

&lt;p&gt;Something similar can happen when we go to start writing tests for our code. We look at our code and we think, &amp;ldquo;I can totally write tests for this.&amp;rdquo; Upon further inspection, however, we realize. &amp;ldquo;Oh wait. This is actually impossible.&amp;rdquo; This penrose steps experience isn&amp;rsquo;t limited to Android developers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Something nearly everyone notices when they try to write tests for existing code is just how poorly suited code is to testing.&lt;/p&gt;

&lt;p&gt;&amp;ndash; Michael Feathers, Working Effectively with Legacy Code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Testing support for Android has gotten a lot better in the past couple of years, but I think that actually attempting to use the testing tools that are now available for Android has helped us realize that our apps aren&amp;rsquo;t actually structured in a way that makes testing easy and in some cases, our architectures simply make it impossible to test our code.&lt;/p&gt;

&lt;p&gt;This mismatch between our good intentions and our poorly structured apps can lead us to a kind of Dr. Jekyll and Mr. Hyde situation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/dr-jekyll-poster.jpg&#34; alt=&#34;Dr Jekyll Poster&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Dr. Jekyll was a good dude, but he was messing with something he didn&amp;rsquo;t understand and that led him to transform into Mr. Hyde, the guy that does unspeakable things. Similarly, developers who want to test their code have good intentions, but if they don&amp;rsquo;t understand what makes code testable, they can do unspeakably (terrible) things to a codebase.&lt;/p&gt;

&lt;p&gt;Case in point: &lt;a href=&#34;https://github.com/google/iosched/blob/2015/android/src/main/java/com/google/samples/apps/iosched/framework/PresenterFragmentImpl.java#L185&#34;&gt;The google 2015 I/O app&lt;/a&gt; contains a particularly egregious violation of the principle of single responsibility:&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;PresenterFragmentImpl&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Fragment
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;implements&lt;/span&gt; Presenter&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; UpdatableView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;UserActionListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
        LoaderManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LoaderCallbacks&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Cursor&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; Loader&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Cursor&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onCreateLoader&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; id&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Bundle args&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        Loader&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Cursor&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; cursorLoader &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; createLoader&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;id&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        mLoaderIdlingResource&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onLoaderStarted&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;cursorLoader&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; cursorLoader&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onLoadFinished&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Loader&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Cursor&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; loader&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                               Cursor data&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        processData&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;loader&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        mLoaderIdlingResource&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onLoaderFinished&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;loader&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code snippet mixes production code and test code. That&amp;rsquo;s pretty unfortunate.&lt;/p&gt;

&lt;h3 id=&#34;what-makes-software-testable&#34;&gt;What Makes Software Testable?&lt;/h3&gt;

&lt;p&gt;To avoid Penrose steps and Dr. Jekyll scenarios while we&amp;rsquo;re trying to write tests for our Android apps, its helpful to have an answer to the question, &amp;ldquo;What makes Software Testable?&amp;rdquo; This picture suggests a metaphor for thinking about the answer to that question, a metaphor that I stole from Michal Feathers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/seam.png&#34; alt=&#34;a seam in jeans pant leg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we want to change the appearance of this piece of fabric, we have two options: we could just directly apply whatever changes we want to the pieces of fabric that are joined at the seam. Another option, however, is to undo the seam and replace one piece of fabric with another.&lt;/p&gt;

&lt;p&gt;Similarly, when we want to change the behavior of code for testing purposes, we have two options: we can directly apply our changes to the particular source file or we can use what Feather&amp;rsquo;s calls a &amp;ldquo;seam&amp;rdquo; to change the code&amp;rsquo;s behavior. Here&amp;rsquo;s how Feathers defines a seam:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A seam is a place where you can alter behavior in your program without editing in that place.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Perhaps the easiest way of fleshing out this concept of a seam to see what it feels like to try to write tests for code that has no seams. Say we wanted to write code for a piece of functionality in the Google I/O app:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/settings.png&#34; alt=&#34;settings screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This toggle determines whether the google I/O calendar should be synced to the user&amp;rsquo;s personal calendar. Here&amp;rsquo;s the code for it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onSharedPreferenceChanged&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SharedPreferences sharedPrefs&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                            String key&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SettingsUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PREF_SYNC_CALENDAR&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        Intent intent&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SettingsUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;shouldSyncCalendar&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getActivity&lt;span style=&#34;color: #666666&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Add all calendar entries&lt;/span&gt;
            intent &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Intent&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ACTION_UPDATE_ALL_SESSIONS_CALENDAR&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Remove all calendar entries&lt;/span&gt;
            intent &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Intent&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ACTION_CLEAR_ALL_SESSIONS_CALENDAR&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

        intent&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setClass&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getActivity&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; SessionCalendarService&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        getActivity&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;startService&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;intent&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&amp;rsquo;s start writing our test for it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onSharedPreferenceChangedRemovesSessions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Arrange&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//Act&lt;/span&gt;
    mSettingsFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onSharedPreferencesChanged&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mMockSharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                                  PREF_SYNC_CALENDAR&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//Assert&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As the test method name implies, we want to test that &lt;code&gt;onSharedPreferencesChnaged&lt;/code&gt; removes the calendar sessions appropriately.&lt;sup&gt;2&lt;/sup&gt; We need to make sure the the &lt;code&gt;else&lt;/code&gt; branch of the above &lt;code&gt;if-else&lt;/code&gt; statement gets executed. To do that, we need to make sure that &lt;code&gt;SettingsUtils.shouldSyncCalendar(getActivity())&lt;/code&gt; returns false, but we can&amp;rsquo;t just go to the declaration of &lt;code&gt;SettingsUtils.shouldSyncCalendar&lt;/code&gt; and change the code so that it returns false. &lt;em&gt;We need to change behavior of our code without editing it &amp;ldquo;in place.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the thing: because &lt;code&gt;SettingsUtils.shouldSyncCalendar&lt;/code&gt; is a static method, we can&amp;rsquo;t actually do this. There is no seam for us to exploit here. &lt;em&gt;If you code doesn&amp;rsquo;t have seams, you&amp;rsquo;re going to find it difficult to arrange in your tests.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice, moreover, that we can&amp;rsquo;t assert in this test either. How can we assert that an Android &lt;code&gt;Service&lt;/code&gt; has been launched? There&amp;rsquo;s no straightforward way to do this, which is why &lt;a href=&#34;https://developer.android.com/reference/android/support/test/espresso/intent/Intents.html&#34;&gt;the Intent class&lt;/a&gt; exists within espresso. What we need here is to be able to change the behavior of &lt;code&gt;Context.startService&lt;/code&gt; so that it records that a service has been started, but we can&amp;rsquo;t. Obviously, we can&amp;rsquo;t edit the &lt;code&gt;Context.startService&lt;/code&gt; method and we have no control over the &lt;code&gt;Context&lt;/code&gt; returned by &lt;code&gt;getActivity&lt;/code&gt;. We&amp;rsquo;ll see why that would create a seam later, but the important thing to note here is that &lt;em&gt;if you code doesn&amp;rsquo;t have seams, you&amp;rsquo;re going to find it difficult to assert in your tests.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Suppose instead that the settings toggle code looked like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CalendarUpdatingOnSharedPreferenceChangedListener&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onPreferenceChanged&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;CalendarPreferences calendarPreferences&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                             String key&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SettingsUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PREF_SYNC_CALENDAR&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;calendarPreferences&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;shouldSyncCalendar&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;                mSessUpdaterLauncher&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;launchAddAllSessionsUpdater&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;                mSessUpdaterLauncher&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;launchClearAllSessionsUpdate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;            &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that we&amp;rsquo;ve replaced a static method call with an instance method call. Notice also that the details of how the &lt;code&gt;SessionCalendarService&lt;/code&gt; is started is hidden behind a call to &lt;code&gt;mSessUpdateerLauncher.launchClearAllSessionsUpdate()&lt;/code&gt;. These two changes let us arrange and assert in our unit test:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onPreferenceChangedClearedCalendar&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Arrange&lt;/span&gt;
    CUOSPCListener listener
            &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; CUOSPCListener&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mSessionUpdateLauncher&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; CalendarPreferences calendarPreferences
            &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mock&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;CalendarPreferences&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    when&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;calendarPreferences&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;shouldSyncCalendar&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;thenReturn&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Act&lt;/span&gt;
    listener&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onPreferenceChanged&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;calendarPreferences&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                                 SettingsUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PREF_SYNC_CALENDAR&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Assert&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    verify&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mSessionUpdateLauncher&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;launchClearAllSessionsUpdate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The changes we made to our code gave us seams that we exploited in our unit test. Using mockito&lt;sup&gt;3&lt;/sup&gt;, we changed the behavior of &lt;code&gt;calendarPreferences.shouldSyncCalendar()&lt;/code&gt; so that it returns false without going to the declaration of &lt;code&gt;CalendarPreferences.shouldSyncCalendar&lt;/code&gt; and editing it. We also used mockito to swap out a standard &lt;code&gt;SessionUpdaterLauncher&lt;/code&gt; with an implementation that records that a particular method has been called. This, of course, is what allows us to assert in our test with &lt;code&gt;verify&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The seams we&amp;rsquo;ve just created here are called &amp;ldquo;object seams,&amp;rdquo; and they&amp;rsquo;re something that I&amp;rsquo;ll cover more explicitly in &lt;a href=&#34;https://www.philosophicalhacker.com/post/object-seams-and-mvp-for-testability/&#34;&gt;my next post&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re sold on testing, but you don&amp;rsquo;t understand what makes code testable, you can wind up trying to do the impossible: test untestable code. You may also wind up doing terrible things to your code base to try to add tests. You can avoid these situations by understanding what makes code testable. Testable code has seams, and without those seams, you&amp;rsquo;re going to find it difficult to arrange and/or assert in your tests.&lt;/p&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Thankfully, it looks like they may have fixed this in &lt;a href=&#34;https://github.com/google/iosched&#34;&gt;the 2016 version of the Google I/O app&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This behavior may actually be too trivial to test in real life, but its makes for a simple example.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Of course, using mockito to accomplish this isn&amp;rsquo;t absolutely necessary.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Why we Should Probably Write More Tests for Our Android Apps</title>
      <link>https://www.philosophicalhacker.com/post/why-we-should-probably-write-more-tests-for-our-android-apps/</link>
      <pubDate>Mon, 07 Nov 2016 07:36:45 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-we-should-probably-write-more-tests-for-our-android-apps/</guid>
      <description>

&lt;p&gt;This past weekend, I had the privilege of speaking about writing testable Android apps &lt;a href=&#34;https://devfestflorida.org/speakers/12/&#34;&gt;at Florida DevFest&lt;/a&gt;. This post is a written version of one of the major points I made in my presentation.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start off with two descriptions of attitudes towards testing. The first comes from Kaushik Goupal (he&amp;rsquo;s describing an attitude, not endorsing it):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Testing seems to be like going to gym. Everyone feels like &amp;ldquo;yeah. I should be testing. I should be going to the gym everyday.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Koushik Goupal, Fragmented Episode 13 12:01&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second comes from &lt;em&gt;Pragmatic Programmer&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your signature should come to be recognized as an indicator of quality. People should see your name on a piece of code and expect it to be solid, well written, tested, and documented. A really professional job. Written by a real professional. A Pragmatic Programmer.&lt;/p&gt;

&lt;p&gt;Andrew Hunt and Dave Thomas, Pragmatic Programmer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which attitude is right? Is automated testing a nice-to-have or is it an integral part of a software engineer&amp;rsquo;s work. I think that its the latter. Here&amp;rsquo;s why.&lt;/p&gt;

&lt;h3 id=&#34;for-most-of-us-good-code-is-changeable-code&#34;&gt;For most of us, Good Code is Changeable Code&lt;/h3&gt;

&lt;p&gt;Dan North, the &amp;ldquo;BDD&amp;rdquo; creator and core contributor of rspec, has an interesting perspective on what we&amp;rsquo;re doing as software engineers. He says,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;goal of software delivery is to minimise the lead time to business impact. Everything else is detail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This view is a bit too strong in my opinion, but it does get one thing right: good code is changeable code. Suppose you ship an app that is performant and beautiful and that many of your users love it. Your boss says, &amp;ldquo;this is great, but lets add a feature and change this other behavior.&amp;rdquo; If you&amp;rsquo;re response is, &amp;ldquo;Well, the code is spaghetti. Its hard to understand and I&amp;rsquo;m not confident that I won&amp;rsquo;t break things when I make changes,&amp;rdquo; you&amp;rsquo;re boss is going to be disappointed.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;For most of us, I don&amp;rsquo;t think that claim will seem controversial. If you&amp;rsquo;re working on a pet project or a prototype that isn&amp;rsquo;t going to need to survive multiple iterations, I&amp;rsquo;m not really including you in the &amp;ldquo;us&amp;rdquo; here.&lt;/p&gt;

&lt;h3 id=&#34;for-most-of-us-changeable-code-is-tested-code&#34;&gt;For most of us, Changeable Code is Tested Code&lt;/h3&gt;

&lt;p&gt;Say you agree that good code is changeable code. What does that have to do with tests? Well, for most of us, tests are the only practical way of minimizing the time it takes to change our software.&lt;/p&gt;

&lt;p&gt;When I say &amp;ldquo;us&amp;rdquo; here, I&amp;rsquo;m talking about professional software engineers of average intelligence who are working on fairly large projects. I&amp;rsquo;m not that smart, so I make mistakes when I write code, especially if the codebase I&amp;rsquo;m working on is large. If you&amp;rsquo;re much smarter than me and/or you&amp;rsquo;re working on a smaller project, this argument doesn&amp;rsquo;t really apply.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s two reasons why changeable code is tested code.&lt;/p&gt;

&lt;p&gt;First, writing unit tests for your code actually helps you write better code. I think this is an under-appreciated benefit of writing unit tests for your code. Steve Freeman and Nat Pryce have a nice way of explaining why this is true:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for a class to be easy to unit-test, the class must…be loosely coupled and highly cohesive —in other words, well-designed.&lt;/p&gt;

&lt;p&gt;Steve Freeman and Nat Pryce, Growing Object Oriented Software Guided by Tests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think its uncontroversial that loose coupling and high cohesion are properties that make it easier to change code.&lt;/p&gt;

&lt;p&gt;Second, writing tests (unit or otherwise) allow us to make changes without having to worry that we&amp;rsquo;ve broken something. Mark Zuckerberg painted a really powerful picture of this in his recent &amp;ldquo;How to build the Future Interview:&amp;rdquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We invest in this huge testing framework…engineers here have the power to try out an idea and ship it to maybe 10,000 people or 100,000 people.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Imagine that. Engineers can build a feature and ship it with confidence.&lt;sup&gt;2&lt;/sup&gt; That&amp;rsquo;s possible because of automated testing.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If good code is changeable code and if changeable code is tested code, then we should probably write more automated tests for our Android apps. Automated tests aren&amp;rsquo;t a nice to have. They&amp;rsquo;re integral to writing good apps.&lt;/p&gt;

&lt;p&gt;One quick caveat: A lot of folks seem to think that there&amp;rsquo;s less reason to write tests when you&amp;rsquo;re working with a startup because you&amp;rsquo;re trying to move quickly. I can imagine extreme circumstances where that might make sense, but once you get the hang of writing tests and writing testable software, writing tests don&amp;rsquo;t take that long. Because of this, I think that refraining from writing tests as a startup can often be an exercise in short-term thinking. In fact, I &lt;a href=&#34;http://www.philosophicalhacker.com/post/tdd-and-startups/&#34;&gt;think the argument for automated testing in a startup&lt;/a&gt; is even more compelling than it is for developers working on an established product.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I actually suspect that the business value of writing well-architected, readable code ultimately reduces to the value of being able to change code in response to users needs, but that point isn&amp;rsquo;t essential to the argument I&amp;rsquo;m making.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The context of this quote actually has more to do with a/b testing that regression testing, but regression testing plays a big role in Facebook&amp;rsquo;s ability to move quickly. Facebook has invested heavily in automated testing by, for example, employing Kent Beck, the guy who popularized TDD.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Using Git Submodules Effectively</title>
      <link>https://www.philosophicalhacker.com/post/using-git-submodules-effectively/</link>
      <pubDate>Sun, 23 Oct 2016 17:27:45 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/using-git-submodules-effectively/</guid>
      <description>

&lt;p&gt;I used to think git submodules were categorically evil. This was naive, as most choices in software development are about tradeoffs. A part of the reason I had this simplistic view was because of &lt;a href=&#34;https://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/&#34;&gt;an article&lt;/a&gt; called &amp;ldquo;Why your Company Shouldn&amp;rsquo;t use Git Submodules.&amp;rdquo; I took a second look at this article recently and I read the docs on git submodules. What follows are some more nuanced thoughts on how and when git submodules can be used effectively.&lt;/p&gt;

&lt;h3 id=&#34;what-are-submodules-even-for&#34;&gt;What are Submodules even for?&lt;/h3&gt;

&lt;p&gt;The docs actually provide a very helpful example to answer this question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Suppose you’re developing a web site and creating Atom feeds. Instead of writing your own Atom-generating code, you decide to use a library. You’re likely to have to either include this code from a shared library like a CPAN install or Ruby gem, or copy the source code into your own project tree. The issue with including the library is that it’s difficult to customize the library in any way and often more difficult to deploy it, because you need to make sure every client has that library available. The issue with vendoring the code into your own project is that any custom changes you make are difficult to merge when upstream changes become available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Interestingly, this is very different from what we might call the &amp;ldquo;naive perceived purpose&amp;rdquo; of git submodules, which is well captured by the opening paragraph of the aforementioned article arguing against git submodules:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is not uncommon at all when working on any kind of larger-scale project with Git to find yourself wanting to share code between multiple different repositories – whether it be some core system among multiple different products built on top of that system, or perhaps a shared utility library between projects.&lt;/p&gt;

&lt;p&gt;At first glance, Git submodules seem to be the perfect answer for this&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I used to think submodules were designed for the purpose of sharing code. As the above example from the docs suggest, that&amp;rsquo;s not entirely true. Its more accurate to say that git submodules are useful when you want to share code &lt;em&gt;that you also need change along with the consumer of that code.&lt;/em&gt; If you&amp;rsquo;re not trying to change the shared code along with the consumer of that code, there are better options for sharing your code. The docs even seem to admit this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s quite likely that if you’re using submodules, you’re doing so because you really want to work on the code in the submodule at the same time as you’re working on the code in the main project (or across several submodules). Otherwise you would probably instead be using a simpler dependency management system (such as Maven or Rubygems).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, if you&amp;rsquo;re using git submodules merely as a way of sharing code, that&amp;rsquo;s probably misguided, as it&amp;rsquo;s a use case that git submodules weren&amp;rsquo;t designed to handle. There&amp;rsquo;s additional complexity that comes along with using git submodules, and this complexity isn&amp;rsquo;t worth it if there are simpler ways of sharing code. This additional complexity &lt;em&gt;may&lt;/em&gt; be worth it if you&amp;rsquo;re trying to work on shared code and project code simultaneously and if there are methods of managing this complexity in a way that a) keeps us moving quickly and b) helps us avoids costly mistakes. The next section is about some of the complexities of git submodules and the techniques the git folks recommend for managing these complexities.&lt;/p&gt;

&lt;h3 id=&#34;managing-git-submodule-complexity&#34;&gt;Managing git submodule complexity&lt;/h3&gt;

&lt;h4 id=&#34;working-around-init-and-update&#34;&gt;Working around init and update&lt;/h4&gt;

&lt;p&gt;The first thing that&amp;rsquo;s annoying about git submodules, in my opinion, is that when you check out a project, you can&amp;rsquo;t get it to build without initializing and updating your submodules. This isn&amp;rsquo;t a problem if you know that you&amp;rsquo;ve got submodules, but its a little annoying and surprising to see a build error when you don&amp;rsquo;t realize that the project has submodules.&lt;/p&gt;

&lt;p&gt;A remedy here is to use the &lt;code&gt;--recursive&lt;/code&gt; flag on the &lt;code&gt;git clone&lt;/code&gt; command. This is probably something that I should just always do from now on. I&amp;rsquo;ll make a bash function to support this. I&amp;rsquo;ve already &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt; aliased to &lt;code&gt;gs&lt;/code&gt; and &lt;code&gt;gp&lt;/code&gt; respectively, so &lt;code&gt;gc&lt;/code&gt; is a good name for this function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;function&lt;/span&gt; gc &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
   git clone --recursive &lt;span style=&#34;color: #19177C&#34;&gt;$1&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;pushing-changes&#34;&gt;Pushing changes&lt;/h4&gt;

&lt;p&gt;Pushing changes with submodules can be a bit of a pain if you manually go into a subdirectory and push from there. Fortunately, there are commands for this and we can even create git aliases to make using these commands easy. Here&amp;rsquo;s the command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git push --recurse-submodules&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;on-demand
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As the option suggests, this command recursively pushes the submodules along with the changes in the parent project. I could create an alias for this command with the following command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git config alias.spush &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;push --recurse-submodules=on-demand&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But like I said, I&amp;rsquo;ve already got &lt;code&gt;gp&lt;/code&gt; aliased as &lt;code&gt;git push&lt;/code&gt;, so I can just update that alias:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;gp&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;git push --recurse-submodules=on-demand&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id=&#34;getting-updates&#34;&gt;Getting updates&lt;/h4&gt;

&lt;p&gt;The last thing that&amp;rsquo;s a little annoying about git submodules is updating them when there are changes upstream. Turns out that there&amp;rsquo;s a command that eases this process too:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git submodule update --remote --merge
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Gonna alias that one too:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;gu&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;git submodule update --remote --merge&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;--merge&lt;/code&gt; flag, of course, is actually supposed to &lt;em&gt;safely&lt;/em&gt; merge in the upstream changes. This is a bit misleading because, as article against git modules points out, if you aren&amp;rsquo;t careful, you can blow away your changes in a git submodule by running this command. To avoid this, you actually need to make sure the git submodule has a branch checked out.&lt;/p&gt;

&lt;p&gt;One way of doing this easily is to use the git submodule &lt;code&gt;foreach&lt;/code&gt; subcommand:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git submodule foreach &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;git checkout -b featureA&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we create a bash function that we use for checking out new branches, we can, with a single command, checkout a new branch in the parent repo in in the submodules:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;function&lt;/span&gt; gcb &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  git checkout -b &lt;span style=&#34;color: #19177C&#34;&gt;$1&lt;/span&gt;
  git submodule foreach &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;git checkout -b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$1&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we&amp;rsquo;re using gitflow, we won&amp;rsquo;t be making any changes outside of a feature branch anyway, so if we&amp;rsquo;re using a function like the above one, we shouldn&amp;rsquo;t ever run into a situation where we&amp;rsquo;ve blown away changes we&amp;rsquo;ve made in our submodule.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Sometimes all of this feels a bit wonky to me. I think it feels this way because git modules are still fundamentally weird. In an ideal world, we&amp;rsquo;d develop our shared code in separate repositories and we&amp;rsquo;d test that shared code with automated tests instead of testing it by running the project that consumes that shared library.&lt;/p&gt;

&lt;p&gt;However, sometimes we need to take out a tech loan. Sometimes we need to live with a wonky submodule setup for a bit. Fortunately, git provides us the tools needed to handle the additional complexity that comes along with using git submodules, and if we want to be able to work on a project and its shared code simultaneously, git submodules are appropriate. If we&amp;rsquo;re just trying to share code, we should use simpler dependency management solutions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 Ways of &#39;Getting to Green&#39;</title>
      <link>https://www.philosophicalhacker.com/post/3-ways-of-getting-to-green/</link>
      <pubDate>Sun, 16 Oct 2016 22:38:44 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/3-ways-of-getting-to-green/</guid>
      <description>&lt;p&gt;A part of the TDD work flow is getting a failing test to pass as quickly as possible. This makes sense if we think about how &lt;a href=&#34;http://www.philosophicalhacker.com/post/the-goal-of-refactoring-during-tdd/&#34;&gt;TDD is supposed to help us take smaller steps when we&amp;rsquo;re writing programs&lt;/a&gt;. Beck goes over three ways of getting a test to pass quickly in the fist part of &lt;em&gt;TDD By Example&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The first method is to fake it. Just hard code whatever values you need to to get the tests to pass.&lt;/p&gt;

&lt;p&gt;The second method is try for the simplest possible implementation.&lt;/p&gt;

&lt;p&gt;The third method is something Beck calls &amp;ldquo;triangulation&amp;rdquo;, and its only used if you&amp;rsquo;re not sure how to proceed. When you triangulate on an implementation, you start by writing a second test. This second test will force you to generalize the hard-coded implementation you wrote to get your test to pass. Writing this second test, moreover, is supposed to help you think through how to generalize your implementation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;Triangulation provides a chance to think about the problem from a slightly different direction. What axes of variability are you trying to support in your design? Make some of them vary, and the answer [i.e., the general implementation] may become clearer.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The goal of refactoring During TDD</title>
      <link>https://www.philosophicalhacker.com/post/the-goal-of-refactoring-during-tdd/</link>
      <pubDate>Sun, 16 Oct 2016 16:35:28 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/the-goal-of-refactoring-during-tdd/</guid>
      <description>&lt;p&gt;Red, green, refactor. That&amp;rsquo;s the TDD flow. That much was obvious to me.&lt;/p&gt;

&lt;p&gt;However, refactoring is a pretty broad term. There are many reasons you may want to refactor code and as a result of this, I didn&amp;rsquo;t really understand what exactly was supposed to happen during the refactor step of the TDD loop until I finished the first part of Kent Beck&amp;rsquo;s &lt;em&gt;TDD by Example.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Actually, in the first description of TDD, Beck uses a more helpful description of the &amp;ldquo;refactor step.&amp;rdquo; After getting our tests to pass, he says that we should &amp;ldquo;&lt;em&gt;refactor to remove duplication.&lt;/em&gt;&amp;rdquo; This is helpful, as it restricts the reasons we might refactor a piece of code while working. I&amp;rsquo;ve sometimes found myself deep down a rabbit-hole of refactoring. This restriction gives me a principled way of determining what I should refactoring.&lt;/p&gt;

&lt;p&gt;(As a bit of an aside, it was interesting to see how Beck recommends that we write down the tasks that need to be accomplished in a kind of todo-list. I wonder if I could leverage the TODO feature in most ideas to create this kind of todo-list)&lt;/p&gt;

&lt;p&gt;The reason duplication is targeted for elimination is because duplication is indicative of dependency between the code and the test, which means that you can&amp;rsquo;t change one without the other. This thwarts the TDD flow, which demands that after we get a test passing we, we want to write another test that &amp;ldquo;&amp;lsquo;makes sense&amp;rsquo; to us without having to change the code.&amp;rdquo; Beck makes this point even more explicit by saying this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By eliminating duplication before we go on to the next test, we maximize our chance of being able to get the next test running with one and only one change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One thing that&amp;rsquo;s been really interesting about reading Beck&amp;rsquo;s take on TDD is that he really emphasizes how TDD enables us to make progress through &lt;em&gt;very&lt;/em&gt; small changes. More on that in a second.&lt;/p&gt;

&lt;p&gt;Another interesting thing about Beck&amp;rsquo;s take on duplication is how he recommends we spot it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Duplication most often takes the form of duplicate logic—the same expression appearing in multiple places in the code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I first read this, I thought spotting duplication would merely involve looking for identical if-then statements, but Beck sees duplication in similar &lt;em&gt;expressions&lt;/em&gt;, even if those expressions aren&amp;rsquo;t expressed in code in identical ways:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Usually you see duplication between two pieces of code, but here the duplication is between the data in the test and the data in the code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We see this in his refactoring of the first test he writes. Here&amp;rsquo;s the test code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;testMultiplication&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
   Dollar five&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Dollar&lt;span style=&#34;color: #666666&#34;&gt;(5);&lt;/span&gt;
   five&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;times&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(2);&lt;/span&gt;
   assertEquals&lt;span style=&#34;color: #666666&#34;&gt;(10,&lt;/span&gt; five&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;amount&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the model code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; amount &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;10;&lt;/span&gt;  
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;He reveals the duplication by pointing out that we set &lt;code&gt;amount&lt;/code&gt; equal to &lt;code&gt;10&lt;/code&gt; because we&amp;rsquo;ve multiplied &lt;code&gt;5&lt;/code&gt; by &lt;code&gt;2&lt;/code&gt; in our heads to get the test to pass quickly. If we write our assigmnet of &lt;code&gt;amount&lt;/code&gt; as &lt;code&gt;int amount = 5 * 2&lt;/code&gt;, we see that &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; appear in both the model code and in the test code. That&amp;rsquo;s duplication that&amp;rsquo;s got to go.&lt;/p&gt;

&lt;p&gt;The step that Beck takes towards eliminating the duplication is small and it doesn&amp;rsquo;t even really eliminate the duplication:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Dollar&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;times&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    amount &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;He then says something interesting about TDD and the size of the step he took:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do these steps seem too small to you? Remember, TDD is not about taking teeny-tiny steps, it&amp;rsquo;s about being able to take teeny-tiny steps. Would I code day-to-day with steps this small? No. But when things get the least bit weird, I&amp;rsquo;m glad I can&amp;hellip;If you can make steps too small, you can certainly make steps the right size. If you only take larger steps, you&amp;rsquo;ll never know if smaller steps are appropriate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is interesting, and it points to an issue related to getting stuck down a rabbit-hole of refactoring. I think a part of the reason this rabbit-hole happens, especially during Android development, is because we don&amp;rsquo;t have the tests in place to make very small steps. (Although, I wouldn&amp;rsquo;t be surprised if it happened more often in my case due to lack of discipline.) An inability to make small changes is a huge bummer because if something breaks, your search space for tracking down the bug is going to be large in proportion to the number of changes you&amp;rsquo;ve made.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TDD and Startups</title>
      <link>https://www.philosophicalhacker.com/post/tdd-and-startups/</link>
      <pubDate>Sun, 16 Oct 2016 13:32:57 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/tdd-and-startups/</guid>
      <description>

&lt;p&gt;Kent Beck introduces &lt;em&gt;TDD by Example&lt;/em&gt; with a little story meant to show the business value of automated testing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Early one Friday, the boss came to Ward Cunningham to introduce him to Peter, a prospective customer for WyCash, the bond portfolio management system the company was selling. Peter said&amp;hellip;&amp;ldquo;I&amp;rsquo;m starting a new bond fund, and my strategy requires that I handle bonds in different currencies.” The boss turned to Ward, “Well, can we do it?&amp;rdquo;&amp;hellip;The trick now was to make space for the new functionality without breaking anything that already worked. What would happen if Ward just ran the tests? After the addition of a few unimplemented operations to Currency, the bulk of the tests passed. By the end of the day, all of the tests were passing. Ward checked the code into the build and went to the boss. “We can do it,” he said confidently. Let&amp;rsquo;s think a bit about this story. In two days, the potential market was multiplied several fold, multiplying the value of WyCash several fold. The ability to create so much business value so quickly was no accident, however.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This little parable actually reminded me of the way that Steve Freeman and Nat Pryce talk about the business value of automated testing in &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We’ve found that we need two technical foundations if we want to grow a system reliably and to cope with the unanticipated changes that always happen. First, we need constant testing to catch regression errors, so we can add new features without breaking existing ones. For systems of any interesting size, frequent manual testing is just impractical&amp;hellip;Second, we need to keep the code as simple as possible, so it’s easier to understand and modify&amp;hellip;The test suites in the feedback loops protect us against our own mistakes as we improve (and therefore change) the code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think these two snippets are making similar points: automated tests can create immense business value because it allows deep changes to be made to an existing system while preserving confidence that the system will continue working as expected. I think this ability is especially important for startups who are trying to find product-market fit or beat out a competitor.&lt;/p&gt;

&lt;p&gt;I sometimes suspect that Facebook&amp;rsquo;s success over Friendster and MySpace is partially due to the fact that they had the automated tests in place to experiment a ton with the features of Facebook and that these experiments let them iterate faster (Zuckerberg actually talks about this in &lt;a href=&#34;https://www.youtube.com/watch?v=Lb4IcGF5iTQ&#34;&gt;his &amp;ldquo;How to Build the Future&amp;rdquo; episode&lt;/a&gt;). Iterating faster, according to Eric Reis in &lt;em&gt;The Lean Startup&lt;/em&gt;, isn&amp;rsquo;t just the key to maximizing chances of building something people want. It&amp;rsquo;s also a great way to gain a competitive edge:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reason to build a new team to pursue an idea is that you believe you can accelerate through the Build-Measure-Learn feedback loop faster than anyone else can. If that’s true, it makes no difference what the competition knows. If it’s not true, a startup has much bigger problems&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I actually think this is one of the most under-rated arguments for TDD. When considering whether to write tests, I suspect a lot of developers think, &amp;ldquo;Well, I can get it working without tests, so why bother writing them?&amp;rdquo; Unfortunately, this overlooks the key issue, which, if Beck, Freeman and Pryce, and Reis are right, is this: &amp;ldquo;How can I structure my system so that I can make the biggest possible changes while maintaining confidence that the functionality is correct?&amp;rdquo;&lt;sup&gt;1&lt;/sup&gt; If TDD folks are right, moreover, the answer to this key question is of course to do TDD.&lt;/p&gt;

&lt;p&gt;If this is right, then it means that a comment that Beck makes later on in the first part of TDD by Example may need refinement. He says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For TDD to make economic sense, you&amp;rsquo;ll need to be able to either write twice as many lines per day as before, or write half as many lines for the same functionality. You&amp;rsquo;ll have to measure and see what effect TDD has on your own practice. Be sure to factor debugging, integrating, and explaining time into your metrics, though.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This remark may in fact be consistent with the idea that there&amp;rsquo;s immense value in the flexible architectures that emerge as a result of TDD. Its hard to tell exactly what Beck is saying here. Beck&amp;rsquo;s intent aside, I think this passage should have made it clearer that there&amp;rsquo;s a lot of value in being able to change code confidently, and this may make TDD worth it even if we wind up writing more code when we factor in the code we need to write tests.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Of course, if you&amp;rsquo;re not building a product whose features are likely to change, then this argument for testing doesn&amp;rsquo;t apply.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Capital Intensive MVPs</title>
      <link>https://www.philosophicalhacker.com/post/capital-intensive-mvps/</link>
      <pubDate>Fri, 12 Aug 2016 08:21:54 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/capital-intensive-mvps/</guid>
      <description>

&lt;p&gt;According to Eric Reis, MVPs allow us to test our business&amp;rsquo; most important &amp;ldquo;hypotheses.&amp;rdquo; This is supposed to help us &amp;ldquo;fail faster,&amp;rdquo; but I&amp;rsquo;m finding that there are real differences in how much effort we have to put into our MVPs before we can validate our business hypotheses. In other words, some MVPs are more capital intensive than others. This is a big deal because you often can&amp;rsquo;t get favorable investment terms until you&amp;rsquo;ve shown that you&amp;rsquo;ve got product-market fit. You can&amp;rsquo;t do that without an MVP, and if you&amp;rsquo;re MVP is too difficult to build without capital, then you&amp;rsquo;re business will need exactly what it can&amp;rsquo;t have (under favorable terms): capital to create an MVP and validate its fundamental hypotheses.&lt;/p&gt;

&lt;h3 id=&#34;expensive-solutions&#34;&gt;Expensive Solutions&lt;/h3&gt;

&lt;p&gt;Talking to customers before building anything is probably a great idea. Customer interviews probably yield tons of insight on how to build something people want. That said, I suspect that customer interviews aren&amp;rsquo;t enough. These interviews can give us great insight vis-a-vis the particular problems are customers are facing. They can also give us a clue as to what the solution to these problems should look like, but until we&amp;rsquo;ve got a prototyped solution &lt;em&gt;to sell them&lt;/em&gt;, we won&amp;rsquo;t know if we&amp;rsquo;ve actually created a solution that&amp;rsquo;s good enough for them to pay for.&lt;/p&gt;

&lt;p&gt;Some MVPs are easier to build than others, and some MVPs are so difficult to build that its not feasible to build them without capital, capital that you can&amp;rsquo;t get (under favorable terms) because you haven&amp;rsquo;t shown that you&amp;rsquo;ve got product-market fit.&lt;/p&gt;

&lt;h3 id=&#34;high-customer-acquisition-costs&#34;&gt;High Customer Acquisition Costs&lt;/h3&gt;

&lt;p&gt;Even if you&amp;rsquo;ve built an MVP, you still have to be able to verify that people are willing to pay for your solution &lt;em&gt;at a price that&amp;rsquo;s high enough for you to offset the cost of acquiring those customers in the first place&lt;/em&gt;. The difficulty of verifying this varies from MVP to MVP, and customer acquisition costs can be prohibitive, even if we&amp;rsquo;re just trying to validate our business assumptions with an MVP.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s much easier for me to get my SnapChatGramBook app in front of 100 dousche-bag teenagers than it is to get my military simulator in front of 20 procurement folks at various defense companies. More generally, if you&amp;rsquo;ve got to charge a lot for your product, it&amp;rsquo;s going to take more money to get people to pay for it, and again, the costs may be prohibitive.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In some ways, it feels like the lean startup movement has been a barrier to me realizing this. We&amp;rsquo;re taught that the &amp;ldquo;holy grail&amp;rdquo; of a startup&amp;rsquo;s journey is product-market fit and so we focus much of our thinking on finding that fit. I&amp;rsquo;m finding, however, that there really is important prior question to the question &amp;ldquo;Am I building something people want?&amp;rdquo; That question is &amp;ldquo;Do I have enough capital to find out whether I can build a viable business building something people want?&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>