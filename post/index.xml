<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Philosophical Hacker</title>
    <link>https://www.philosophicalhacker.com/post/index.xml</link>
    <description>Recent content in Posts on Philosophical Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Mar 2018 09:29:59 -0500</lastBuildDate>
    <atom:link href="https://www.philosophicalhacker.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>From Panic Attacks to Yoga Mats: Startups, Leadership, and my first 1000 minutes Meditating</title>
      <link>https://www.philosophicalhacker.com/post/my-first-1000-minutes-meditating/</link>
      <pubDate>Fri, 09 Mar 2018 09:29:59 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/my-first-1000-minutes-meditating/</guid>
      <description>

&lt;p&gt;About a year and a half ago, I was sitting in my Manhattan studio apartment trying to write an html lexer in python. I was about half way through my batch at &lt;a href=&#34;https://www.recurse.com/&#34;&gt;the Recurse Center&lt;/a&gt;, and I was frustrated with my lack of progress towards my learning goals and intimidated by all of the absurdly smart people around me.&lt;/p&gt;

&lt;p&gt;While writing the lexer, I got hung up on an odd piece of python syntax.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; I spent &amp;ldquo;too long&amp;rdquo; trying to figure out what was going on with the sample code, and as a result, I felt even more frustrated by my lack of progress. I muttered a few curse words under my breath and then got ready to take another crack at my lexer code.&lt;/p&gt;

&lt;p&gt;Then, just as I was thinking about about how to write my code, something happened that&amp;rsquo;s never happened to me before: &lt;em&gt;My heart started racing;&lt;/em&gt; it felt like I was sprinting even though I just sitting in a chair. I felt short of breath and started sweating a bit. Then, after about a minute or so, the symptoms subsided.&lt;/p&gt;

&lt;p&gt;‚òù That was my first ever panic attack, and it freaked me out because I thought there might be something wrong with my heart. Prior to that panic attack, I&amp;rsquo;d been having chest pains for months, and I have some family history of heart issues. Fast forward a bunch of doctor&amp;rsquo;s visits, a hospital visit, and a few more panic attacks, and we found that my worry about my heart was &lt;em&gt;merely&lt;/em&gt; another symptom of the anxiety itself. üòå&lt;/p&gt;

&lt;p&gt;Of course, I was relieved to find out that I wasn&amp;rsquo;t dying or anything, but more interestingly, I was relieved to find out that I didn&amp;rsquo;t really need to make any &lt;em&gt;deep&lt;/em&gt; changes in my behavior or thinking. I thought to myself,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;I can keep burning the midnight oil and the worst thing that&amp;rsquo;ll happen to me is a panic attack? Awesome. No problem. I don&amp;rsquo;t need to listen to people who are telling me I need to learn how to &amp;lsquo;take it easy.&amp;rsquo; I&amp;rsquo;ll just work myself up to the point where it feels like I&amp;rsquo;m going to freak out. Then I&amp;rsquo;ll take a break.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/1000-minutes-meditating.png&#34; alt=&#34;1000 minutes meditating&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Today, I completed my 1000th minute of meditation, and I know now that &amp;mdash; and this probably seems obvious to you &amp;mdash; my &amp;ldquo;work until you&amp;rsquo;re about to have a panic attack strategy&amp;rdquo; has some limitations. I&amp;rsquo;ve moved from panic attacks to yoga mats, and I want to share a bit about the journey.&lt;/p&gt;

&lt;h3 id=&#34;from-panic-attacks&#34;&gt;From Panic attacks&amp;hellip;&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Work until you&amp;rsquo;re about to have a panic attack&amp;rdquo; might obviously seem like a bad idea, but plenty of folks in silicon valley have said or presumed something like this at one point or another. Scott Galloway, an NYU Business professor and founder of L2, for example, advises:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On a regular basis, at work, demonstrate both your physical and mental strength &amp;ndash; your grit. Work an eighty-hour week, be the calm one in face of stress, attack a big problem with sheer brute force and energy&amp;hellip;At Morgan Stanley, the analysis pulled all-nighters weekly, and it didn&amp;rsquo;t kill us, but made us strong. This approach to work, however, as you get older, can in fact kill you. So do it early.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Paul Graham basically defines a startup in such a way that working to your limit is essential for working at a startup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Economically, you can think of a startup as a way to compress your whole working life into a few years. Instead of working at a low intensity for forty years, you work as hard as you possibly can for four.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He goes on to say that a programmer working at a startup can create 3 million dollars of value per year (as opposed to the standard 80k you create working at a traditional company). To those who balk at the 3 million number, he says,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If $3 million a year seems high, remember that we&amp;rsquo;re talking about the limit case: the case where you not only have zero leisure time but indeed work so hard that you endanger your health.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the idea that startups are so hard that you have to work yourself to the limits of your health is pretty much accepted by lots of smart, experienced entrepreneurs, and partially because of this, I&amp;rsquo;ve basically accepted that working an a startup is extraordinarily grindy.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I also think that the need for grinding hard is especially high for folks who want to be leaders at startups. Anecdotally, I&amp;rsquo;ve noticed that people don&amp;rsquo;t tend to work harder than their bosses (why should they?), and this intuitive idea is supported by a study or two that I&amp;rsquo;ve stumbled upon.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; If succeeding at a startup requires extraordinary effort from everyone in the organization and if people don&amp;rsquo;t work harder than their leaders, then leaders have to live the grind; they have to set the pace. üèÅ üèéÔ∏è&lt;/p&gt;

&lt;h3 id=&#34;to-yoga-mats&#34;&gt;&amp;hellip;to Yoga Mats üßò‚Äç‚ôÇÔ∏è&lt;/h3&gt;

&lt;p&gt;The move towards &amp;ldquo;yoga mats&amp;rdquo; started for me when I noticed that although I wasn&amp;rsquo;t working myself into having panic attacks, my anxiety and stress was leading to some extra intensity in my interactions at work. Eventually, I became convinced that this intensity made me less effective at leading.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; Here&amp;rsquo;s a couple of ways this has played out in the past:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I tried to convince some folks that we should not do X. We each stated our positions, and talked about it for a bit. As the conversation continued, I became more and more agitated that I wasn&amp;rsquo;t successfully convincing folks that we should not do X. The agitation was detected and people stopped taking me and my position seriously. Its like they said to themselves, &amp;ldquo;Matt is triggered. He&amp;rsquo;s not thinking clearly right now. His arguments can be safely ignored. Let&amp;rsquo;s do X,&amp;rdquo; and that&amp;rsquo;s a perfectly reasonable thought for folks to have.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I tried to convince some other folks that we should do Y. I said a bit about why I thought Y was a good idea and hoped the reasoning would stick. The problem, however, was that some folks thought the reasoning I gave was a smoke screen for something more &amp;ldquo;sinister&amp;rdquo; (read: company-oriented at the expense of employees). The impugning of my motives was no doubt partially a result of my anxious and intense stance towards work in general. People rightly worried that I don&amp;rsquo;t always have their best interests at heart. They&amp;rsquo;re right. Often this is because I&amp;rsquo;m too busy freaking out.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I did some research on this and it turns out that stress and anxiety messes with your ability to &lt;em&gt;think clearly&lt;/em&gt; and to &lt;em&gt;regulate your emotions&lt;/em&gt; much more than I had expected.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8&#34;&gt;8&lt;/a&gt;&lt;/sup&gt; So, by working through the anxiety instead of addressing it, I was trading off some short-term productivity gains for some big losses on how I communicated with people.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;After realizing I was making a bad trade off by not relaxing occasionally, I started trying to be calm by taking Sunday&amp;rsquo;s off completely. I followed everyone&amp;rsquo;s standard advice for relaxing: just do something you like doing that isn&amp;rsquo;t work. So, for a while, I mostly played &lt;em&gt;League of Legends&lt;/em&gt; to &amp;ldquo;relax.&amp;rdquo; üéÆ&lt;/p&gt;

&lt;p&gt;A few weeks into this, I was playing one Sunday, hands tightly gripped around the mouse and cursing under my breath, and I thought, &amp;ldquo;Is this &lt;em&gt;actually&lt;/em&gt; relaxing? It feels good and it&amp;rsquo;s fun, but is it actually going to help me be calm when it counts?&amp;rdquo; This question turned into a quest for how I could &amp;mdash; and I get that this is weird quest &amp;mdash; &lt;em&gt;relax more efficiently&lt;/em&gt;. This is the quest that led me to start considering meditation seriously.&lt;/p&gt;

&lt;p&gt;Although I was very skeptical of the effectiveness of meditation, it struck me as a potentially more efficient way of relaxing. Instead of losing my entire Sunday to gaming and other &amp;ldquo;relaxing&amp;rdquo; things, I could just set aside 10 minutes per day to meditate. Supposedly, 10 minutes a day is enough to have significant impacts on stress and anxiety levels.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:10&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:10&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;So, with a healthy dose of skepticism, I decided to give meditation a try for a bit by using &lt;a href=&#34;https://www.headspace.com&#34;&gt;the Headspace app&lt;/a&gt;, and so far, I think the results have been pretty positive:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I haven&amp;rsquo;t had any anxiety-related chest pain or GERD since I started.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve been more aware of some unhelpful patterns of thought I tend to fall into, patterns which tend to waste time and produce more anxiety.&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s been a few moments where I felt that I would have ordinarily interacted with others with more intensity and instead found myself simply anticipating and watching my intense emotions dissipate instead of actin&amp;rsquo; a fool.&lt;/li&gt;
&lt;li&gt;My daily meditation habit has also helped &amp;ldquo;bootstrap&amp;rdquo; other helpful habits.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:11&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:11&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In addition to these &amp;ldquo;in the field benefits,&amp;rdquo; the experience of meditating is surprisingly and uniquely refreshing. Two things stand out from the experience:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Occasionally, after a 10 minute session, my body feels extremely relaxed. I can tell that some of the tension I ordinarily carry around in my body has been released. My arms feel completely dead, resting on my lap. My mind also feels remarkably clear and I feel like I can focus on what needs to be done for the day.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Occasionally, during the &amp;ldquo;focus on your breath&amp;rdquo; part of the exercises, I sometimes slip into a state where it actually feels like my mind is resting. Ordinarily, my mind is constantly running, thinking about myself and the past and the future. In these moments, however, I feel &amp;ldquo;present&amp;rdquo; and I&amp;rsquo;m not thinking about anything else except my breath. It feels great.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;ve read a bit about the changes that happen to the brain during meditation, and apparently, there&amp;rsquo;s a set of regions in the brain called &amp;ldquo;the default mode network.&amp;rdquo; üß† Judson Brewer, a psychiatrist whose been scientifically studying and practicing meditation for decades, calls this region the &amp;ldquo;narrative network&amp;rdquo; of the brain because its the part that is always telling a story about our past, our future, our successes, and our failures.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:12&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:12&#34;&gt;12&lt;/a&gt;&lt;/sup&gt; This region, according to his research, is less active during meditation and his research lines up exactly with my experience of meditation, which is reassuring because like I said, I approached meditation with a lot of skepticism.&lt;/p&gt;

&lt;h3 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h3&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;It was probably a list comprehension, but I can&amp;rsquo;t remember for sure.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;em&gt;The Four: The Hidden DNA of Amazon, Apple, Facebook, and Google&lt;/em&gt;, pg. 252.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&amp;ldquo;How to Make Wealth.&amp;rdquo; Interestingly, I happened to notice Paul Graham&amp;rsquo;s &amp;ldquo;Mean People Fail&amp;rdquo; essay while digging up this quote, and it is precisely this claim that drove me to ease up on the &amp;ldquo;work until you endanger your health&amp;rdquo; attitude.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;Ibid. I get that working so hard you &amp;ldquo;endanger your health&amp;rdquo; is the limit case for Graham, but its the limit that we must strive for, according to Graham.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;I think that DHH opposes the idea that startups require this kind of hard work, so he might be an exception here. He points to 37 signals as a counter-example, but I think this is problematic for several reasons. First, 37 Signals is not a startup since &lt;a href=&#34;http://www.paulgraham.com/growth.html&#34;&gt;startups are characterized&lt;/a&gt; by their rapid growth and 37 Signals is intentionally not growing quickly. Second, even if 37 Signals is a startup, their success could be an anomaly. This is not to say that they didn&amp;rsquo;t work hard, but it might be that they lucked out insofar as they were able to succeed in spite of their lack of willingness to grind as hard as other startups. To point to them as a model to follow is as wise as advising Bob to by a lottery ticket because Billy just won.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;One study was buried in an HBR article that I can&amp;rsquo;t find right now. Basically, the study pointed out that workers&amp;rsquo; email communication outside of standard work hours mirrors the email patterns of their supervisor.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;This realization took an embarrassingly long time. I used to excuse my &amp;ldquo;intense&amp;rdquo; attitude and not-always-mild assholery by pointing to entrepreneurs who have managed to be successful with these attitudes, entrepreneurs like Jobs, Bezos, and Musk. Two problems here: 1) I&amp;rsquo;m not nearly as brilliant as these people. I think people are more forgiving of assholery if you&amp;rsquo;re a genius. 2) Even if these guys managed to be successful, that doesn&amp;rsquo;t mean that they&amp;rsquo;re successful &lt;em&gt;because&lt;/em&gt; of their attitudes.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=O5HZeM6_uXI&#34;&gt;&amp;ldquo;The Stressed Brain&amp;rdquo;&lt;/a&gt; by Rajita Sinha was really solid here.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:9&#34;&gt;I actually think this matters a lot less for people who aren&amp;rsquo;t aspiring leaders. Interestingly, a lot of the examples that I&amp;rsquo;ve seen about how grindy things can be at startups seems to focus around individual contributors. We definitely see this in Paul Graham&amp;rsquo;s example. Its about a programmer who&amp;rsquo;s just trying to grind out some code. Doesn&amp;rsquo;t really matter if he gets pissed at his computer in the process. &lt;a href=&#34;https://hbr.org/2018/02/senior-executives-get-more-sleep-than-everyone-else&#34;&gt;The hbr article I stumbled across a few weeks ago about how executives tend to get more sleep than individual contributors&lt;/a&gt; also points in this direction.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:10&#34;&gt;I believe this is mentioned in &amp;ldquo;The Stressed Brain&amp;rdquo; video, but its also mentioned in &lt;a href=&#34;https://www.ted.com/talks/andy_puddicombe_all_it_takes_is_10_mindful_minutes&#34;&gt;this TED talk&lt;/a&gt; and in &lt;a href=&#34;https://hbr.org/2017/01/spending-10-minutes-a-day-on-mindfulness-subtly-changes-the-way-you-react-to-everything&#34;&gt;this HBR article&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:10&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:11&#34;&gt;I&amp;rsquo;m not sure if its the meditation habit itself that&amp;rsquo;s doing the work here. Stress and anxiety compromise the executive functioning of the brain, so it might be that the stress reduction that results from meditation has improved my executive functioning, which in turn has made space for me to adopt other helpful habits.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:11&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:12&#34;&gt;Judson Brewer, &lt;em&gt;The Craving Mind&lt;/em&gt;, xvi.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:12&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ya Better Recognize</title>
      <link>https://www.philosophicalhacker.com/post/ya-better-recognize/</link>
      <pubDate>Fri, 24 Nov 2017 09:18:03 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/ya-better-recognize/</guid>
      <description>

&lt;p&gt;Recently, I&amp;rsquo;ve picked up &lt;em&gt;Psychologically Healthy Organizations&lt;/em&gt; from the APA to learn more about, among other things, the importance of recognition in the workplace. Here I want to share some highlights from the APA&amp;rsquo;s work on employee recognition in the workplace.&lt;/p&gt;

&lt;h3 id=&#34;recognition-meaningfully-shapes-performance&#34;&gt;Recognition Meaningfully Shapes Performance&lt;/h3&gt;

&lt;p&gt;The authors of &lt;em&gt;Peopleware&lt;/em&gt; make some strong claims about team composition and the extent to which people can change in the workplace:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For most efforts, success or failure is in the cards from the moment the team is formed and the initial directions set out&amp;hellip;managers are unlikely to change their people in &lt;em&gt;any meaningful way.&lt;/em&gt;&amp;hellip;So the people who work for you through whatever period will be more or less the same at the end as they were at the beginning. If they‚Äôre not right for the job from the start, they never will be.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looking back on it, this is one of the more annoying passages of the book, as it makes an extremely strong claim with merely anecdotal evidence. The APA provides a nice, evidence-backed counter-point here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We know from extensive research that human behavior is shaped by its consequences and that providing positive consequences for employee performance is one of the most powerful ways to enhance performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is useful for me to keep in mind, as I&amp;rsquo;ve made the mistake in the past of believing that some folks are just &amp;ldquo;bad apples&amp;rdquo; when its more likely that there&amp;rsquo;s something problematic about the way in which they are being led or incentivized.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;recognition-done-right&#34;&gt;Recognition done right&lt;/h3&gt;

&lt;p&gt;Recognition done right has to be &lt;em&gt;timely&lt;/em&gt; and the form the recognition takes must be meaningful to the receiver.&lt;/p&gt;

&lt;p&gt;Their claim that timeliness matters seems to rest on more general claims about human conditioning. Interestingly, one of the implications of timeliness is that: &amp;ldquo;saving up individual recognition for an annual performance appraisal or rewards banquet can be counterproductive.&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;One interesting idea they suggested that would likely increase timeliness of recognition is to rotate responsibility for who gives recognition at regular meetings. There&amp;rsquo;s a bit of a trade-off here, however, since this can hurt &amp;ldquo;contingency&amp;rdquo; &amp;ndash; people may feel like they have to give recognition even if there is nothing worth recognizing.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Timeliness and frequency of recognition may be sub-optimal in an organization because recognition itself may need to be reinforced for managers and employees. The chapter contains a section about convincing managers to recognize more and the authors say,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The trick lies in finding a catalyst&amp;ndash;an event or trigger mechanism that will help low-use managers personally experience recognition in a positive, meaningful way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One possible solution that jumped to my mind here is to recognize folks who do an exemplary job of recognizing others. A strong culture of recognition doesn&amp;rsquo;t come for free, so it makes sense that there may need to be some work to cultivate that culture.&lt;/p&gt;

&lt;p&gt;One size doesn&amp;rsquo;t fit all when it comes to recognition. They had some interesting ideas for ensuring that recognition given is consistently valuable to the recipients within an organization.&lt;/p&gt;

&lt;p&gt;One idea is practiced at a company acquired by Bank of America. They have their managers ask employees on their first day to create a list of things that motivate them. Managers ended up with an &amp;ldquo;individualized motivation checklist for every employee.&amp;rdquo; In general, they seem to recommend involving employees in decisions about the form recognition takes since this increases &amp;ldquo;the employees&amp;rsquo; commitment and buy-in and the likelihood that what is done will be successful.&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Of course, I don&amp;rsquo;t want to go to the other extreme and say something silly like what Simon Sinek says, &amp;ldquo;Its never the people. Its always the environment.&amp;rdquo; Again, very strong claim with merely anecdotal evidence. Probably, sometimes, its the people.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;This doesn&amp;rsquo;t mean they are against annual rewards. Later on, they recommend a recognition plan that includes annual awards.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;If peers are the ones responsible for doing the recognition, this could make timliness even better, since peers may have more time and visibility into reognition worthy behaviors, but this variant of the idea trades on the &amp;ldquo;significance of the provider&amp;rdquo; consideration since the recognizers here are peers, not someone with status in the organization.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hacker vs. Hustler: Reflecting on One Year at UniKey</title>
      <link>https://www.philosophicalhacker.com/post/hacker-vs-hustler-reflecting-on-one-year-at-unikey/</link>
      <pubDate>Fri, 03 Nov 2017 18:33:49 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/hacker-vs-hustler-reflecting-on-one-year-at-unikey/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Me: I really like my new job.&lt;/p&gt;

&lt;p&gt;Family: (incredulously) Really?&lt;/p&gt;

&lt;p&gt;Me: Yeah. The people are smart, passionate, and the company seems promising.&lt;/p&gt;

&lt;p&gt;Family: (sarcastically) Ok. So you&amp;rsquo;ll stick around for 6 months then?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two Wednesdays ago marked my 1 year anniversary at UniKey, and as the above dialog suggests, this is pretty weird for me. I&amp;rsquo;ve never been at a job for a year before, so this 1st ever anniversary in my career has given me the urge to reflect a bit on a couple of questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Why was UniKey the first place I&amp;rsquo;ve stuck around this long?&lt;/li&gt;
&lt;li&gt;What have I learned in the past year by sticking around?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;why-unikey&#34;&gt;Why UniKey?&lt;/h3&gt;

&lt;p&gt;A big part of why I&amp;rsquo;ve stuck around at UniKey has to do with the fantastic people and culture at UniKey. My words can&amp;rsquo;t really do justice for how great the work environment, people, and culture are there, but this video does a great job of capturing it:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/H5qQaxTM6Lw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;hr /&gt;

&lt;p&gt;When I reflect on the fact that I came to UniKey after failing to start my own business, another reason why I&amp;rsquo;ve stuck around this long becomes clear: UniKey has been a good place for me to learn lessons I need to know to have a better second crack at starting a business.&lt;/p&gt;

&lt;p&gt;This reason for why I&amp;rsquo;ve stuck around actually dovetails nicely with the second question my unusual anniversary has prompted me to ask.&lt;/p&gt;

&lt;h3 id=&#34;what-have-i-learned&#34;&gt;What Have I Learned?&lt;/h3&gt;

&lt;p&gt;This year has largely been about the struggle between my &amp;ldquo;inner hacker&amp;rdquo; &amp;ndash; the part of me that wants to write beautiful code with the best tools and my &amp;ldquo;inner hustler&amp;rdquo; &amp;ndash; the part of me that wants to build and be a part of successful businesses. In the last year, I&amp;rsquo;ve started to identify and shed some of my hacker ways that interfere with my hustler aspirations.&lt;/p&gt;

&lt;h4 id=&#34;generalists-specialists-even-at-50-employees&#34;&gt;Generalists &amp;gt; Specialists, even at 50+ employees&lt;/h4&gt;

&lt;p&gt;Its basically a truism that at startups, you wear many hats.&lt;sup&gt;1&lt;/sup&gt; I knew that coming into UniKey, but because my inner hacker didn&amp;rsquo;t want to look up from my monitor, I didn&amp;rsquo;t notice that this can be true even at startups with 50+ people.&lt;/p&gt;

&lt;p&gt;Sometimes the best thing I can do is to take off my android dev hat and be an iOS or web dev for a few hours. Sometimes I should take off my hacker hat entirely and be a graphic designer or a copy writer or a project manager for a few hours. Sometimes I even need to get on a call with a partner to really understand what they want and what they&amp;rsquo;re afraid of.&lt;/p&gt;

&lt;h4 id=&#34;don-t-put-the-cart-before-the-horse&#34;&gt;Don&amp;rsquo;t put the cart before the horse&lt;/h4&gt;

&lt;p&gt;My inner hacker wants to build scalable, flexible code and infrastructure. This is great, but it&amp;rsquo;s unhelpful if the business dies waiting for me to build a masterpiece. &lt;em&gt;Sometimes&lt;/em&gt; the game is to write garbage, shed a tear, and move on because&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;technical-debt-probably-isn-t-going-to-kill-a-company&#34;&gt;Technical debt probably isn&amp;rsquo;t going to kill a company&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ve read a few things this year that suggest this&lt;sup&gt;2&lt;/sup&gt; and I&amp;rsquo;ve seen at UniKey that there are often far bigger dangers for a startup than, for example, untested code.&lt;/p&gt;

&lt;h3 id=&#34;two-years&#34;&gt;Two years?!&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m thankful for the lessons I&amp;rsquo;ve learned and the people I&amp;rsquo;ve worked with this past year, and I hope that in my second year, I can keep growing into the kind of person who understands how to play the startup game well. If that happens, I&amp;rsquo;ll shock my family (and to some extent, myself) by sticking around for a whopping 2 years at a company. ;)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;This is more than just &amp;ldquo;conventional wisdom.&amp;rdquo; Noam Wasserman, a Harvard prof with a massive data set on startups, reiterates this in his &lt;em&gt;Founder&amp;rsquo;s Dilemnas&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I found the idea that technical problems are &amp;ldquo;blown out of proportion&amp;rdquo; in &lt;em&gt;Peopleware&lt;/em&gt;, Microsoft Research&amp;rsquo;s &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/the-influence-of-organizational-structure-on-software-quality-an-empirical-case-study/&#34;&gt;&amp;ldquo;The Influence of Organizational Structure on Software Quality&amp;rdquo;&lt;/a&gt;, and &lt;em&gt;TDD By Example&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>React Native at an IoT Startup</title>
      <link>https://www.philosophicalhacker.com/post/react-native-at-an-iot-startup/</link>
      <pubDate>Sun, 22 Oct 2017 09:09:04 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/react-native-at-an-iot-startup/</guid>
      <description>

&lt;p&gt;If you saw a toilet seat in a movie theater, you&amp;rsquo;d probably think to yourself, &amp;ldquo;Wait a minute. You don&amp;rsquo;t use &lt;em&gt;that&lt;/em&gt; in &lt;em&gt;here&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Many of us have a similar reaction when we think of using react native at an IoT startup:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wait a minute. React Native is fine for light-weight apps, but IoT companies need apps that make heavy use of the phone&amp;rsquo;s hardware, so don&amp;rsquo;t use it in this situation. &lt;strong&gt;Just don&amp;rsquo;t use that here.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My goal in this written version of &lt;a href=&#34;https://www.meetup.com/preview/React-Orlando/events/243834909&#34;&gt;my talk&lt;/a&gt; is to convince you that using react native with hardware-intensive applications is not like using a toilet seat in a movie theater. Along the way, I&amp;rsquo;ll go over why we (at &lt;a href=&#34;https://www.unikey.com/&#34;&gt;UniKey&lt;/a&gt;) adopted react native, how we used in our apps, the results we&amp;rsquo;ve achieved using it so far, and the trade-offs/challenges we&amp;rsquo;ve faced.&lt;/p&gt;

&lt;h3 id=&#34;why&#34;&gt;Why&lt;/h3&gt;

&lt;p&gt;I originally approached React Native a little over a year ago with loads of skepticism. I had heard all the horror stories of companies getting burned by first-generation cross-platform mobile dev tools, so I had a hostile view of cross-platform tools in general. React Native was no exception.&lt;/p&gt;

&lt;p&gt;Eventually, I noticed that an increasing number of impressive companies had adopted react native and this caught my eye:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/react-native-at-iot-startup/who-is-using-react-native.png&#34; alt=&#34;who is using react native&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My favorite app on this list is Skype. Microsoft owns Xamarin and they choose React Native for Skype. I think that speaks volumes.&lt;/p&gt;

&lt;p&gt;With the increasingly impressive rooster of these companies in the back of my mind, I stumbled upon an opportunity to do some pro-bono work for a charity. They needed an iOS and Android app, and I decided that React Native would be a good choice for building their app. It was a simple food pantry app with a form, and React Native did the job very well:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/react-native-at-iot-startup/fed40.png&#34; alt=&#34;food pantry&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Fast forward 1 year, and we&amp;rsquo;re staring down the barrel of a pretty hairy deadline. UniKey partners with lock manufacturers to build smart lock products. We provide white-label apps, SDKs, and hardware reference designs so that partners can launch in months instead of years. What this means is that a core part of our value proposition is &lt;em&gt;speed&lt;/em&gt;, so the conversation around this deadline looked a lot like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Market: Can you build this smart lock app in six weeks?&lt;/p&gt;

&lt;p&gt;UniKey: That&amp;rsquo;s pretty aggressive, but we can probably do it.&lt;/p&gt;

&lt;p&gt;The Market: Great. Also, build an SDK, fix these bugs, and build this other smart lock app.&lt;/p&gt;

&lt;p&gt;UniKey: Well, hold on. That&amp;rsquo;s going to be a problem.&lt;/p&gt;

&lt;p&gt;The Market: You offer the tools to help us launch in months instead of years right? Figure it out. K. Thx. Byeee.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of React Native&amp;rsquo;s core value propositions is to improve developer productivity by, among other things, sharing code between android and iOS. The productivity gain is something we &lt;em&gt;needed&lt;/em&gt;, but some folks were still skeptical or React Native in general and even I wanted to see proof of the React Native app working with our UniKey SDK before we struck out on the this path. So, we:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/react-native-at-iot-startup/keep-calm-and-hack.png&#34; alt=&#34;keep calm and hack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I pitched my team on staying up all night to build a prototype React Native app with our SDK to prove that it was the way forward for hitting our deadline. They were down because they&amp;rsquo;re awesome and we built the thing in a night. That went a long way towards helping folks feel comfortable with the path we were taking.&lt;/p&gt;

&lt;h3 id=&#34;how&#34;&gt;How&lt;/h3&gt;

&lt;p&gt;So, that&amp;rsquo;s why we adopted react native at UniKey. Let&amp;rsquo;s talk about how we did it. Here&amp;rsquo;s a very basic diagram of the architecture for the apps:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/react-native-at-iot-startup/react-native-arch.png&#34; alt=&#34;React Native App Arch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At the top, we&amp;rsquo;ve got our UI code written in javascript with React Native. In the middle, we&amp;rsquo;ve got a bridge layer that mediates communication between the javascript layer and our UniKey SDK, which is the bottom layer in the diagram.&lt;/p&gt;

&lt;p&gt;I want to quickly walk through some sample code of how this works in our white label apps. Let&amp;rsquo;s start by looking at this video demonstrating our lock configuration feature:&lt;/p&gt;

&lt;video width=&#34;640&#34; height=&#34;480&#34; controls&gt;
  &lt;source src=&#34;https://www.philosophicalhacker.com/videos/settings.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;In this video, the app is connecting to a lock via bluetooth to configure its settings. Here&amp;rsquo;s some RN javascript code that does this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; NativeServiceBridge from &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;./services&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; ReaderDetails &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Component {
  _componentWillAppear() {
    getEmitter().addListener(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;readerSettingChange&amp;#39;&lt;/span&gt;,
      settings &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (settings.length &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;.setState({ settings, progress&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt; });
        }
      });
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { reader } &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;.props;
    NativeServiceBridge.startConfigureReaderSettings(reader.id,
      error &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; {
        error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; console.error(&lt;span style=&#34;color: #BA2121&#34;&gt;`can&amp;#39;t configure settings`&lt;/span&gt;);
      });
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code is a little awkward, but its pretty simple. We have this &lt;code&gt;NativeServiceBridge&lt;/code&gt; that mediates communication between the JS side and that native side and we&amp;rsquo;re calling &lt;code&gt;startConfigureReaderSettings&lt;/code&gt; on that bridge. We also register an event listener to receive events when we receive settings from the lock (of course, these events are emitted by the &lt;code&gt;NativeServiceBridge&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The js here is the same regardless of Android or iOS. We documented the contract between the js and native side with esdoc and basically said, &amp;ldquo;Android guys, make your interface look like this and iOS guys, do the same.&amp;rdquo; If we did this over, we&amp;rsquo;d consider Walmart&amp;rsquo;s &lt;a href=&#34;http://www.electrode.io/site/native.html&#34;&gt;electrode&lt;/a&gt;, which generates this contract from a swagger file.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s drop down a level in our stack diagram and look at the code in the &lt;code&gt;NativeServiceBridge&lt;/code&gt;. You are here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/react-native-at-iot-startup/native-service-bridge.jpeg&#34; alt=&#34;Native Service Bridge&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s some code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;NativeServiceBridge&lt;/span&gt;(reactContext: ReactApplicationContext) 
  : ReactContextBaseJavaModule(reactContext) {
@ReactMethod &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;startConfigureReaderSettings&lt;/span&gt;(uuid: String, callback: Callback) {  
  UniKey.readerService()
    .configure(deviceSettingsObservable, UUID.fromString(uuid))    
    .subscribe({   
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; writableSettings = createWritableSettings(it)    
      eventEmitter.&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;get&lt;/span&gt;().emit(READER_SETTINGS_CHANGE_EVENT, writableSettings)  
      }, 
      {  callback(it.toString())  }, 
      { callback(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;)  }
    )
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Highlights here are that we&amp;rsquo;re extending from the React Native type &lt;code&gt;ReactContextBaseJavaModule&lt;/code&gt;, that we&amp;rsquo;ve annotated our method with &lt;code&gt;@ReactMethod&lt;/code&gt;, and that we&amp;rsquo;re communicating with the js side through &lt;code&gt;Callback&lt;/code&gt; and &lt;code&gt;EventEmitter&lt;/code&gt;. We simply call the &lt;code&gt;UniKey.readerService.configure&lt;/code&gt; method on our SDK and we pass the results back to the js side.&lt;/p&gt;

&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;

&lt;p&gt;Overall, we were very pleased with how things turned out. We were able to hit our deadlines and our react native apps work well.&lt;/p&gt;

&lt;p&gt;One of the things that I think allowed react native to work so well for us is that the bread and butter of the experience of our apps doesn&amp;rsquo;t actually need to communicate with the react native code at all. This image helps explain what I mean:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/react-native-at-iot-startup/unikey-to-phone-communication.jpeg&#34; alt=&#34;UniKey to phone communication&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Our apps aim to allow you to access your home or office in a way that is more convenient than the key. With our apps, you don&amp;rsquo;t even have to open the app in order to unlock the door. Because of this, our SDK does all the heavy-lifting with the hardware and doesn&amp;rsquo;t even need to talk to the React native code in order to perform its most important function. In other words, there&amp;rsquo;s no performance penalty in using react native for &amp;ldquo;passive entry&amp;rdquo; into a UniKey-powered smart lock.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s really interesting about our work with React Native is that because we white-label apps and create SDKs, we can actually easily create fully-native and react-native apps and compare them &lt;em&gt;side-by-side&lt;/em&gt; to see the results.&lt;/p&gt;

&lt;p&gt;The side-by-side comparison is impressive. You might even have a hard time telling which app is native and which is react-native. You&amp;rsquo;ll notice that one of the videos is the same as the one we saw earlier. I &lt;em&gt;may&lt;/em&gt; have lied about whether that video was from a fully-native white-label app or a react-native one, so just look at the videos and see if you can guess which one is which.&lt;/p&gt;

&lt;video width=&#34;640&#34; height=&#34;480&#34; controls&gt;
  &lt;source src=&#34;https://www.philosophicalhacker.com/videos/settings.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;video width=&#34;640&#34; height=&#34;480&#34; controls&gt;
  &lt;source src=&#34;https://www.philosophicalhacker.com/videos/rn-settings.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;h3 id=&#34;trade-offs&#34;&gt;Trade-offs&lt;/h3&gt;

&lt;h4 id=&#34;performance-penalty-for-crossing-the-js-bridge&#34;&gt;Performance Penalty for Crossing the JS Bridge&lt;/h4&gt;

&lt;p&gt;If you guessed right, it might be because the second video was a little slower than the first one to display the settings, and this leads into the first trade-off when working with react native: you do pay for sending commands across the javascript bridge. As the above videos suggest, that penalty is not very large, but it is there.&lt;/p&gt;

&lt;p&gt;Again, for us, the trade-off mattered little since that extra ~.5 seconds is only needed for people who want to configure their lock. People who need to unlock their app can do so just as quickly as owners of the fully-native apps.&lt;/p&gt;

&lt;h4 id=&#34;awkward-js-bridge-api&#34;&gt;Awkward JS Bridge API&lt;/h4&gt;

&lt;p&gt;A related point is that because of the limitations on how your API between JS and native code works, you can wind up with some awkward APIs. We already saw this with the JS code snippet I mentioned earlier. Here&amp;rsquo;s the snippet again:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; NativeServiceBridge from &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;./services&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; ReaderDetails &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Component {
  _componentWillAppear() {
    getEmitter().addListener(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;readerSettingChange&amp;#39;&lt;/span&gt;,
      settings &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (settings.length &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;.setState({ settings, progress&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt; });
        }
      });
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;const&lt;/span&gt; { reader } &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;.props;
    NativeServiceBridge.startConfigureReaderSettings(reader.id,
      error &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; {
        error &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; console.error(&lt;span style=&#34;color: #BA2121&#34;&gt;`can&amp;#39;t configure settings`&lt;/span&gt;);
      });
  }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The weird thing about this code is that we are registering an event emitter &lt;em&gt;and&lt;/em&gt; passing in a callback to &lt;code&gt;startConfigureReaderSettings&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The reason we need to do this is that we actually need two callbacks from that one method call. One callback when new settings arrive over bluetooth (which may be called multiple times) and another callback when the configure operation has completed. Callbacks can only be called once in react native, so we also have to use an event emitter, which feels awkward compared to native APIs.&lt;/p&gt;

&lt;h4 id=&#34;libraries-can-be-hit-or-miss&#34;&gt;Libraries can be hit or miss&lt;/h4&gt;

&lt;p&gt;For us, the best example of this trade-off related to the library we used for navigation. &lt;a href=&#34;https://facebook.github.io/react-native/docs/navigation.html#react-navigation&#34;&gt;The react native docs&lt;/a&gt; suggest react-navigation is the solution for navigation on react native. Turns out that way leads to weeping and gnashing of teeth. There&amp;rsquo;s even &lt;a href=&#34;https://github.com/react-community/react-navigation/issues/2031&#34;&gt;a github issue&lt;/a&gt; hilariously titled, &amp;ldquo;This library just isn&amp;rsquo;t good.&amp;rdquo; Use &lt;a href=&#34;https://github.com/wix/react-native-navigation&#34;&gt;Wix&amp;rsquo;s navigation library instead&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;build-tools-less-flexible-and-poorly-documented&#34;&gt;Build Tools Less Flexible and Poorly Documented&lt;/h4&gt;

&lt;p&gt;We white-label apps, so build tools and build variants are important to us. That&amp;rsquo;s a rougher game with react-native apps than native apps. With ordinary Android development, you can create build flavors like so:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;productFlavors &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  partner1 &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  partner2 &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The react native build tools can handle flavors to some extent, but if your flavors need different javascript entry points, then you&amp;rsquo;ll probably just have to disable the react-native gradle plugin because it doesn&amp;rsquo;t have a hook to change the js entry-point based on a product flavor.&lt;/p&gt;

&lt;p&gt;On iOS, RN is better in this regard. You can change the js entry point based on a build variant (iOS scheme), but first you have to read a bash file and locate this comment and cryptic line:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Define entry file&lt;/span&gt;
&lt;span style=&#34;color: #19177C&#34;&gt;ENTRY_FILE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;index&lt;/span&gt;.ios.js&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can pass the entry point into this script from the build phases section in your Xcode build settings, but none of this is really documented.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So, there you have it: the how, why, results, and trade-offs of our usage of React Native at UniKey. If you&amp;rsquo;re working on an IoT product, I hope I&amp;rsquo;ve convinced you that using react native is more appropriate than using a toilet in a movie theater.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Abuse Kotlin Extension Functions</title>
      <link>https://www.philosophicalhacker.com/post/how-to-abuse-kotlin-extension-functions/</link>
      <pubDate>Fri, 26 May 2017 18:48:58 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/how-to-abuse-kotlin-extension-functions/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve got a &amp;ldquo;sweet tooth,&amp;rdquo; which, in my case, is just a euphemism for me saying that I&amp;rsquo;m &lt;em&gt;addicted&lt;/em&gt; to sugar. I&amp;rsquo;m young now, but I know that this addiction won&amp;rsquo;t end well once my metabolism slows down, so I try go to the gym.&lt;/p&gt;

&lt;p&gt;Unfortunately, when I leave the gym, I often think to myself, &amp;ldquo;I just worked out, so I can snag that Oreo McFlurry I&amp;rsquo;ve been craving all day.&amp;rdquo; When I do this, I abuse exercise: I take a good thing &amp;mdash; exercise &amp;mdash; and I use it to justify engaging in a bad habit &amp;mdash; consuming empty calories. Hold that thought.&lt;/p&gt;

&lt;p&gt;I started using Kotlin this week. Overall, Kotlin is absolutely delightful, but heaping unqualified additional praise on an already hyped language doesn&amp;rsquo;t make good toilet reading, so let&amp;rsquo;s mix things up a bit.&lt;/p&gt;

&lt;p&gt;I want to talk about a Kotlin language feature that I&amp;rsquo;m not thrilled about. I&amp;rsquo;m less than ecstatic about this feature because I think that its likely to be abused. Just as I can take something good like exercise and use it to justify a bad habit, we can take good Kotlin language features and use them to continue and exacerbate our bad Java coding habits into our Kotlin code.&lt;/p&gt;

&lt;p&gt;More specifically, I&amp;rsquo;m worried about extension functions. I&amp;rsquo;m worried that extensions will make it easier for us to avoid creating clean abstractions in our code. Let&amp;rsquo;s look at this in detail so that we can avoid abusing extension functions.&lt;/p&gt;

&lt;p&gt;First, we&amp;rsquo;ll look at the original intent of extension functions. Then, we&amp;rsquo;ll examine an example in &lt;a href=&#34;https://github.com/google/iosched&#34;&gt;the Google I/O codebase&lt;/a&gt; where I think extension functions are getting abused, and we&amp;rsquo;ll talk specifically about why I think we have a bona-fide example of abuse on our hands. Finally, I&amp;rsquo;ll talk about a better way of structuring the abusive code.&lt;/p&gt;

&lt;h3 id=&#34;why-extensions-are-good-thing-sometimes&#34;&gt;Why Extensions are Good Thing (sometimes)&lt;/h3&gt;

&lt;p&gt;Before we look at how extensions can be abused, let&amp;rsquo;s look at what they&amp;rsquo;re good for. &lt;a href=&#34;https://kotlinlang.org/docs/reference/extensions.html#motivation&#34;&gt;The &amp;ldquo;motivation&amp;rdquo; section of the docs on this feature&lt;/a&gt; is helpful here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Java, we are used to classes named &amp;ldquo;*Utils&amp;rdquo;: FileUtils, StringUtils and so on. The famous java.util.Collections belongs to the same breed. And the unpleasant part about these Utils-classes is that&amp;hellip;class names are always getting in the way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The example they have for this is brilliant:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Collections&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;swap&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; 
                Collections&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;binarySearch&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Collections&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;otherList&lt;span style=&#34;color: #666666&#34;&gt;)),&lt;/span&gt; 
                Collections&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because of the code completion and improved readability, the kotlin folks rightly point out that we&amp;rsquo;d rather write:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;swap&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;list&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;binarySearch&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;otherList&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()),&lt;/span&gt; list&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, we can&amp;rsquo;t implement all possible list methods inside of the list class, so, in order to achieve this, we need to a way to write list methods outside of the list class. And that, boys and girls, is where extension functions come from.&lt;/p&gt;

&lt;h3 id=&#34;an-example-extension-function-abuse&#34;&gt;An Example Extension Function Abuse&lt;/h3&gt;

&lt;p&gt;In some cases, this seems like a great addition to the language. Where could we go wrong here? To answer this question, let&amp;rsquo;s look at some Google I/O code that could be refactored to use extension functions, but probably shouldn&amp;rsquo;t be.&lt;/p&gt;

&lt;p&gt;The Google I/O code base contains a &lt;code&gt;SettingsUtils&lt;/code&gt; class. Its 484 lines long and has 33 methods. Yuck. Call sites of the methods on this class, moreover, don&amp;rsquo;t look great:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Ensure we don&amp;#39;t run this fragment again&lt;/span&gt;
LOGD&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;TAG&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Marking attending flag.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
SettingsUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setAttendeeAtVenue&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mActivity&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
SettingsUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;markAnsweredLocalOrRemote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mActivity&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, using an extension method on a &lt;code&gt;Context&lt;/code&gt; might make some of this code look a little better:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// PrefExtensions.kt&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Context&lt;/span&gt;.setAttendeeAtVenue(newValue: Boolean) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;)
    defaultSharedPreferences.edit().putBoolean(BuildConfig.PREF_ATTENDEE_AT_VENUE, newValue).apply()
}

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Context&lt;/span&gt;.markAnsweredLocalOrRemote(newValue: Boolean) {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; sp = PreferenceManager.getDefaultSharedPreferences(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;)
    sp.edit().putBoolean(PREF_ANSWERED_LOCAL_OR_REMOTE, newValue).apply()
}

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// AttendingFragment.kt&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onClick&lt;/span&gt;(v: View) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Ensure we don&amp;#39;t run this fragment again&lt;/span&gt;
    LOGD(TAG, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Marking attending flag.&amp;quot;&lt;/span&gt;)
    mActivity.setAttendeeAtVenue(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;)
    mActivity.markAnsweredLocalOrRemote(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even if you&amp;rsquo;re not crazy enough to add extension functions to &lt;a href=&#34;https://www.philosophicalhacker.com/post/towards-godless-android-development-how-and-why-i-kill-god-objects/&#34;&gt;a god object&lt;/a&gt;, you might be tempted to kotlinify this code by writing an extension function for &lt;code&gt;SharedPreferences&lt;/code&gt;. I still that that would be a mistake.&lt;/p&gt;

&lt;h3 id=&#34;why-abuse&#34;&gt;Why Abuse?&lt;/h3&gt;

&lt;p&gt;Extension functions, as their name implies, are good for &lt;em&gt;extending&lt;/em&gt; existing abstractions. They&amp;rsquo;re abused when we use them to palliate the use of a bad or entirely absent abstractions.&lt;/p&gt;

&lt;p&gt;To see why this particular example is an abuse of extension functions, let&amp;rsquo;s back up a second and think back to the &lt;code&gt;SettingsUtil&lt;/code&gt; class. &lt;code&gt;Util*&lt;/code&gt; classes, in many cases, are substitutes for missing or poorly formed abstractions. That&amp;rsquo;s true in this case.&lt;/p&gt;

&lt;p&gt;Is the attendee&amp;rsquo;s physical location in relation to the Google I/O conference a Setting? Not really.&lt;/p&gt;

&lt;p&gt;Its implemented as a &lt;code&gt;SharedPreference&lt;/code&gt;, so it gets lumped in with all the other SharedPreference-related methods in &lt;code&gt;SettingsUtils&lt;/code&gt;, but these two methods are really part of something that&amp;rsquo;s different from a &lt;code&gt;SharedPreference&lt;/code&gt;. &lt;code&gt;SharedPreference&lt;/code&gt; is just an implementation detail. &lt;code&gt;SharedPreferences&lt;/code&gt; can be a bit annoying to get a hold of, so to make matters worse, this bag of methods lives in an utility class.&lt;/p&gt;

&lt;p&gt;This has two consequences: First, &lt;code&gt;SettingsUtil&lt;/code&gt; and &lt;code&gt;AttendingFragment&lt;/code&gt; are harder to understand because they have low cohesion. Second, &lt;code&gt;SettingsUtil&lt;/code&gt; and &lt;code&gt;AttendingFragment&lt;/code&gt; are overly coupled, which will make testing and maintenance more difficult.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at cohesion-related consequences first. &lt;code&gt;SettingsUtil&lt;/code&gt; is a class that&amp;rsquo;s hard to grok because its just an random bag of 34 conceptually unrelated methods that all happen to rely on &lt;code&gt;SharedPreferences&lt;/code&gt; as an implementation detail. Because the purpose of &lt;code&gt;SettingsUtil&lt;/code&gt; is hard to understand, the purpose of &lt;code&gt;AttendingFragment&lt;/code&gt;, a class that relies on it is also obscured, albeit to a lesser degree.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the kicker: moving to extension functions doesn&amp;rsquo;t do anything to solve this problem.&lt;/p&gt;

&lt;p&gt;Next, the coupling-related consequences. &lt;em&gt;Extensions are resolved statically.&lt;/em&gt; This means that code that depends on extension methods are &lt;em&gt;tightly coupled&lt;/em&gt; to a single implementation of an extension method.&lt;/p&gt;

&lt;p&gt;Java&amp;rsquo;s static methods result in the same exact degree of coupling, and that&amp;rsquo;s the point here: moving to extension functions doesn&amp;rsquo;t really solve the deeper problem here. You&amp;rsquo;re code looks a little nicer, but its still tightly coupled.&lt;/p&gt;

&lt;p&gt;So, on both counts, using extension functions in this case merely helps us put lipstick on a pig. As I said at the outset of this section, extension functions are better used when we want to extend an already existing abstraction.&lt;/p&gt;

&lt;h3 id=&#34;a-better-way&#34;&gt;A better way&lt;/h3&gt;

&lt;p&gt;To solidify the idea that using a function extension in this case would be an abuse, let&amp;rsquo;s look at a better way of handling the above code. As far as I can tell, the missing abstraction here is an &lt;code&gt;Attendee&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Attendee&lt;/span&gt; {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Attending&lt;/span&gt; {
        IN_PERSON,
        REMOTE,
        UNKNOWN
    }

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;setAtVenue&lt;/span&gt;(newValue: Boolean)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;attending&lt;/span&gt;(): Attending
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It turns out that there are other &lt;code&gt;SettingsUtil&lt;/code&gt; methods that make sense to move to this interface. Conference attendees accept a code of conduct that is presented in the &lt;code&gt;ConductFragment&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Attendee&lt;/span&gt; {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;acceptCodeOfConduct&lt;/span&gt;(newValue: Boolean)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;hasAcceptedCodeOfConduct&lt;/span&gt;(): Boolean
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that we&amp;rsquo;ve filled out the methods on this interface, we can see that the call sites of &lt;code&gt;Attendee&lt;/code&gt; methods are simpler and more easily understood than their &lt;code&gt;SettingsUtils&lt;/code&gt; counter-parts:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// AttendingFragment.kt&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onClick&lt;/span&gt;(v: View) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Ensure we don&amp;#39;t run this fragment again&lt;/span&gt;
    LOGD(TAG, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Marking attending flag.&amp;quot;&lt;/span&gt;)
    attendee.setAtVenue(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;)    
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Notice we dont need to call SettingsUtils.markAnsweredLocalOrRemote.&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With these changes, the &lt;code&gt;SettingsUtils&lt;/code&gt; class loses 5 methods, thereby getting a little more digestible. The &lt;code&gt;SharedPrefsAttendee&lt;/code&gt; implementation, as you can imagine, is short (24 kotlin lines) and easily grokked. Classes that use the &lt;code&gt;Attendee&lt;/code&gt; abstraction are a little clearer and a little simpler. They also aren&amp;rsquo;t tightly coupled with a specific implementation, which makes them easier to test and maintain.&lt;/p&gt;

&lt;p&gt;So, don&amp;rsquo;t abuse Kotlin&amp;rsquo;s extension functions. They&amp;rsquo;re neat, but sometimes plain old OO techniques are a better choice. Identifying a missing or bad abstraction is often a better way to approach &lt;code&gt;*Util&lt;/code&gt; classes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Not Needing Dagger is a Code Smell (Pt. 1)</title>
      <link>https://www.philosophicalhacker.com/post/not-needing-dagger-is-a-smell-pt-1/</link>
      <pubDate>Fri, 12 May 2017 08:21:30 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/not-needing-dagger-is-a-smell-pt-1/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;A code smell is a surface indication that usually corresponds to a deeper problem in the system&amp;hellip;smells don&amp;rsquo;t always indicate a problem&amp;hellip;You have to look deeper to see if there is an underlying problem there.&lt;/p&gt;

&lt;p&gt;&amp;ndash;Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some people don&amp;rsquo;t think Dagger is very useful. I&amp;rsquo;m a bit suspicious of these people. An application that doesn&amp;rsquo;t need Dagger smells. It suggests that there &lt;em&gt;might&lt;/em&gt; be something wrong with the application&amp;rsquo;s architecture. More specifically, it suggests there are problems its object graph.&lt;/p&gt;

&lt;p&gt;Before I talk about these problems, I want to provide an initial argument for thinking that there&amp;rsquo;s a connection between object-graph-related boilerplate and good application architecture. That&amp;rsquo;s what this first post is about.&lt;/p&gt;

&lt;h3 id=&#34;a-quick-qualifier&#34;&gt;A Quick Qualifier&lt;/h3&gt;

&lt;p&gt;Notice &amp;ndash; in keeping with Fowler&amp;rsquo;s definition of a code smell &amp;ndash; I said that not needing dagger &amp;ldquo;suggests there &lt;em&gt;might&lt;/em&gt; be something wrong with the application&amp;rsquo;s architecture.&amp;rdquo; It&amp;rsquo;s perfectly possible to have a well-structured application that doesn&amp;rsquo;t need Dagger. Not needing Dagger is a smell that &amp;ldquo;doesn&amp;rsquo;t always indicate a problem.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;For example, you might have an application that&amp;rsquo;s so small you don&amp;rsquo;t really have any object-graph-related boilerplate. If you don&amp;rsquo;t have any of that boilerplate, why add a library whose purpose is to reduce that boilerplate?&lt;/p&gt;

&lt;p&gt;Still, I think there&amp;rsquo;s a fair amount of applications that don&amp;rsquo;t need Dagger &lt;em&gt;because&lt;/em&gt; there are problems with the application&amp;rsquo;s object graph.&lt;/p&gt;

&lt;h3 id=&#34;what-s-an-object-graph&#34;&gt;What&amp;rsquo;s an Object Graph?&lt;/h3&gt;

&lt;p&gt;Its not very meaningful to say that an application has a problematic object graph if we don&amp;rsquo;t know what an object graph is. Let&amp;rsquo;s try to fix that now.&lt;/p&gt;

&lt;p&gt;An object graph is a directed acyclic graph whose nodes are objects and whose arrows are dependency relationships. (Fun fact: directed acyclic graphs are also known as DAGs, which is where the name &amp;ldquo;Dagger&amp;rdquo; comes from.&lt;sup&gt;1&lt;/sup&gt;) Let&amp;rsquo;s look at an example.&lt;/p&gt;

&lt;p&gt;Consider this piece of code Json parsing code from the &lt;code&gt;RemoteJsonHelper&lt;/code&gt; class in the &lt;a href=&#34;https://github.com/google/iosched/blob/e8c61e7e23f74aa6786696dad22e5136b423a334/server/src/main/java/com/google/samples/apps/iosched/server/schedule/input/fetcher/RemoteJsonHelper.java&#34;&gt;Google I/O app&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;JsonReader reader &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; JsonReader&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; InputStreamReader&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;stream&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Charset&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;forName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s an object graph here. We have a set of Java objects: [&lt;code&gt;JsonReader&lt;/code&gt;, &lt;code&gt;InputStreamReader&lt;/code&gt;, &lt;code&gt;InputStream&lt;/code&gt;, &lt;code&gt;Charset&lt;/code&gt;]. We also have a set of directed dependency relationships between these objects. For example, to build an &lt;code&gt;InputStream&lt;/code&gt;, you have to build a &lt;code&gt;Charset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We represent this object graph by placing the class names of the instances of objects in the circles that represent our graph&amp;rsquo;s objects and placing arrows indicating the order in which our Java objects need to be constructed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/object-graph.svg&#34; alt=&#34;object graph&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This object graph, translated to prose, says:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To build a &lt;code&gt;JsonReader&lt;/code&gt;, build an &lt;code&gt;InputStreamReader&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To build an &lt;code&gt;InputStreamReader&lt;/code&gt;, build a &lt;code&gt;Charset&lt;/code&gt; and an &lt;code&gt;InputStream&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, that&amp;rsquo;s a quick and dirty explanation of an object graph.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-s-object-graph-related-boilerplate&#34;&gt;What&amp;rsquo;s Object-Graph-Related Boilerplate?&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s look at our example code again:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;JsonReader reader &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; JsonReader&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; InputStreamReader&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;stream&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Charset&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;forName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we have to create a &lt;code&gt;JsonReader&lt;/code&gt; multiple times, we&amp;rsquo;re stuck with some boilerplate. The only dependency that really needs to change from time to time is the &lt;code&gt;InputStream&lt;/code&gt; dependency. We&amp;rsquo;ll always need a utf-8 &lt;code&gt;Charset&lt;/code&gt; and an &lt;code&gt;InputStreamReader&lt;/code&gt;. Unfortunately, we&amp;rsquo;re stuck writing some extra code to wire up our objects to give us a &lt;code&gt;JsonReader&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;But can&amp;rsquo;t we write a Factory?,&amp;rdquo; you might protest? Sure we can. This reduces the duplication of the boilerplate, but we still have to write some pretty uninteresting code to make this happen, and as the Dagger docs say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the worst classes in any application are the ones that take up space without doing much at all: the BarcodeDecoderFactory, the CameraServiceLoader, and the MutableContextWrapper. These classes are the clumsy duct tape that wires the interesting stuff together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a pretty tame example of boilerplate. I&amp;rsquo;ll leave it to you to think about more intense examples of object-graph-related boilerplate.&lt;/p&gt;

&lt;h3 id=&#34;the-initial-argument&#34;&gt;The Initial Argument&lt;/h3&gt;

&lt;p&gt;Alright. Now that we know what an object graph is, let&amp;rsquo;s sketch out my argument. Remember: what we&amp;rsquo;re trying to show here is that not needing Dagger is a smell.&lt;/p&gt;

&lt;p&gt;To start off the argument, let&amp;rsquo;s think for a second about why Dagger exists. Smart engineers at Google said to themselves,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If my application is well-structured, I wind up with a lot of boilerplate code that&amp;rsquo;s concerned with constructing the object-graph. Let me build a library so that I don&amp;rsquo;t have a bunch of boilerplate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Guice was the first crack at a solution to this problem. The problem that it addressed must have been well-recognized by many other engineers, as it won &lt;a href=&#34;http://www.drdobbs.com/joltawards&#34;&gt;a Jolt Award&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, some smart engineers at Square &amp;mdash; some of whom worked previously at Google &amp;mdash; said basically the same thing to themselves:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If my application is well-structured, I wind up with a lot of boilerplate code that&amp;rsquo;s concerned with constructing the object-graph. Guice is neat, but its a bit heavy on the reflection. Let me build a library so that I don&amp;rsquo;t have a bunch of boilerplate without having to rely heavily on reflection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, these engineers build Dagger 1. Again, the library was met with lots of love.&lt;/p&gt;

&lt;p&gt;Finally, some other engineers &amp;mdash; mostly from Google, but some from Square, and some from Square that used to be at Google &amp;mdash; built Dagger 2 to further reduce the use of reflection in their object-graph related boilerplate destruction library.&lt;/p&gt;

&lt;p&gt;All of these efforts and all of the love for the various iterations of Java DI libraries reinforce this conditional:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If my application is well-structured, I wind up with a lot of boilerplate code that&amp;rsquo;s concerned with constructing the object-graph.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is remarkable because the contrapositive of the conditional that expresses the problem that Dagger solves is this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If I don&amp;rsquo;t have a lot of boilerplate code that&amp;rsquo;s concerned with constructing the object-graph, then my application is not well-structured.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Obviously, there&amp;rsquo;s going to be applications where the initial conditional is false. Like I said before, it&amp;rsquo;s possible that small, well-structured applications won&amp;rsquo;t lead to lots of boilerplate, so there will also be cases where the contrapositive is false.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Still, I think that all of this suggests that for many non-trivial applications, written in Java, there&amp;rsquo;s a connection here between object-graph-related boilerplate and the quality of an application&amp;rsquo;s architecture: If your application is well-structured, you&amp;rsquo;re going to have some object-graph-related boiler plate.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Admittedly, this is a pretty hand-wavy argument. Its just a sketch. Thinking about it a little more, it basically an appeal to the authority of expert developers at Google, Square, and the Jolt Award committee, along with a simple logic trick.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t buy that the devs at Google and Square know what they&amp;rsquo;re doing, you won&amp;rsquo;t find this compelling. I think there&amp;rsquo;s probably a better argument for the claim that well-structured code leads to object-graph-related boilerplate, but the appeal to authority is easier to make. Hopefully, that&amp;rsquo;s enough to convince some people.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t believe me? Watch &lt;a href=&#34;http://jakewharton.com/android-apps-with-dagger-devoxx/&#34;&gt;Jake Wharton&amp;rsquo;s talk on Dagger 1.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you want a more detailed and possibly incorrect explanation of what an object graph is, checkout &lt;a href=&#34;https://www.philosophicalhacker.com/note/what-is-an-object-graph/&#34;&gt;my note on the subject&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Its also completely possible that the object-graph related boilerplate has to do with the fact that Java is not a sufficiently powerful language for us to get our work done without boilerplate.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Setting up a Jenkins Pipeline for Android Testing</title>
      <link>https://www.philosophicalhacker.com/post/setting-up-a-jenkins-pipeline-for-android-testing/</link>
      <pubDate>Fri, 28 Apr 2017 17:39:22 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/setting-up-a-jenkins-pipeline-for-android-testing/</guid>
      <description>

&lt;p&gt;Some tests are fast. You can run 1000s of them in seconds. These are the tests that are the heart and soul of TDD, so you run them every chance you get.&lt;/p&gt;

&lt;p&gt;There are other tests that aren&amp;rsquo;t so fast. Because they&amp;rsquo;re slow, you don&amp;rsquo;t want to run them often. You&amp;rsquo;ve got better things to do than to sit and wait for test results to come through.&lt;/p&gt;

&lt;p&gt;Unfortunately, the less you run your slow tests, the less valuable they are. By moving your slow test runs off your machine and running them every time you make a change, you can make sure you&amp;rsquo;re getting the most value out of your slow tests.&lt;/p&gt;

&lt;p&gt;This is one reason why I think CI is so important. At every job I&amp;rsquo;ve had, setting up a CI is one of the first things I&amp;rsquo;ve done, and now that Jenkins has gotten a little more sophisticated with its &amp;ldquo;Pipelines,&amp;rdquo; I thought I should document how I set things up somewhere.&lt;/p&gt;

&lt;p&gt;My hope is that if my future self has a different job that requires him to setup Jenkins for Android Testing, he&amp;rsquo;ll find this useful. If your current self needs to setup Jenkins so that you can maximize the value of your slow tests, I hope you find this useful too.&lt;/p&gt;

&lt;h3 id=&#34;the-jenkinsfile&#34;&gt;The Jenkinsfile&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 1 &lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;node&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;android&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 2 &lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    step&lt;span style=&#34;color: #666666&#34;&gt;([&lt;/span&gt;$class&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;StashNotifier&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 3 &lt;/span&gt;    checkout scm
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 4 &lt;/span&gt;    &lt;span style=&#34;color: #0000FF&#34;&gt;stage&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Build&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 5 &lt;/span&gt;      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 6 &lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        sh &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;./gradlew --refresh-dependencies clean assemble&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 7 &lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        lock&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;emulator&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 8 &lt;/span&gt;          sh &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;./gradlew connectedCheck&amp;#39;&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 9 &lt;/span&gt;        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;10 &lt;/span&gt;        currentBuild&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;SUCCESS&amp;#39;&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;11 &lt;/span&gt;      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;12 &lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        slackSend &lt;span style=&#34;color: #A0A000&#34;&gt;channel:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;#build-failures&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #A0A000&#34;&gt;color:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;bad&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #A0A000&#34;&gt;message:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;This build is broken ${env.BUILD_URL}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #A0A000&#34;&gt;token:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;XXXXXXXXXXX&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;13 &lt;/span&gt;        currentBuild&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;FAILURE&amp;#39;&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;14 &lt;/span&gt;      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;15 &lt;/span&gt;        junit &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;**/test-results/**/*.xml&amp;#39;&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;16 &lt;/span&gt;      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;17 &lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;18 &lt;/span&gt;    stage&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Archive&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;19 &lt;/span&gt;      archiveArtifacts &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;app/build/outputs/apk/*&amp;#39;&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;20 &lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;21 &lt;/span&gt;    step&lt;span style=&#34;color: #666666&#34;&gt;([&lt;/span&gt;$class&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;StashNotifier&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;22 &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s a couple of lines worth highlighting here.&lt;/p&gt;

&lt;h4 id=&#34;1-node-android&#34;&gt;1 &lt;code&gt;node(&#39;android&#39;)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;A node is a computer that can execute a Jenkins job. A single Jenkins &amp;ldquo;master&amp;rdquo; server can queue up jobs for many nodes, so you can run as many jobs as you have machines simultaneously.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s interesting about this line is the parameter that &lt;code&gt;node()&lt;/code&gt; takes. The value of this parameter is a &amp;ldquo;label,&amp;rdquo; which is a way of telling Jenkins which types of nodes can run this job. With this line, I&amp;rsquo;m saying: &amp;ldquo;Only run this job on nodes that have the label &amp;lsquo;android&amp;rsquo;.&amp;rdquo; When managing your nodes through the Jenkins UI, you can specify which labels your node has, thereby limiting the execution of your jobs to particular nodes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/changing-node-labels.png&#34; alt=&#34;Setting labels on a node&#34; /&gt;&lt;/p&gt;

&lt;p&gt;OSX machines are more expensive than the linux machines that can run our Android builds, so we currently use labels to ensure that android build jobs aren&amp;rsquo;t tying up the (more expensive) OSX machines.&lt;/p&gt;

&lt;h4 id=&#34;2-step-class-stashnotifier&#34;&gt;2 &lt;code&gt;step([$class: &#39;StashNotifier&#39;])&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Prs can be gated by your Jenkins build. In other words, you can set things up so that no one can merge a pr with failing tests or lint violations. This pr gating is made possible by this step and the &lt;a href=&#34;https://github.com/jenkinsci/stashnotifier-plugin&#34;&gt;Stash Notifier plugin that exposes it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If someone can merge broken code into master in spite of failing tests, those tests aren&amp;rsquo;t as valuable as they could be.&lt;/p&gt;

&lt;p&gt;Flaky tests are made especially painful by pr gating based on test results. I think this is a good thing, as flaky tests can be a subtle poison to your testing suite. By making their poison more explicitly felt through pr gates, we&amp;rsquo;ll be more motivated to fix them or delete them. Better that, then for people to start ignoring test results.&lt;/p&gt;

&lt;h4 id=&#34;6-sh-gradlew-refresh-dependencies-clean-assemble&#34;&gt;6 &lt;code&gt;sh &#39;./gradlew --refresh-dependencies clean assemble&#39;&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;One way of thinking about a CI server is that it continuously runs what we might call &amp;ldquo;the integration test,&amp;rdquo; which we might express as follows:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Given &lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;a working code base&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;When &lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;new code is merged in&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Then &lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;we still have a working code base&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;ldquo;working code base&amp;rdquo; here is fleshed out by the specific steps in a Jenkinsfile, but is often defined as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A working code base builds from a &lt;em&gt;fresh checkout&lt;/em&gt; and all the tests pass.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &amp;ldquo;fresh checkout&amp;rdquo; bit of the definition is often necessary to avoid the proverbial &amp;ldquo;but it builds on my machine&amp;rdquo; excuse.&lt;/p&gt;

&lt;p&gt;Since developers and their computers are not invincible, a particular developer&amp;rsquo;s machine is not the source of truth for whether a build is broken. The CI server should be that source of truth, as it tells us whether its possible for a new developer to build a project on a new machine.&lt;/p&gt;

&lt;p&gt;This is why &lt;code&gt;--refresh-dependencies&lt;/code&gt; and &lt;code&gt;clean&lt;/code&gt; are included in this line. &lt;code&gt;--refresh-dependencies&lt;/code&gt; is particularly important if you&amp;rsquo;re using SNAPSHOT dependencies, as I&amp;rsquo;ve run into cases where the build appears to be fine but is actually broken, and I couldn&amp;rsquo;t tell because the CI server was using a cached SNAPSHOT dependency.&lt;/p&gt;

&lt;h4 id=&#34;7-lock-emulator&#34;&gt;7 &lt;code&gt;lock(&#39;emulator&#39;) {}&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Suppose you have a quad-core node that builds Android jobs. Nodes often have an executor for each of their cores. This allows Jenkins to take full advantage of multi-core machines, as it can run a job for each core on a machine. A quad-core node, for example, could run 4 jobs simultaneously.&lt;/p&gt;

&lt;p&gt;Now, suppose that two jobs for two branches get kicked off simultaneously. If there&amp;rsquo;s only one emulator available on a node, you could have a problem: one test run could try to access the emulator while the other is using it, thereby causing failures. Locks solve this problem.&lt;/p&gt;

&lt;p&gt;This line of code grabs a lock on a resource labeled as &amp;ldquo;emulator,&amp;rdquo; and retains that lock until the code running inside its block has been completed. Any other jobs that try to run tests against the emulator while the lock is held by a particular job will have to wait, which ensures that you can take full advantage of the parallelism gained by adding additional nodes and executors.&lt;/p&gt;

&lt;h4 id=&#34;12-slacksend-channel-failures-message-broken-build-env-build-url&#34;&gt;12 &lt;code&gt;slackSend channel: &#39;#failures&#39;, message: &amp;quot;Broken build ${env.BUILD_URL}&amp;quot;&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;If a build on the CI passes, great. That should be the status quo. With all the noise in our emails and slack channels, we don&amp;rsquo;t need a notification that says, in effect, &amp;ldquo;everything is &lt;em&gt;still&lt;/em&gt; working just fine.&amp;rdquo; Any source of information that provides us with useless information MOST of the time seems likely to be a source of information that we&amp;rsquo;ll pay less attention to over time.&lt;/p&gt;

&lt;p&gt;This is why I only post build failures to a slack channel. A broken build is a big deal. Ideally, a developer will investigate a broken build immediately.&lt;/p&gt;

&lt;p&gt;When broken builds aren&amp;rsquo;t investigated immediately, we lose the value of our tests and CI, which are supposed to give us feedback on our code while the changes are still fresh in our mind. It&amp;rsquo;s much easier to fix broken code immediately than it is to fix it 3+ days later when the changes we&amp;rsquo;ve made aren&amp;rsquo;t fresh in our mind.&lt;/p&gt;

&lt;p&gt;All that to say, a slack notification seems appropriate for build failures.&lt;/p&gt;

&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ll conclude with an exhortation for my future self and for all the selves engaged in the noble struggle of Android dev:&lt;/p&gt;

&lt;p&gt;Slugging around in the Jenkins web UI may not be as interesting as writing an elegant Observable cascade for loading data in your &lt;code&gt;Activity&lt;/code&gt;, but it&amp;rsquo;s necessary if you&amp;rsquo;re going to maximize the value of the tests you&amp;rsquo;ve already written. Take solace in the fact that you&amp;rsquo;re efforts are making your team more effective.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Actually, you can run more jobs than this. Each node can have multiple executors, and the folks at Jenkins recommend that you create an executor for each core on the node.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Android Testing Calisthenics: Domain Objects</title>
      <link>https://www.philosophicalhacker.com/post/android-testing-calisthenics-domain-objects/</link>
      <pubDate>Fri, 14 Apr 2017 23:17:38 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/android-testing-calisthenics-domain-objects/</guid>
      <description>

&lt;p&gt;Imagine that you&amp;rsquo;ve never run a single mile in your life. You know that exercising is good for your health, so you decide that you&amp;rsquo;re going to take up running. Strangely, however, you also decide that you&amp;rsquo;re going to begin your journey towards physical fitness by running a marathon tomorrow.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s obviously a bad idea.&lt;/p&gt;

&lt;p&gt;Less obviously, deciding to go from no experience with testing to writing tests for an already existing Android app is also a bad idea. Adding test coverage to an already existing Android application is a marathon-level testing project. It&amp;rsquo;d be more sensible to start with something smaller and work your way up.&lt;/p&gt;

&lt;p&gt;This post invites you to embrace this sensible idea. It&amp;rsquo;s a series of exercises designed slowly introduce you to the challenge of testing Android applications. Before we do that though, I want to say a little about why I think Android testing is one of the hardest kinds of testing you can do.&lt;/p&gt;

&lt;h3 id=&#34;android-a-marathon-level-testing-project&#34;&gt;Android: A Marathon-Level Testing Project&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve been reading through Gerard Meszaros&amp;rsquo; &lt;em&gt;xUnit Testing Patterns&lt;/em&gt;. The other day I stumbled upon this passage:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some kinds of tests are harder to write than others. This difficulty arises partly because the techniques are more involved and partly because they are less well known&amp;hellip;The following common kinds of tests are listed in approximate order of difficulty, from easiest to most difficult.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simple entity objects&lt;/li&gt;
&lt;li&gt;Stateless service objects&lt;/li&gt;
&lt;li&gt;Stateful service objects&lt;/li&gt;
&lt;li&gt;User Interface, database, and multi-threaded logic&lt;/li&gt;
&lt;li&gt;Object-oriented legacy software (software built without tests)&lt;/li&gt;
&lt;li&gt;Non-object-oriented legacy software&lt;sup&gt;1&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve talked &lt;a href=&#34;https://www.philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/&#34;&gt;a&lt;/a&gt; &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/&#34;&gt;lot&lt;/a&gt; about why Android unit testing is so hard, but this passage struck me. As it read it, it occurred to me that testing Android code is combination of the hardest thing on that list with the 3rd hardest thing on that list. Android apps don&amp;rsquo;t tend to be object oriented and they involve a lot of user interface, database, and multi-threaded code.&lt;/p&gt;

&lt;p&gt;So, those who attempt to add tests to already existing Android apps are really doing something difficult. I&amp;rsquo;m not the only one saying that. Meszaros suggests the same thing (by implication) in the above passage.&lt;/p&gt;

&lt;h3 id=&#34;calisthenics&#34;&gt;Calisthenics&lt;/h3&gt;

&lt;p&gt;Instead of starting with the hardest possible target to test, let&amp;rsquo;s work our way up. &lt;a href=&#34;https://github.com/kmdupr33/TestingCalisthenics&#34;&gt;This github project&lt;/a&gt; has some exercises to get you ready. If you want, you can checkout the project and switch between the challenge and solution branches as you work through them. Throughout the remainder of the post, I&amp;rsquo;ll present a testing challenge and the solution to that challenge. If you really want to ready for testing Android apps, I&amp;rsquo;d suggest you try to work through the challenge and check your solution with the ones that I suggest.&lt;/p&gt;

&lt;h4 id=&#34;domain-object&#34;&gt;Domain Object&lt;/h4&gt;

&lt;p&gt;The easiest thing to test, according to Meszaros, is a simple domain object. We don&amp;rsquo;t typically deal with domain objects in Android development since Android apps tend not to be object oriented, but this is still a helpful starting point for learning testing.&lt;/p&gt;

&lt;p&gt;To come up with our challenge, we can think back to the business rule we discovered while &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/&#34;&gt;we were looking at the google I/O conference app a couple weeks back&lt;/a&gt;: A user cannot remove the keynote session from her schedule. Instead of encoding this business rule in the UI, suppose we had an actual domain object that enforced it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Schedule&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Session session&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
        sessions&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a simple, not-so-scary piece of code. Because &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;the code doesn&amp;rsquo;t scare us&lt;/a&gt;, we might not write a test for it in real life, but we&amp;rsquo;re just getting our feet wet with testing, so let&amp;rsquo;s give it a go. Here&amp;rsquo;s the stubs of the test methods you&amp;rsquo;ll need to fill in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ScheduleTest&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;removesNonKeynoteSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;throwsOnRemoveKeyNote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the first method, you want to check that &lt;code&gt;Schedule&lt;/code&gt; actually removes non-keynote sessions. In the second method, you want to check that &lt;code&gt;Schedule&lt;/code&gt; throws an exception if you try to remove a keynote session. Give it a go! When you scroll down, you&amp;rsquo;ll see how I&amp;rsquo;ve filled in these methods.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here&amp;rsquo;s how I wrote &lt;code&gt;removesNonKeynoteSession&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;removesNonKeynoteSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    Schedule schedule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Schedule&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Session session &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Session&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertFalse&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here&amp;rsquo;s how I wrote &lt;code&gt;throwsOnRemoveKeynote&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;expected &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;throwsOnRemoveKeyNote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    Schedule schedule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Schedule&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Session session &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Session&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Already we&amp;rsquo;re seeing a pattern in these two tests. This pattern turns out to be core to testing. Each test method consists of three stages: arrange, act, assert. In the arrange stage, we get our domain object into the appropriate state for our test. In the case of &lt;code&gt;throwsOnRemoveKeyNote&lt;/code&gt;, the arrange steps consist of these highlighted lines:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;removesNonKeynoteSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    Schedule schedule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Schedule&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Session session &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Session&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertFalse&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: we&amp;rsquo;re trying to test that the &lt;code&gt;Schedule&lt;/code&gt; allow us to remove a non-keynote session. To test that, we need a &lt;code&gt;Schedule&lt;/code&gt; that has a non-keynote &lt;code&gt;Session&lt;/code&gt; added to it, and that&amp;rsquo;s precisely what we&amp;rsquo;re doing in these three lines.&lt;/p&gt;

&lt;p&gt;The second stage in our test is the act stage. This is when we actually exercise the code we&amp;rsquo;re trying to test. In this case, we&amp;rsquo;re testing that &lt;code&gt;schedule.remove&lt;/code&gt; works correctly, so we call that method.&lt;/p&gt;

&lt;p&gt;The last stage is &amp;ldquo;assert,&amp;rdquo; where we&amp;rsquo;re actually making sure that, given the conditions we setup in the arrange stage and given that the target code has actually executed in the act stage, that target code has done what we wanted it to do. In this case, we expect that the &lt;code&gt;Session&lt;/code&gt; removed should no longer show up in the list of sessions on a certain schedule. This is what we&amp;rsquo;re doing by calling &lt;code&gt;assertFalse(schedule.get().contains(session))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To double check your understanding of the three stages of a test, why not try to identify which lines correspond to which stage in &lt;code&gt;throwsOnRemoveKeyNote&lt;/code&gt;. Again, scroll down when you&amp;rsquo;re ready.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Arrange:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;expected &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;throwsOnRemoveKeyNote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    Schedule schedule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Schedule&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Session session &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Session&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Act is when we call &lt;code&gt;schedule.remove()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Assert:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;expected &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;throwsOnRemoveKeyNote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;    Schedule schedule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Schedule&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Session session &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Session&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(When we pass &lt;code&gt;UnsupportedOperationException.class&lt;/code&gt; as the value for &lt;code&gt;expected&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hopefully that wasn&amp;rsquo;t too difficult. Hopefully that was a helpful exercise. Next time, we&amp;rsquo;ll make things a bit more difficult. Until then, feedback and questions are welcome!&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Gerard Meszaros, &lt;em&gt;xUnit Test Patterns&lt;/em&gt;, 247-248.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Test Driving away Coupling in Activities</title>
      <link>https://www.philosophicalhacker.com/post/test-driving-away-coupling-in-activities/</link>
      <pubDate>Sun, 09 Apr 2017 15:33:20 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/test-driving-away-coupling-in-activities/</guid>
      <description>

&lt;p&gt;&lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s, perhaps by &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/&#34;&gt;some strange historical accidents&lt;/a&gt;, have been seen as &lt;em&gt;the optimal&lt;/em&gt; building blocks upon which we can build our Android applications for much of the time that Android has been around. Let&amp;rsquo;s call this idea &amp;ndash; the idea that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s are the best building blocks for our apps &amp;ndash; &amp;ldquo;android-centric&amp;rdquo; architecture.&lt;/p&gt;

&lt;p&gt;This series of posts is about the connection between the testability of android-centric architecture and the other problems that are now leading Android developers to reject it; it&amp;rsquo;s about how our unit tests are trying to tell us that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s &amp;ndash; like the cracking bricks in the above image &amp;ndash; don&amp;rsquo;t make the best building blocks for our apps because they tempt us to write code with &lt;em&gt;tight coupling&lt;/em&gt; and &lt;em&gt;low cohesion&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt-2/&#34;&gt;Last time&lt;/a&gt;, we saw &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s tend to have low cohesion. This time, we&amp;rsquo;ll see how our tests can tell us that code within &lt;code&gt;Activity&lt;/code&gt;s have tight coupling. We&amp;rsquo;ll also see how test driving the functionality leads to a design that has looser coupling, which makes it easier to change the app and also opens up opportunities for removing duplication. As with the the other posts in the series, we&amp;rsquo;ll be discussing all of this using the Google I/O app as an example.&lt;/p&gt;

&lt;h3 id=&#34;the-target-code&#34;&gt;The Target Code&lt;/h3&gt;

&lt;p&gt;The code that we want to test, the &amp;ldquo;target code&amp;rdquo;, does the following: when the user navigates to the map view that shows where all the Google I/O sessions are, it asks for their location. If they reject the permission, we show a toast notifying the user that they&amp;rsquo;ve disabled an app permission. Here&amp;rsquo;s a screenshot of this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/permission-denied-toast.png&#34; alt=&#34;permission denied toast&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the code that accomplishes this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onRequestPermissionsResult&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; requestCode&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #AA22FF&#34;&gt;@NonNull&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; permissions&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #AA22FF&#34;&gt;@NonNull&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; grantResults&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;requestCode &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; REQUEST_LOCATION_PERMISSION&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;permissions&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            LOCATION_PERMISSION&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;permissions&lt;span style=&#34;color: #666666&#34;&gt;[0])&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            grantResults&lt;span style=&#34;color: #666666&#34;&gt;[0]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; PackageManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PERMISSION_GRANTED&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Permission has been granted.&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mMapFragment &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            mMapFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setMyLocationEnabled&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Permission was denied. Display error message.&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;map_permission_denied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;                Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onRequestPermissionsResult&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;requestCode&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; permissions&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
            grantResults&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;the-test-code&#34;&gt;The Test Code&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s take a stab at testing this. Here&amp;rsquo;s what that would look like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;showsToastIfPermissionIsRejected&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    MapActivity mapActivity &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; MapActivity&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

    mapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onRequestPermissionsResult&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
            MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;REQUEST_LOCATION_PERMISSION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LOCATION_PERMISSION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;
                    PackageManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PERMISSION_DENIED&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;

    assertToastDisplayed&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hopefully, you&amp;rsquo;re wondering what the implementation of &lt;code&gt;assertToastDisplayed()&lt;/code&gt; looks like. Here&amp;rsquo;s the thing: there isn&amp;rsquo;t a straight forward implementation of that method. In order to implement without refactoring our code, we&amp;rsquo;d need to use a combination of roboelectric and powermock.&lt;/p&gt;

&lt;p&gt;However, since we are trying to listen to our tests and &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/&#34;&gt;change the way we write code, rather than change the way we write tests&lt;/a&gt;, we are going to stop for a moment and think about what this test is trying to tell us:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our presentation logic that lives inside of &lt;code&gt;MapActivity&lt;/code&gt; is tightly coupled with &lt;code&gt;Toast&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This coupling is what drives us to use roboelectric to give us mocked android behavior and  powermock to mock the static &lt;code&gt;Toast.makeText&lt;/code&gt; method. Instead, let&amp;rsquo;s listen to our test and remove the coupling.&lt;/p&gt;

&lt;p&gt;To guide our refactoring, let&amp;rsquo;s write our test first. This will ensure that our &lt;em&gt;new&lt;/em&gt; classes are loosely coupled. We have to create a new class in this particular case in order to avoid Roboelectric, but ordinarily, we could just refactor already existing classes to reduce coupling.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displaysErrorWhenPermissionRejected&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    OnPermissionResultListener onPermissionResultListener &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; OnPermissionResultListener&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mPermittedView&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    onPermissionResultListener&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onPermissionResult&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
            MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;REQUEST_LOCATION_PERMISSION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LOCATION_PERMISSION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;},&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;PackageManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PERMISSION_DENIED&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;

    verify&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mPermittedView&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayPermissionDenied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;ve introduced a &lt;code&gt;OnPermissionResultListener&lt;/code&gt; whose job is just to handle the result of request permission from a user. Here&amp;rsquo;s the code for that:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onPermissionResult&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; requestCode&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; permissions&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; grantResults&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;requestCode &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;REQUEST_LOCATION_PERMISSION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;permissions&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LOCATION_PERMISSION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;permissions&lt;span style=&#34;color: #666666&#34;&gt;[0])&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            grantResults&lt;span style=&#34;color: #666666&#34;&gt;[0]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; PackageManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PERMISSION_GRANTED&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Permission has been granted.&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        mPermittedView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayPermittedView&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Permission was denied. Display error message.&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        mPermittedView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayPermissionDenied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The calls to &lt;code&gt;MapFragment&lt;/code&gt; and &lt;code&gt;Toast&lt;/code&gt; have been replaced with method calls on the &lt;code&gt;PermittedView&lt;/code&gt;, an object that gets passed in through the constructor. &lt;code&gt;PermittedView&lt;/code&gt; is an interface:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;PermittedView&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displayPermissionDenied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displayPermittedView&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it gets implemented by the &lt;code&gt;MapActivity&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MapActivity&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; BaseActivity
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;implements&lt;/span&gt; SlideableInfoFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;Callback&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; MapFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;Callbacks&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;        ActivityCompat&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;OnRequestPermissionsResultCallback&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        OnPermissionResultListener&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PermittedView&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displayPermissionDenied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;map_permission_denied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This may not the &lt;em&gt;best&lt;/em&gt; solution, but it gets us to a point where we can test things. This &lt;em&gt;required&lt;/em&gt; that &lt;code&gt;OnPermissionResultListener&lt;/code&gt; be loosely coupled with its &lt;code&gt;PermittedView&lt;/code&gt;. Loose coupling == definitely an improvement.&lt;/p&gt;

&lt;h3 id=&#34;who-cares&#34;&gt;Who cares?&lt;/h3&gt;

&lt;p&gt;At this point, some readers might be skeptical. &amp;ldquo;Is this definitely an improvement?,&amp;rdquo; they may wonder to themselves. Here are two reasons why this &lt;em&gt;design&lt;/em&gt; is better.&lt;/p&gt;

&lt;p&gt;(Neither reason I give, you&amp;rsquo;ll notice is &amp;ldquo;the design is better because its testable.&amp;rdquo; That would be circular reasoning.)&lt;/p&gt;

&lt;h4 id=&#34;easier-changes&#34;&gt;Easier Changes&lt;/h4&gt;

&lt;p&gt;First, its going to be easier to change this code now that it consists of loosely coupled components, and here&amp;rsquo;s the kicker: the code that we&amp;rsquo;ve just tested from the Google I/O app &lt;em&gt;actually did change&lt;/em&gt;, and with the tests that we have in place, making those changes will be easier. The code I tested was from &lt;a href=&#34;https://github.com/google/iosched/blob/bd31a838ce4ddc123c71025c859959517c7ae178/android/src/main/java/com/google/samples/apps/iosched/map/MapActivity.java&#34;&gt;an older commit&lt;/a&gt;. Later on, the folks working on the I/O app decided to replace the &lt;code&gt;Toast&lt;/code&gt; with a &lt;code&gt;Snackbar&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/permission-denied-snackbar.png&#34; alt=&#34;snackbar permission rejected&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Its a small change, but because we&amp;rsquo;ve separated &lt;code&gt;OnPermissionResultListener&lt;/code&gt; from &lt;code&gt;PermittedView&lt;/code&gt;, we can make the change on the &lt;code&gt;MapActivity&lt;/code&gt;s implementation of &lt;code&gt;PermittedView&lt;/code&gt; without having to think at all about the &lt;code&gt;OnPermissionResultListener&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what that change would have looked like, using their little &lt;code&gt;PermissionUtils&lt;/code&gt; class they wrote for displaying &lt;code&gt;SnackBar&lt;/code&gt;s.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displayPermissionDenied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    PermissionsUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayConditionalPermissionDenialSnackbar&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
            R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;map_permission_denied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;LOCATION_PERMISSION&lt;span style=&#34;color: #666666&#34;&gt;},&lt;/span&gt;
            REQUEST_LOCATION_PERMISSION&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, notice that we can make this change without thinking about the &lt;code&gt;OnPermissionResultListener&lt;/code&gt; at all. This is actually exactly what Larry Constantine was talking about when he first defined the concept of coupling back in the 70s:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;what we are striving for is loosely coupled systems‚Ä¶in which one can study (or debug, or maintain) any one module without having to know very much about any other modules in the system&lt;/p&gt;

&lt;p&gt;‚ÄìEdward Yourdon and Larry Constantine, Structured Design&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;reducing-duplication&#34;&gt;Reducing Duplication&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s another interesting reason to why the fact that our tests have forced us to remove coupling is a good thing: coupling often leads to duplication. Here&amp;rsquo;s Kent Beck on this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dependency is the key problem in software development at all scales‚Ä¶if dependency is the problem, duplication is the symptom.&lt;/p&gt;

&lt;p&gt;-Kent Beck, TDD By Example, pg 7.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If this is true, when we remove coupling, we will often see opportunities to reduce duplication. Indeed, this is precisely what we find in this case. It turns out that there is  another classes whose &lt;code&gt;onRequestPermissionsResult&lt;/code&gt; is nearly identical to the one in &lt;code&gt;MapActivity&lt;/code&gt;: &lt;a href=&#34;https://github.com/google/iosched/blob/bd31a838ce4ddc123c71025c859959517c7ae178/android/src/main/java/com/google/samples/apps/iosched/welcome/AccountFragment.java#L139&#34;&gt;&lt;code&gt;AccountFragment&lt;/code&gt;&lt;/a&gt;. Our tests drove us to create two classes &lt;code&gt;OnPermissionResultListener&lt;/code&gt; and &lt;code&gt;PermittedView&lt;/code&gt; that &amp;ndash; without much modification &amp;ndash; can be reused in these other classes.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So, when we have a hard time testing our &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s, its often because our tests are trying to tell us that our code is tightly coupled. The test&amp;rsquo;s warning about coupling often come in the form of an inability to make an assertion against the code we&amp;rsquo;re trying to test.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;When we listen to our tests, instead of changing them by using Roboelectric our powermock, we&amp;rsquo;re lead to change in our code in a way that makes it less coupled, which makes it easier to make changes and opens up opportunities to reduce duplication.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;It could also show up as an inability to get your target code into the right state for testing. That&amp;rsquo;s what we saw &lt;a href=&#34;&#34;&gt;in this post&lt;/a&gt;, for example.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Why Cryptography?</title>
      <link>https://www.philosophicalhacker.com/post/why-cryptography-for-android-developers/</link>
      <pubDate>Sat, 25 Mar 2017 23:59:53 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-cryptography-for-android-developers/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;We as engineers somewhere have a level somewhere where everything beneath that is a black box&amp;hellip;&lt;/p&gt;

&lt;p&gt;Jake Wharton, Fragmented Episode 7, 1:12:00&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a while now, anything security or crypto related on Android has been a black box for me. For example, when I read &lt;a href=&#34;https://developer.android.com/training/articles/keystore.html&#34;&gt;the docs&lt;/a&gt; on Android&amp;rsquo;s &lt;code&gt;KeyStore&lt;/code&gt; class or hear about Android&amp;rsquo;s Fingerprint authentication functionality &lt;a href=&#34;http://fragmentedpodcast.com/episodes/74/&#34;&gt;on Fragmented&lt;/a&gt;, I often feel like I&amp;rsquo;m just barely understanding what&amp;rsquo;s being said. Recently, that&amp;rsquo;s started to change, as I&amp;rsquo;ve started taking &lt;a href=&#34;https://www.coursera.org/learn/crypto/&#34;&gt;a Crypto course on Coursera&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post is the first of several attempts to solidify the concepts I learn in that course by telling you about them and about how those concepts relate to Android development.&lt;sup&gt;1&lt;/sup&gt; Hopefully, by the end of all of this, we&amp;rsquo;ll both understand things like the &lt;code&gt;KeyStore&lt;/code&gt; and HTTPS connections on Android a little better. This first post, however, isn&amp;rsquo;t going to be very Android heavy, as I merely want to try to introduce cryptography by motivating why we need a &lt;em&gt;science&lt;/em&gt; of cryptography in the first place. Let&amp;rsquo;s get to it.&lt;/p&gt;

&lt;h3 id=&#34;why-cryptography&#34;&gt;Why Cryptography?&lt;/h3&gt;

&lt;p&gt;So, why do we need cryptography? This isn&amp;rsquo;t the same as asking we need encryption. That&amp;rsquo;s obvious and uninteresting: sometimes we want to communicate with others without other people knowing what we&amp;rsquo;re saying. I don&amp;rsquo;t want people to know my credit card number when I buy something on Amazon, for example.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m asking why we need cryptography, &lt;em&gt;a disciplined study of codes&lt;/em&gt;? Why do the &lt;code&gt;KeyStore&lt;/code&gt; docs or HTTPS seem so mysterious and complicated? Why can&amp;rsquo;t we just roll our own intuitive, simple mechanism for encrypting information so that it can only be read by our intended recipient?&lt;/p&gt;

&lt;p&gt;Interestingly, people have been trying &lt;em&gt;and failing&lt;/em&gt; to securely encrypt information for 1000s of years. Moreover, many of those attempts were not grounded in any kind of rigorous way of thinking about codes. In other words, they were simple, intuitive methods of encrypting information; they were attempts at encryption without cryptography.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s why we need cryptography: our intuitive, simple methods of encryption provide no &lt;em&gt;guarantee&lt;/em&gt; of security; security is hard.&lt;/p&gt;

&lt;h3 id=&#34;a-bad-cipher&#34;&gt;A Bad Cipher&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s look at an example. Suppose we want to encrypt a message using a substitution cipher. A substitution cipher works by substituting letters in a message with other letters to generate an encrypted message. Here&amp;rsquo;s a test of some code that does exactly that:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;encryptsShortText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    Map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Character&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Character&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; key &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Character&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Character&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;(26);&lt;/span&gt;
    key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; key&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt; 
    Cipher cipher &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SubstitutionCipher&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; String cipherText &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; cipher&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;encrypt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertEquals&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;svool dliow&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; cipherText&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The specific key we used for this substitution cipher just &amp;ldquo;reverses&amp;rdquo; the alphabet, but we could use any of the &lt;code&gt;26!&lt;/code&gt; possible keys for the substitution cipher to encrypt messages. The fact that there are &lt;code&gt;26!&lt;/code&gt; possible ways of encrypting a message using this cipher may make it seem like substitution ciphers are pretty effective.&lt;/p&gt;

&lt;p&gt;However, that&amp;rsquo;s not true at all. In fact, someone can decrypt a message without even searching through the &lt;code&gt;26!&lt;/code&gt; possible keys to find the correct one to decrypt a message. Interestingly, the problem is &lt;em&gt;not&lt;/em&gt; that we need more than &lt;code&gt;26!&lt;/code&gt; possible keys.&lt;/p&gt;

&lt;p&gt;Rather, the problem is that an attacker could exploit the fact that the usage of letters or groups of letters in the english language have predictable frequency. &amp;ldquo;E&amp;rdquo;, for example, occurs roughly 12.7% of the time in english. When the attacker analyzes a text and notices that a particular character is used roughly 12.7% of the time, he&amp;rsquo;ll know that that character is actually an &amp;ldquo;E&amp;rdquo;. The pair &amp;ldquo;th&amp;rdquo;, to take another example, has a well known frequency. She can repeat this process for all letters until she discovers the key.&lt;/p&gt;

&lt;h3 id=&#34;towards-cryptography&#34;&gt;Towards Cryptography&lt;/h3&gt;

&lt;p&gt;So, the intuitive way of thinking about codes is likely to lead to weeping and gnashing of teeth. What we need instead is a &lt;em&gt;precise&lt;/em&gt; way of stating how secure our encryption mechanisms are and a way of &lt;em&gt;proving&lt;/em&gt; that our mechanisms satisfy our desired level of security. Talking with precision and communicating proofs requires special language, so next time, we&amp;rsquo;ll bring on the fancy vocabulary and symbols!&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Hold off on the symbols,&amp;rdquo; some readers might think, &amp;ldquo;You haven&amp;rsquo;t shown that we need rigorous study of codes yet. Why assume the attacker knows anything at all about the message? In real life, an attacker would have a harder time decrypting a message, since they wouldn&amp;rsquo;t know anything about it ahead of time.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This is wrong-headed for two reasons.&lt;/p&gt;

&lt;p&gt;First, although an attacker may have a slightly more difficult time decrypting a text if they know absolutely nothing about it, they can actually work by trial and error until they arrive at a sensible decryption. With the above example, an attacker can say, &amp;ldquo;I don&amp;rsquo;t know what language this message is in, but I&amp;rsquo;ll run my algorithm on German, French, and English and see what crops up.&lt;/p&gt;

&lt;p&gt;Second, in many situations, attackers will actually know a few things about the messages that are being sent back and forth. This is because computers must communicate according to well-known protocols.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So we really do need a careful study of encryption. We need cryptography. What that means is that the means by which the messages are encrypted and decrypted must be known and studied by everyone to ensure that they are secure.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to conclude by noting that all of this means that cryptography actually allows us to something pretty remarkable: someone who intercepts an encrypted message and knows both how it was encrypted &amp;ndash; because the guts of ciphers must be studied and known to be secure &amp;ndash; and what parts of the decrypted message are &amp;ndash; because computers must communicate using common protocols &amp;ndash; still can&amp;rsquo;t decrypt the rest of the message.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s really neat, and I hope it intrigues you in the same way that it does me: It&amp;rsquo;s a fact that makes me excited to work on making crypto the kind of thing that I don&amp;rsquo;t treat as a black box.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;This means that you shouldn&amp;rsquo;t take what I&amp;rsquo;m saying about security too seriously. I&amp;rsquo;m merely a student. Don&amp;rsquo;t try to build a secure system based on what I&amp;rsquo;m saying and then get mad it me when you find out its not secure.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Why Im Skeptical about Kotlin Coroutines for Android Development</title>
      <link>https://www.philosophicalhacker.com/post/why-im-skeptical-about-kotlin-coroutines-for-android-development/</link>
      <pubDate>Sun, 19 Mar 2017 00:34:58 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-im-skeptical-about-kotlin-coroutines-for-android-development/</guid>
      <description>

&lt;p&gt;A few weeks ago, the folks working on Kotlin announced the 1.1 release. Kotlin&amp;rsquo;s 1.1 release has experiment support for coroutines. Here&amp;rsquo;s the elevator pitch for coroutines from their blog post announcing the release:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Asynchronous programming is taking over the world, and the only thing that is holding us back is that non-blocking code adds considerable complexity to our systems. Kotlin now offers means to tame this complexity by making coroutines first-class citizens in the language through the single primitive: suspending functions. Such a function (or lambda) represents a computation that can be suspended (without blocking any threads) and resumed later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Coroutines are neat and they may actually be very useful in many cases, but I&amp;rsquo;m not actually sure how useful they&amp;rsquo;ll be in Android development. This post is about why I&amp;rsquo;m skeptical that coroutines really matter for Android development. Here&amp;rsquo;s the short answer: I suspect that RxJava actually gives us a better way of &amp;ldquo;taming asynchronous complexity&amp;rdquo; than coroutines do.&lt;/p&gt;

&lt;h3 id=&#34;observables-give-us-an-apt-model-for-many-problems-in-android-development&#34;&gt;Observables give us an apt model for many problems in Android development&lt;/h3&gt;

&lt;p&gt;In order to see why I&amp;rsquo;m skeptical about coroutines, let&amp;rsquo;s start by noting that streams give us an &lt;em&gt;explicit&lt;/em&gt; way of modeling many problems in Android development. When you really start getting into rxjava, it changes &lt;em&gt;the way you think&lt;/em&gt; about your problems. You start to think with &lt;code&gt;Observable&lt;/code&gt;s and you realize that most of your problems are about how to compose your &lt;code&gt;Observable&lt;/code&gt;s with various operators to get the data you&amp;rsquo;re actually interested in.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;ve stumbled upon a good way to model your problems, your life gets easier and you get to be continually amazed at how many problems your model helps you solve. Something like this happened when we started using functional programming to work with collections:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Richard Waters&amp;hellip;developed a program that automatically analyzes traditional Fortran programs, viewing them in terms of maps, filters, and accumulations. He found that fully 90 percent of the code in the Fortran Scientific Subroutine Package fits neatly into this paradigm.&lt;/p&gt;

&lt;p&gt;-Abelson et. al, Structure and Interpretation of Computer Programs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What&amp;rsquo;s interesting is that when you find a good way to explicitly model your problems in code, you actually start to think with that model, &lt;em&gt;even if you aren&amp;rsquo;t actively using it in code.&lt;/em&gt; For example, suppose I&amp;rsquo;m looking at the following code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; ints &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{0,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2};&lt;/span&gt;
&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; sum &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; ints&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color: #666666&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  ints&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*=&lt;/span&gt; ints&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; anInt &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ints&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  sum &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; anInt&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
System&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sum&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I think about this code by thinking in terms of maps and reduces, even if I&amp;rsquo;m not working with a Java &lt;code&gt;Stream&lt;/code&gt; that has those methods. The same is true about &lt;code&gt;Observable&lt;/code&gt;: its such a good way of modeling the problems that I face that I think in terms of it, even if I&amp;rsquo;m not lucky enough to use RxJava.&lt;/p&gt;

&lt;p&gt;Coroutines, on the other hand, dont give us any model of what we&amp;rsquo;re trying to accomplish with our asynchronous data at all. Rather, coroutines just give us a way to write code that feels &lt;em&gt;imperative,&lt;/em&gt; even if it is asynchronous. Here&amp;rsquo;s an example from the blog post announcing coroutines:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// launches new coroutine in UI context&lt;/span&gt;
launch(UI) {
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// wait for async overlay to complete&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; image = asyncOverlay().await()
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// and then show it in UI&lt;/span&gt;
    showImage(image)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;asyncOverlay&lt;/code&gt; does some async work, but we get to avoid writing callbacks. The code just &amp;ldquo;stops&amp;rdquo; while waiting for that async work to complete &lt;em&gt;without blocking the main thread&lt;/em&gt;. Its neat, but, again, there&amp;rsquo;s no modeling of problems that&amp;rsquo;s happening here.&lt;/p&gt;

&lt;h3 id=&#34;observable-is-a-better-abstraction-of-synchronicity&#34;&gt;Observable is a better abstraction of synchronicity&lt;/h3&gt;

&lt;p&gt;RxJava does more than just allow us to model asynchronous events and data. It actually allows us to abstract over synchronicity when we&amp;rsquo;re thinking about streams or collections of data. Ordered synchronous and asynchronous data have the same API. If we want to model sequential data in our code, when we&amp;rsquo;re using RxJava, we don&amp;rsquo;t &lt;em&gt;necessarily&lt;/em&gt; have to care whether that data arrives synchronously or asynchronously. Here&amp;rsquo;s &lt;a href=&#34;http://reactivex.io/intro.html&#34;&gt;the reactivex.io site&amp;rsquo;s&lt;/a&gt; pitch on this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The ReactiveX Observable model allows you to treat streams of asynchronous events with the same sort of simple, composable operations that you use for collections of data items like arrays. It frees you from tangled webs of callbacks, and thereby makes your code more readable and less prone to bugs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here&amp;rsquo;s something that I regularly do that demonstrates this delightful abstraction:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;clicksObservable
  &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;flatMapSingle&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;click &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; githubApi&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;listRepos&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;flatMap&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;repos &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; Observable&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;fromIterable&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;repos&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;repo &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; isMine&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;repo&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;subscribe&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;repo &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; displayInList&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;repo&lt;span style=&#34;color: #666666&#34;&gt;)})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I start with a stream of clicks and wind up with a list view that displays only the repos that aren&amp;rsquo;t mine. Along the way, I work with an &lt;code&gt;Iterable&lt;/code&gt; of repos, but I can easily turn that &lt;code&gt;Iterable&lt;/code&gt; into an &lt;code&gt;Observable&lt;/code&gt; and then it doesn&amp;rsquo;t even matter whether the repos are in memory or retrieved asynchronously. The &lt;code&gt;Observable&lt;/code&gt; cascade doesn&amp;rsquo;t get broken and the periods line up beautifully.&lt;/p&gt;

&lt;p&gt;Coroutines, on the other hand, don&amp;rsquo;t let us abstract over synchronous and asynchronous data like this. For synchronous data/operations, we use normal functions. For asynchronous data, we need to use suspecting functions wrapped in blocks that start coroutines.&lt;/p&gt;

&lt;h3 id=&#34;observables-lets-us-work-at-a-higher-level-of-abstraction&#34;&gt;Observables lets us work at a higher level of abstraction&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Observable&lt;/code&gt;s do more than just model our problems and abstract over synchronicity. They do this in a way that lets us work at a higher level of abstraction than imperative code. I can write a map an array imperatively like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; ints &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{0,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;2};&lt;/span&gt;    
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0;&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; ints&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color: #666666&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  ints&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*=&lt;/span&gt; ints&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color: #666666&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or I can do it declaratively like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Observable&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;fromArray&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ints&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;aInt &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; aInt &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; aInt&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Coroutines, in my opinion, when used to handle problems that are well modeled by &lt;code&gt;Observable&lt;/code&gt;s are merely the for loops of the asynchronous world.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;None of this is meant to suggest that coroutines aren&amp;rsquo;t useful full stop. That&amp;rsquo;s nonsense. They have their uses. I just double that they are going to be nearly as essential to Android development as RxJava.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Unit Tests are Trying to Tell us About Activities Pt 2</title>
      <link>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt-2/</link>
      <pubDate>Fri, 10 Mar 2017 22:32:02 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt-2/</guid>
      <description>

&lt;p&gt;&lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s, perhaps by &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/&#34;&gt;some strange historical accidents&lt;/a&gt;, have been seen as &lt;em&gt;the optimal&lt;/em&gt; building blocks upon which we can build our Android applications for much of the time that Android has been around. Let&amp;rsquo;s call this idea &amp;ndash; the idea that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s are the best building blocks for our apps &amp;ndash; &amp;ldquo;android-centric&amp;rdquo; architecture.&lt;/p&gt;

&lt;p&gt;This series of posts is about the connection between the testability of android-centric architecture and the other problems that are now leading Android developers to reject it; it&amp;rsquo;s about how our unit tests are trying to tell us that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s don&amp;rsquo;t make the best building blocks for our apps because they force us to write code with &lt;em&gt;tight coupling&lt;/em&gt; and &lt;em&gt;low cohesion&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this second part of &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/&#34;&gt;the series&lt;/a&gt;, through an examination of the Session Detail screen in the Google I/O sample app, I show how using &lt;code&gt;Activity&lt;/code&gt;&amp;rsquo;s and &lt;code&gt;Fragment&lt;/code&gt;s as building blocks makes our code hard to test and show that our failure to unit test tell us that our target class has low-cohesion.&lt;/p&gt;

&lt;h3 id=&#34;the-google-i-o-session-detail-example&#34;&gt;The Google I/O Session Detail Example&lt;/h3&gt;

&lt;p&gt;When I&amp;rsquo;m working on a project, I try to start by &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;testing the code that scares me the most&lt;/a&gt;. Large classes scare me. The largest class in the Google I/O app is the &lt;code&gt;SessionDetailFragment&lt;/code&gt;. Large methods scare me too, and the largest method of this large class is &lt;code&gt;displaySessionData&lt;/code&gt;. Here&amp;rsquo;s a screenshot of what this monster class displays:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/session-detail.png&#34; alt=&#34;Session Detail Screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the scary &lt;code&gt;displaySessionData&lt;/code&gt; method. This isn&amp;rsquo;t something you&amp;rsquo;re supposed to &lt;em&gt;easily&lt;/em&gt; understand; that&amp;rsquo;s what makes it scary. Gaze upon it with fear and trembling for a moment before we move on:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displaySessionData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; SessionDetailModel data&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  mTitle&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionTitle&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
  mSubtitle&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionSubtitle&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    AppIndex&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;AppIndexApi&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mClient&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; getActionForTitle&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionTitle&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()));&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Throwable e&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Nothing to do if indexing fails.&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;shouldShowHeaderImage&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mImageLoader&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;loadImage&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getPhotoUrl&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; mPhotoView&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mPhotoViewContainer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;GONE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    ViewCompat&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setFitsSystemWindows&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mAppBar&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// This is hacky but the collapsing toolbar requires a minimum height to enable&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// the status bar scrim feature; set 1px. When there is no image, this would leave&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a 1px gap so we offset with a negative margin.&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;((&lt;/span&gt;ViewGroup&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;MarginLayoutParams&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; mCollapsingToolbar&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getLayoutParams&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;topMargin&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-1;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  tryExecuteDeferredUiOperations&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Handle Keynote as a special case, where the user cannot remove it&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// from the schedule (it is auto added to schedule on sync)&lt;/span&gt;
  mShowFab &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;AccountUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasActiveAccount&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getContext&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
  mAddScheduleFab&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mShowFab &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VISIBLE&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INVISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  displayTags&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    showInScheduleDeferred&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isInSchedule&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;TextUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionAbstract&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    UIUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setTextMaybeHtml&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mAbstract&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionAbstract&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
    mAbstract&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mAbstract&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;GONE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Build requirements section&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; View requirementsBlock &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; getActivity&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session_requirements_block&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; String sessionRequirements &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getRequirements&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;TextUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessionRequirements&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    UIUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setTextMaybeHtml&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mRequirements&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; sessionRequirements&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    requirementsBlock&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    requirementsBlock&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;GONE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; ViewGroup relatedVideosBlock &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ViewGroup&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; getActivity&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;related_videos_block&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  relatedVideosBlock&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;GONE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  updateEmptyView&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  updateTimeBasedUi&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getLiveStreamVideoWatched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mPhotoView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setColorFilter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getContext&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getResources&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getColor&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;played_video_tint&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
    mWatchVideo&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getString&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session_replay&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasLiveStream&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mWatchVideo&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setOnClickListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;OnClickListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View v&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        String videoId &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
            YouTubeUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getVideoIdFromSessionData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getYouTubeUrl&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getLiveStreamId&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
        YouTubeUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;showYouTubeVideo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;videoId&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; getActivity&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  fireAnalyticsScreenView&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionTitle&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;

  mTimeHintUpdaterRunnable &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Runnable&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getActivity&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Do not post a delayed message if the activity is detached.&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
      updateTimeBasedUi&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
      mHandler&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;postDelayed&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mTimeHintUpdaterRunnable&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
          SessionDetailConstants&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;TIME_HINT_UPDATE_INTERVAL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;};&lt;/span&gt;
  mHandler&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;postDelayed&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mTimeHintUpdaterRunnable&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
      SessionDetailConstants&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;TIME_HINT_UPDATE_INTERVAL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;mHasEnterTransition&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// No enter transition so update UI manually&lt;/span&gt;
    enterTransitionFinished&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;BuildConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;ENABLE_EXTENDED_SESSION_URL&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;shouldShowExtendedSessionLink&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mExtendedSessionUrl &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getExtendedSessionUrl&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;TextUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mExtendedSessionUrl&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      mExtended&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;description_extended&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
      mExtended&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

      mExtended&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setClickable&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
      mExtended&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setOnClickListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;OnClickListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; View v&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
          sendUserAction&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailUserActionEnum&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;EXTENDED&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I know that was scary, but pull yourself together. Let&amp;rsquo;s zoom in on these few lines in particular:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displaySessionData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; SessionDetailModel data&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Handle Keynote as a special case, where the user cannot remove it&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// from the schedule (it is auto added to schedule on sync)&lt;/span&gt;
  mShowFab &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;AccountUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasActiveAccount&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getContext&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
  mAddScheduleFab&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mShowFab &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VISIBLE&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INVISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    showInScheduleDeferred&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isInSchedule&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Interesting. It looks like we&amp;rsquo;ve stumbled upon a business rule:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Conference attendee cannot remove the keynote session from their schedule.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looks like there&amp;rsquo;s presentation-logic related to this rule as well: If we&amp;rsquo;re displaying the keynote session, don&amp;rsquo;t bother providing an affordance to add or remove it from the schedule. Otherwise, go ahead and provide said affordance. Oh&amp;hellip;and also, if the session is in the attendee&amp;rsquo;s schedule, go ahead and show it.&lt;/p&gt;

&lt;p&gt;That method name, &lt;code&gt;showInScheduleDeferred&lt;/code&gt; actually turns out to be a lie. Even if you call it, you won&amp;rsquo;t see a FAB to add or remove a non-keynote session from their calendar. Lying methods are even scarier than long ones. The reason you won&amp;rsquo;t see a the FAB is another business rule:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Conference attendee cannot add or remove sessions that have already passed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That code lives in &lt;code&gt;updateTimeBasedUi&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;updateTimeBasedUi&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailModel data&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// If the session is done, hide the FAB, and show the &amp;quot;Give feedback&amp;quot; card.&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isSessionReadyForFeedback&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mShowFab &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    mAddScheduleFab&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;GONE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasFeedback&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isInScheduleWhenSessionFirstLoaded&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;sDismissedFeedbackCard&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionId&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      showGiveFeedbackCard&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you look at a session&amp;rsquo;s details before the conference starts, you&amp;rsquo;ll actually see the &amp;ldquo;add to schedule&amp;rdquo; FAB:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/session-detail-with-fab.png&#34; alt=&#34;Add to schedule fab is visible now&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So, we&amp;rsquo;ve actually got a fairly complicated business rule here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A conference attendee can only add or remove a session from their schedule if that session is not the keynote and if that session hasn&amp;rsquo;t already passed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, we want our presentation-logic to reflect this rule, which means we only want to give the attendees an affordance to add or remove a session in accordance with this rule. It&amp;rsquo;d be silly if we showed the FAB and when the user tapped it, the app said &amp;ndash; perhaps with a &lt;code&gt;Dialog&lt;/code&gt; or a &lt;code&gt;Toast,&lt;/code&gt; &amp;ldquo;Nope! You can&amp;rsquo;t remove the keynote session!&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;a-failed-attempt-to-test&#34;&gt;A Failed Attempt to Test&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s see if we can write a few tests for this presentation logic. Remember, as we said &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/&#34;&gt;last time&lt;/a&gt;, the idea here is that tests tell us something about our design. If the class is easy to unit test, its well designed. When I write this unit test, I&amp;rsquo;ll write what I think is the easiest way to unit test this functionality. The more I have to change my ideal easy test, the most suspicious I become of the class I&amp;rsquo;m testing.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SessionDetailFragmentTest&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displayDataOnlyProvidesAddRemoveSessionAffordanceIfSessionIsNotKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Arrange&lt;/span&gt;
    SessionDetailFragment sessionDetailFragment &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; SessionDetailModel sessionDetailModel &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mock&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    when&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;thenReturn&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Act&lt;/span&gt;
    sessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
        SessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailQueryEnum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SESSIONS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Assert&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; View addScheduleButton &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
        sessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getView&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add_schedule_button&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertTrue&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;addScheduleButton&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INVISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the easiest test I can think of. There&amp;rsquo;s already some trouble here since &lt;code&gt;displaySessionData&lt;/code&gt; is a private method, so we have to test it indirectly through the public &lt;code&gt;SessionDetailFragment.displayData&lt;/code&gt; method. Not too shabby though. Unfortunately, when we run it. Here&amp;rsquo;s what we get:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;java&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;NullPointerException&lt;/span&gt;
	at com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;samples&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;apps&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iosched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailFragment&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displaySessionData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:396)&lt;/span&gt;
	at com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;samples&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;apps&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iosched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailFragment&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:292)&lt;/span&gt;
	at com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;samples&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;apps&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iosched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailFragmentTest&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayDataOnlyProvidesAddRemoveSessionAffordanceIfSessionIsNotKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailFragmentTest&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:19)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The test is complaining that &lt;code&gt;SessionDetailFragment.mTitleView&lt;/code&gt; is null. Ugh. The error is annoying because &lt;code&gt;SessionDetailFragment.mTitleView&lt;/code&gt; &lt;em&gt;nothing to do with this test&lt;/em&gt;. Looks like I&amp;rsquo;ll have to add a call to &lt;code&gt;onActivityCreated&lt;/code&gt; to make sure those &lt;code&gt;View&lt;/code&gt;s get instantiated:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displayDataOnlyProvidesAddRemoveSessionAffordanceIfSessionIsNotKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Arrange&lt;/span&gt;
    SessionDetailFragment sessionDetailFragment &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; SessionDetailModel sessionDetailModel &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mock&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    when&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;thenReturn&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Act&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    sessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onActivityCreated&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;    sessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
        SessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailQueryEnum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SESSIONS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Assert&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; View addScheduleButton &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
        sessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getView&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add_schedule_button&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertTrue&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;addScheduleButton&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INVISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we run this test, we get another error:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;java&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;NullPointerException&lt;/span&gt;
	at com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;samples&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;apps&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iosched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailFragment&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;initPresenter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:260)&lt;/span&gt;
	at com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;samples&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;apps&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iosched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailFragment&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onActivityCreated&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:177)&lt;/span&gt;
	at com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;samples&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;apps&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iosched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailFragmentTest&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayDataOnlyProvidesAddRemoveSessionAffordanceIfSessionIsNotKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailFragmentTest&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:20)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time, the complaint basically boils down to the fact that &lt;code&gt;getActivity()&lt;/code&gt; returns null. At this point, we might decide to call &lt;code&gt;onAttach&lt;/code&gt; and pass in a dummy &lt;code&gt;Activity&lt;/code&gt; to get around this. Or, we might realize that even if we did do this, there&amp;rsquo;s going to be a lot of things we have to do to get this test setup &lt;em&gt;that have nothing to do with testing the behavior we&amp;rsquo;re interested in.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At this point, we might be tempted give up and go use roboelectric. &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/&#34;&gt;I&amp;rsquo;ve said before&lt;/a&gt; that using roboelectric feels like exactly the wrong thing to do here. The test is trying to tell us something about our code. We don&amp;rsquo;t need to change the way we test. We need to change the way we code.&lt;/p&gt;

&lt;p&gt;So, before giving up, let&amp;rsquo;s think for a second about what&amp;rsquo;s happening. We&amp;rsquo;re interested in testing a small piece of behavior, and the way our class is designed is forcing us to care about a bunch of other objects &lt;em&gt;that have nothing to do with the behavior we&amp;rsquo;re testing.&lt;/em&gt; What this means is that our class has low cohesion. Our class has a bunch of functionality and objects that have little to do with each other. This is what makes it difficult to complete the arrange step in our unit test; its what makes it difficult to get our object into a state where we can actually run our test.&lt;/p&gt;

&lt;p&gt;As we know, however, low cohesion, isn&amp;rsquo;t just about testability. Classes that have low cohesion are difficult to understand and change. This test that we&amp;rsquo;ve tried and failed to write is reinforcing something that we already know intuitively: the 900+ line &lt;code&gt;SessionDetailFragment&lt;/code&gt; is a monster and it needs to be refactored.&lt;/p&gt;

&lt;p&gt;Perhaps more controversially, when we listen to the tests and follow their suggestions by writing them first, I think we&amp;rsquo;ll eventually find that we don&amp;rsquo;t even really want a &lt;code&gt;Fragment&lt;/code&gt; here at all. In fact, I think we&amp;rsquo;ll find that its rare that a &lt;code&gt;Fragment&lt;/code&gt; is the ideal building block we want to use for our functionality. One claim at a time though. Let&amp;rsquo;s wrap this post up. We&amp;rsquo;ll get to the juicy controversy in due time.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve just seen how writing a test for a class can tell us that the target class suffers from low cohesion. The &lt;code&gt;SessionDetailFragment&lt;/code&gt; may be a particularly obvious case of a low-cohesion class, but TDD can also help us identify more subtle cases of classes that lack cohesion. In this case, the target class was a &lt;code&gt;Fragment&lt;/code&gt;, but if you write tests for a while, you&amp;rsquo;ll find that the same thing is true for &lt;code&gt;Activity&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;In the next post, we&amp;rsquo;ll look at how the difficulty of testing this class shows us another insight: that &lt;code&gt;SessionDetailFragment&lt;/code&gt; is tightly coupled. We&amp;rsquo;ll also test drive this same functionality and show how the resulting design is more cohesive and loosely coupled.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some Resources for Learning how to Test Android Apps</title>
      <link>https://www.philosophicalhacker.com/post/some-resources-for-learning-how-to-test-android-apps/</link>
      <pubDate>Fri, 03 Mar 2017 08:34:09 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/some-resources-for-learning-how-to-test-android-apps/</guid>
      <description>

&lt;p&gt;Someone recently asked me how I &amp;ldquo;know so much&amp;rdquo; about testing android apps. After disabusing them of the notion that I know a lot about testing, I said that I&amp;rsquo;d write up a blog post of some helpful resources I&amp;rsquo;ve found and send it to them. This is that blog post.&lt;/p&gt;

&lt;p&gt;The resources are divided into books, articles, talks, and podcasts. I&amp;rsquo;ve marked resources that I think are essential with a &amp;ldquo;*&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;books&#34;&gt;Books:&lt;/h2&gt;

&lt;h3 id=&#34;working-effectively-with-legacy-code&#34;&gt;Working Effectively with Legacy Code *&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re working on already existing Android app and you&amp;rsquo;re trying to figure out how to get tests in place, I can&amp;rsquo;t recommend this book enough. &lt;a href=&#34;https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052&#34;&gt;The book&lt;/a&gt; has a lot of fantastic theory on &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-makes-android-apps-testable/&#34;&gt;what makes code testable in general&lt;/a&gt;. It also has a bunch of great tips for conservative refactorings you can do to safely get your codebase to a more testable state.&lt;/p&gt;

&lt;h3 id=&#34;growing-object-oriented-software-guided-by-tests&#34;&gt;Growing Object Oriented Software Guided by Tests&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re working on a greenfield project, &lt;a href=&#34;https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627&#34;&gt;this book&lt;/a&gt; is a great way to see how tests positively influence the architecture of your application and help you move towards more object oriented code. It also has some very practical tips on some trickier cases like testing persistence, etc.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a nice appendix in the book that talks about the history of &amp;ldquo;mocking&amp;rdquo; and what Fowler would call the &amp;ldquo;mockist&amp;rdquo; style of TDD. The underlying philosophy behind Mockito makes a lot more sense once you&amp;rsquo;ve read this.&lt;/p&gt;

&lt;h3 id=&#34;tdd-by-example&#34;&gt;TDD By Example *&lt;/h3&gt;

&lt;p&gt;This is &lt;a href=&#34;https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/ref=pd_sbs_14_t_1?_encoding=UTF8&amp;amp;psc=1&amp;amp;refRID=GBD9CHYJGZ7Y5YEB07CH&#34;&gt;the book by the guy popularized TDD&lt;/a&gt;. Since I had already read &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt; and &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt; before picking this up, there wasn&amp;rsquo;t a ton new for me to glean. However, since this is written by Kent Beck, I consider it essential reading. One thing I found interesting was how non-dogmatic Beck was in advocating for TDD. I also did learn &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;a neat heuristic for determining when I should be writing tests or doing TDD&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;xunit-test-patterns&#34;&gt;xUnit Test Patterns&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m nearly finished with &lt;a href=&#34;https://www.amazon.com/xUnit-Test-Patterns-Refactoring-Code/dp/0131495054&#34;&gt;this one&lt;/a&gt;. Some of it feels a bit repetitive, but there are some great insights about writing readable tests. There&amp;rsquo;s also a really nice discussion about the tradeoff between easy fixture management and test performance.&lt;/p&gt;

&lt;h2 id=&#34;articles&#34;&gt;Articles:&lt;/h2&gt;

&lt;h3 id=&#34;mocks-aren-t-stubs&#34;&gt;Mocks Aren&amp;rsquo;t Stubs *&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/articles/mocksArentStubs.html&#34;&gt;Great Martin Fowler article&lt;/a&gt; that gives a taxonomy of test doubles. Mockito has us all confused about this, but Fowler does a great job of teasing apart the various concepts that are mingled in Mockito&amp;rsquo;s &amp;ldquo;mocks.&amp;rdquo; It also contains a wonderful discussion of two different styles of TDD, with special attention paid to the influence the styles have on the architecture that emerges from doing that particular style of TDD.&lt;/p&gt;

&lt;h3 id=&#34;page-object-pattern&#34;&gt;Page Object Pattern&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/bliki/PageObject.html&#34;&gt;Martin Fowler&lt;/a&gt; named a neat pattern for ensuring that your UI tests aren&amp;rsquo;t brittle. Its identical with Jake Wharton&amp;rsquo;s &amp;ldquo;robot pattern&amp;rdquo; linked below.&lt;/p&gt;

&lt;h3 id=&#34;misko-hevery-s-testability-guide&#34;&gt;Misko Hevery&amp;rsquo;s Testability Guide&lt;/h3&gt;

&lt;p&gt;Misko Hevery, in case you don&amp;rsquo;t know, is a Google engineer and the father of Angular. He&amp;rsquo;s also the author of an excellent &lt;a href=&#34;http://misko.hevery.com/code-reviewers-guide/&#34;&gt;Testability Guide&lt;/a&gt;. In the guide, you learn why GOF Singletons and static access in general aren&amp;rsquo;t great for tests or your architecture. This guide actually inspired my post &lt;a href=&#34;https://www.philosophicalhacker.com/2015/07/14/why-static-references-to-application-contexts-are-probably-not-the-best-idea/&#34;&gt;&amp;ldquo;Why Static References to Application Contexts Aren&amp;rsquo;t the Best Idea&amp;rdquo;&lt;/a&gt;. You&amp;rsquo;ll also see some good rules about constructors and scope and how they relate to testability.&lt;/p&gt;

&lt;h2 id=&#34;talks&#34;&gt;Talks:&lt;/h2&gt;

&lt;h4 id=&#34;dagger-and-testing&#34;&gt;Dagger and Testing *&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://jakewharton.com/android-apps-with-dagger-devoxx/&#34;&gt;Great talk on Dagger&lt;/a&gt;, which is arguably essential for UI-level testing. A great highlight here is Jake&amp;rsquo;s discussion of &amp;ldquo;mock mode&amp;rdquo; in his u2020 app.&lt;/p&gt;

&lt;h4 id=&#34;increasing-app-quality-with-testing-and-monitoring&#34;&gt;Increasing App Quality with Testing and Monitoring&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4fyhgHQYG1U&amp;amp;list=PLOU2XLYxmsILe6_eGvDN3GyiodoV3qNSC&amp;amp;index=48&#34;&gt;This&lt;/a&gt; is a nice panel-like talk with developers from companies like Shazam and American Express. It was mostly useful for getting an idea of how testing works in the real world and at scale.&lt;/p&gt;

&lt;h4 id=&#34;jake-wharton-on-the-robot-pattern&#34;&gt;Jake Wharton on The Robot Pattern *&lt;/h4&gt;

&lt;p&gt;Jake Wharton basically renamed Fowler&amp;rsquo;s Page Object Pattern and &lt;a href=&#34;https://realm.io/news/kau-jake-wharton-testing-robots/&#34;&gt;he has a nice talk&lt;/a&gt; explaining how to apply the pattern to espresso tests.&lt;/p&gt;

&lt;h2 id=&#34;podcasts&#34;&gt;Podcasts:&lt;/h2&gt;

&lt;h3 id=&#34;is-tdd-dead&#34;&gt;Is TDD Dead? *&lt;/h3&gt;

&lt;p&gt;This is &lt;a href=&#34;https://martinfowler.com/articles/is-tdd-dead/&#34;&gt;a fantastic five part discussion&lt;/a&gt; between Martin Fowler, Kent Beck, and DHH. Highlights include a discussion of what we should test, the role of QA in a TDD world, the role of mocks in writing tests, and, of course, whether TDD leads to better code.&lt;/p&gt;

&lt;h3 id=&#34;fragmented-episode-7&#34;&gt;Fragmented episode 7&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://fragmentedpodcast.com/episodes/7&#34;&gt;Great episode of Fragmented&lt;/a&gt; with Jake Wharton. The discussion around Roboelectric and what we should test is good. That discussion partially inspired &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/&#34;&gt;&amp;ldquo;Why I Don&amp;rsquo;t Use Roboelectric.&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Unit Tests are Trying to Tell us about Activities: Pt. 1</title>
      <link>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/</link>
      <pubDate>Sat, 25 Feb 2017 09:33:51 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/</guid>
      <description>

&lt;p&gt;&lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s, perhaps by &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/&#34;&gt;some strange historical accidents&lt;/a&gt;, have been seen as &lt;em&gt;the optimal&lt;/em&gt; building blocks upon which we can build our Android applications for much of the time that Android has been around. Let&amp;rsquo;s call this idea &amp;ndash; the idea that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s are the best building blocks for our apps &amp;ndash; &amp;ldquo;android-centric&amp;rdquo; architecture.&lt;/p&gt;

&lt;p&gt;This series of posts is about the connection between the testability of android-centric architecture and the other problems that are now leading Android developers to reject it; it&amp;rsquo;s about how our unit tests are trying to tell us that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s don&amp;rsquo;t make the best building blocks for our apps because they force us to write code with &lt;em&gt;tight coupling&lt;/em&gt; and &lt;em&gt;low cohesion&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this first part of the series, I want to say a little about why I think android-centric architecture has been dominant for so long and to provide a little background on why I think unit tests have insightful things to say about rejecting android-centric architecture.&lt;/p&gt;

&lt;h3 id=&#34;what-is-android-centric-architecture&#34;&gt;What is Android-Centric Architecture?&lt;/h3&gt;

&lt;p&gt;An android-centric architecture is one in which each screen the user sees is &lt;em&gt;ultimately&lt;/em&gt; backed by a class whose main purpose is to interact with the android operating system. As we&amp;rsquo;ll see later, Diane Hackborne and Chet Haase have both recently stated that &lt;code&gt;Activity&lt;/code&gt;s are an example of such a class. Since &lt;code&gt;Fragment&lt;/code&gt;s are very similar to &lt;code&gt;Activity&lt;/code&gt;s, I consider an app where each screen is backed by a &lt;code&gt;Fragment&lt;/code&gt; to also have an android-centric architecture, even if there&amp;rsquo;s only one &lt;code&gt;Activity&lt;/code&gt; in the app.&lt;/p&gt;

&lt;p&gt;MVP and VIPER and RIBLETS and&amp;hellip;are a thing now in the Android community. However, these suggestions aren&amp;rsquo;t &lt;em&gt;necessarily&lt;/em&gt; a full rejection of android-centric architecture. Although there may be &lt;code&gt;Presenter&lt;/code&gt;s or &lt;code&gt;Interactors&lt;/code&gt;s or whatever involved, these objects are often still built on top of &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s; they could still get instantiated by and delegate to android-centric components, one for each screen the user sees.&lt;/p&gt;

&lt;p&gt;An app that doesn&amp;rsquo;t follow android-centric architecture has one &lt;code&gt;Activity&lt;/code&gt; and no &lt;code&gt;Fragment&lt;/code&gt;s. Router and Controller type classes are POJOs.&lt;/p&gt;

&lt;h3 id=&#34;why-android-centric-architecture&#34;&gt;Why Android-Centric Architecture?&lt;/h3&gt;

&lt;p&gt;I suspect that a part of the reason why we buy into android-centric architecture is that Google hasn&amp;rsquo;t really been clear on what &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s are for until relatively recently. On channels less official and visible than the Android docs, &lt;a href=&#34;https://medium.com/google-developers/developing-for-android-vii-the-rules-framework-concerns-d0210e52eee3#.1o25pxfat&#34;&gt;Chet Haase&lt;/a&gt; and &lt;a href=&#34;https://plus.google.com/+DianneHackborn/posts/FXCCYxepsDU&#34;&gt;Diane Hackborne&lt;/a&gt; have both suggested that &lt;code&gt;Activity&lt;/code&gt;s aren&amp;rsquo;t really the kind of things with which you want to build your application.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s Hackborne:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚Ä¶With its Java language APIs and fairly high-level concepts, it can look like a typical application framework that is there to say how applications should be doing their work. But for the most part, it is not.&lt;/p&gt;

&lt;p&gt;It is probably better to call the core Android APIs a ‚Äúsystem framework.‚Äù For the most part, the platform APIs we provide are there to define how an application interacts with the operating system; but for anything going on purely within the app, these APIs are often just not relevant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and here&amp;rsquo;s Haase:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Application components (activities, services, providers, receivers) are interfaces for your application to interact with the operating system; don‚Äôt take them as a recommendation of the facilities you should architect your entire application around.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hackborne and Haase almost explicitly reject android-centric architecture. I say &amp;ldquo;almost&amp;rdquo;, as they both don&amp;rsquo;t seem to denounce the use of &lt;code&gt;Fragment&lt;/code&gt;s as building blocks for our apps. However, there&amp;rsquo;s a tension between the idea &lt;code&gt;Activity&lt;/code&gt;s are not suitable app components and that &lt;code&gt;Fragment&lt;/code&gt;s are, and that tension is as strong as the the many similarities between the two components.&lt;/p&gt;

&lt;p&gt;It might even be fair to say that Google has actually suggested an android-centric architecture through the previous &lt;a href=&#34;https://github.com/google/iosched&#34;&gt;Google I/O app samples&lt;/a&gt; and the android documentation. The &amp;ldquo;app components&amp;rdquo; section of the Android docs is a particularly good example of this. &lt;a href=&#34;https://developer.android.com/guide/components/index.html&#34;&gt;The section introduction&lt;/a&gt; tells the reader that they&amp;rsquo;ll learn &amp;ldquo;how you can build the components [including &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s] that define the &lt;em&gt;building blocks&lt;/em&gt; of your app.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Over the past couple of years, many Android developers &amp;ndash; myself included &amp;ndash; are starting to realize that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s often are not helpful building blocks for their applications. Companies like &lt;a href=&#34;https://medium.com/square-corner-blog/advocating-against-android-fragments-81fd0b462c97&#34;&gt;Square&lt;/a&gt;, &lt;a href=&#34;https://eng.lyft.com/building-single-activity-apps-using-scoop-763d4271b41#.mshtjz99n&#34;&gt;Lyft&lt;/a&gt;, and &lt;a href=&#34;https://eng.uber.com/new-rider-app/&#34;&gt;Uber&lt;/a&gt; are moving away from android-centric architecture. Two common complaints stand out: as the app gets more complicated, the code is &lt;em&gt;difficult to understand&lt;/em&gt; and &lt;em&gt;too rigid to handle their varying use-cases.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-does-testing-have-to-do-with-this&#34;&gt;What does Testing have to do with this?&lt;/h3&gt;

&lt;p&gt;The connection between testability and understandable, flexible code is well expressed in this quotation from &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for a class to be easy to unit-test, the class must‚Ä¶be loosely coupled and highly cohesive &amp;ndash; in other words, well-designed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Coupling and cohesion have direct bearing on how understandable and flexible your code is, so if this quote is right and if unit testing &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s is difficult &amp;ndash; and you likely know that even if you haven&amp;rsquo;t read &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-we-should-stop-putting-logic-in-activities/&#34;&gt;my&lt;/a&gt; &lt;a href=&#34;https://www.philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/&#34;&gt;posts&lt;/a&gt; suggesting as much &amp;ndash; then writing unit tests would have shown us, before Google and painful experiences did, that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s aren&amp;rsquo;t the building blocks we want for constructing our applications.&lt;/p&gt;

&lt;h3 id=&#34;next-time&#34;&gt;Next Time&amp;hellip;&lt;/h3&gt;

&lt;p&gt;In the next post, I&amp;rsquo;ll try and fail to write an example test against an &lt;code&gt;Activity&lt;/code&gt; and show exactly how the tight coupling and low cohesion of &lt;code&gt;Activity&lt;/code&gt;s makes testing difficult. Next, I&amp;rsquo;ll test drive the same functionality, and we&amp;rsquo;ll end up with testable code. In the following post, I&amp;rsquo;ll show how the resulting code is loosely coupled and highly cohesive and talk about some of the benefits of these properties, including how they open up novel solutions to common problems on Android, like runtime permissions and intermittent connectivity.&lt;/p&gt;

&lt;!-- Misko Hevery quote --&gt;

&lt;!-- Joshua Block quote --&gt;

&lt;hr /&gt;

&lt;p&gt;Image Credit: Maret Hosemann, &amp;ldquo;Der Bruch,&amp;rdquo; &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/legalcode&#34;&gt;Creative Commons 2.0&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Towards Godless Android Development: How and Why I Kill God Objects</title>
      <link>https://www.philosophicalhacker.com/post/towards-godless-android-development-how-and-why-i-kill-god-objects/</link>
      <pubDate>Sat, 18 Feb 2017 09:27:03 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/towards-godless-android-development-how-and-why-i-kill-god-objects/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://kimjihyok.info/entry/%EB%B2%88%EC%97%AD-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%99%80-%EB%AC%B4%EC%8B%A0%EB%A1%A0%EC%9D%98-%EB%B0%A9%ED%96%A5-God-Object-%EC%A0%9C%EA%B1%B0-%EC%A0%91%EA%B7%BC%EB%A1%A0&#34;&gt;Korean Translation&lt;/a&gt; by Jihyok KIM&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;God is dead&amp;hellip;and also Context is dead.&lt;/p&gt;

&lt;p&gt;&amp;ndash;Friedrich Nietszche (probably)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Godlessness in the context of OO-programming &amp;ndash; unlike godlessness in a broader context &amp;ndash; is &lt;em&gt;uncontroversially&lt;/em&gt; a good thing. Some may want gods in school or gods in government, but &amp;ndash; all other things being equal &amp;ndash; no one really wants gods in their programs.&lt;/p&gt;

&lt;p&gt;In android development specifically, we have a god that we all know and love to hate: &lt;code&gt;Context&lt;/code&gt;.&lt;sup&gt;1&lt;/sup&gt; This post is about why and how I kill off the &lt;code&gt;Context&lt;/code&gt; god in my apps. The reasons and methods for killing off &lt;code&gt;Context&lt;/code&gt; can of course be applied to other kinds of &amp;ldquo;god-slaying.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;why-i-kill-context&#34;&gt;Why I Kill Context&lt;/h3&gt;

&lt;p&gt;Although &lt;code&gt;Context&lt;/code&gt; is a god object and I understand that there are disadvantages of working with god objects, this isn&amp;rsquo;t the main reason I started killing off contexts. Killing &lt;code&gt;Context&lt;/code&gt; is actually something that happened pretty naturally as a result of doing TDD. To see how this could happen, remember that when we&amp;rsquo;re doing TDD, we&amp;rsquo;re engaged in an exercise of wishful thinking: we&amp;rsquo;re writing the interfaces that we want to exist for the objects we&amp;rsquo;re testing. Here&amp;rsquo;s Freeman and Pryce on this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We like to start by writing a test as if its implementation already exists, and then filling in whatever is needed to make it work‚Äîwhat Abelson and Sussman call ‚Äúprogramming by wishful thinking‚Äù&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we take this way of thinking seriously, a way of thinking that&amp;rsquo;s closely related to the idea that &lt;a href=&#34;https://www.philosophicalhacker.com/post/how-we-misuse-mocks-for-android-tests/&#34;&gt;we shouldn&amp;rsquo;t mock types we don&amp;rsquo;t own&lt;/a&gt;, we wind up with dependencies for our objects that are expressed in the domain of that object, on the one hand, and an adapter layer, on the other. Again, here&amp;rsquo;s Freeman and Pryce:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we don‚Äôt want to mock an external API, how can we test the code that drives it? We will have used TDD to design interfaces for the services our objects need‚Äîwhich will be defined in terms of our objects‚Äô domain, not the external library.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I write the ideal interface for my objects first in a test, I find that none of my classes ever really want a &lt;code&gt;Context&lt;/code&gt;. What my objects really want is a way to get localized strings or a way to get a persistent key-value store, things that we usually obtain indirectly through a &lt;code&gt;Context&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When I pass in an object that clearly describes that object&amp;rsquo;s role with respect to the object being tested instead of passing in a &lt;code&gt;Context&lt;/code&gt;, it makes it easier for me to understand my class.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example. Let&amp;rsquo;s say you need to implement the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Show a ‚Äúrate dialog‚Äù to a user if they‚Äôve used the app three times. The user can opt to rate the app, request to be reminded to rate the app, or decline to rate the app. If the user opts to rate the app, take them to the google play store and don‚Äôt show the rate dialog again. If the user opts to be reminded to rate the app, reshow the dialog after three days have passed. If the user declines to rate the app, never show the dialog again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This functionality might make us a little nervous, so we let &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;fear drive us to write a test first&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@RunWith&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;MockitoJUnitRunner&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AppRaterPresenterTests&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Mock&lt;/span&gt; AskAppRateView askAppRateView&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Mock&lt;/span&gt; AppUsageStore appUsageStore&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;showsRateDialogIfUsedThreeTimes&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  

    AskAppRatePresenter askAppRatePresenter &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; AskAppRatePresenter&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;appUsageStore&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    when&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;appUsageStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getNumberOfUsages&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;thenReturn&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(3);&lt;/span&gt;

    askAppRatePresenter&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onAttach&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;askAppRateView&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    verify&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;askAppRateView&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayAsk&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When I&amp;rsquo;m writing this test and designing my ideal interface for &lt;code&gt;AskAppRatePresenter&lt;/code&gt;, I&amp;rsquo;m &lt;em&gt;not&lt;/em&gt; thinking about &lt;em&gt;how&lt;/em&gt; the number of app usages are stored. They could be stored through &lt;code&gt;SharedPreferences&lt;/code&gt; or through a database or through realm or&amp;hellip; Because of this, I don&amp;rsquo;t make the &lt;code&gt;AskAppRatePresenter&lt;/code&gt; ask for a &lt;code&gt;Context&lt;/code&gt;. All I really care about is that the &lt;code&gt;AskAppRatePresenter&lt;/code&gt; has a way of getting the number of times the app has been used.&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This actually makes it easier for me to read the code later. If I see that a &lt;code&gt;Context&lt;/code&gt; is being injected into an object, I don&amp;rsquo;t really have any strong idea what it might be used for. Its a god. It could be used for any number of things. However, if I see that a &lt;code&gt;AppUsageStore&lt;/code&gt; is being passed in, then I&amp;rsquo;ll be much further towards understanding what the &lt;code&gt;AskAppRatePresenter&lt;/code&gt; does.&lt;sup&gt;5&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-i-kill-context&#34;&gt;How I Kill Context&lt;/h3&gt;

&lt;p&gt;Once we have the test written and failing, we can start to implement what we need to make it pass. Obviously, we&amp;rsquo;ll need a &lt;code&gt;Context&lt;/code&gt; in the implementation, but that can be a detail that the &lt;code&gt;AskAppRatePresenter&lt;/code&gt; doesn&amp;rsquo;t know about. There are two pretty obvious ways of doing this. One is to use a &lt;code&gt;Context&lt;/code&gt; passed into the constructor to get the &lt;code&gt;SharedPreferences&lt;/code&gt; that stores the info we retrieve from a &lt;code&gt;AppUsageStore&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SharedPreferencesAppUsageStore&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;implements&lt;/span&gt; AppUsageStore &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; SharedPreferences sharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    SharedPreferencesAppUsageStore&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Context context&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      sharedPreferences &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSharedPreferences&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;usage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Context&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;MODE_PRIVATE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;getNumberOfUsages&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; sharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;numusages&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The other way is to make the &lt;code&gt;Activity&lt;/code&gt; that hosts the presenter implement the &lt;code&gt;AppUsageStore&lt;/code&gt; interface and pass a reference to the &lt;code&gt;Activity&lt;/code&gt; into &lt;code&gt;AskAppRatePresenter&lt;/code&gt;&amp;rsquo;s constructor:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MainActivity&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Activity &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;implements&lt;/span&gt; AppUsageStore&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; AskAppRateView &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Bundle savedInstanceState&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
      AskAppRatePresenter askAppRatePresenter &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; AskAppRatePresenter&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
      askAppRatePresenter&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onAttach&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;getNumberOfUsages&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; getSharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;usage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Context&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;MODE_PRIVATE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
          &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;usage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, the general recipe for killing a &lt;code&gt;Context&lt;/code&gt; &amp;ndash; or other gods in general &amp;ndash; is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an interface that represents what your class really wants from a &lt;code&gt;Context&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a class that implements this interface; that class may already be a &lt;code&gt;Context&lt;/code&gt; (e.g., an &lt;code&gt;Activity&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Inject that class into your class.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you follow the above recipe consistently, none of your interesting code will actually interact with a &lt;code&gt;Context&lt;/code&gt;. That&amp;rsquo;ll all happen in an adapter layer. When you get to this point, you&amp;rsquo;ll be able to do work on your interesting code without having any gods interfere with your ability to understand your code.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Context&lt;/code&gt; is a god object. We all know that &lt;a href=&#34;https://en.wikipedia.org/wiki/God_object&#34;&gt;god objects are an anti-pattern&lt;/a&gt;, so it might seem like &lt;code&gt;Context&lt;/code&gt; was a mistake. But that&amp;rsquo;s not obvious to me. Here&amp;rsquo;s why. First, as I pointed out in &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/&#34;&gt;my last post&lt;/a&gt;, performance was a huge concern in the early days of Android. Neat abstractions are a computational luxury that may not have been affordable at the time. Second, according to Diane Hackborne, app components are most accurately described as specific interactions with the Android OS. These aren&amp;rsquo;t your typical objects because they are instantiated by the framework and they are the entry point to a large portion of the Android SDK. These two circumstances suggest that making context a god may not have been a bad choice.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Steve Freeman and Nat Pryce, &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;, 141.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid., 121-122&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Interestingly, through doing TDD, we&amp;rsquo;ve stumbled into code that follows &lt;a href=&#34;https://en.wikipedia.org/wiki/Interface_segregation_principle&#34;&gt;the interface segregation principle&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This suggests that there&amp;rsquo;s an inverse relationship between the complexity of an injected class and ease with which we can understand the class being injected. In other words, the more complicated a class&amp;rsquo;s dependencies are, the harder it is to understand the class itself.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>