<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Philosophical Hacker</title>
    <link>https://www.philosophicalhacker.com/tags/architecture/index.xml</link>
    <description>Recent content on Philosophical Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://www.philosophicalhacker.com/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Towards Godless Android Development: How and Why I Kill God Objects</title>
      <link>https://www.philosophicalhacker.com/post/towards-godless-android-development-how-and-why-i-kill-god-objects/</link>
      <pubDate>Sat, 18 Feb 2017 09:27:03 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/towards-godless-android-development-how-and-why-i-kill-god-objects/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;God is dead&amp;hellip;and also Context is dead.&lt;/p&gt;

&lt;p&gt;&amp;ndash;Friedrich Nietszche (probably)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Godlessness in the context of OO-programming &amp;ndash; unlike godlessness in a broader context &amp;ndash; is &lt;em&gt;uncontroversially&lt;/em&gt; a good thing. Some may want gods in school or gods in government, but &amp;ndash; all other things being equal &amp;ndash; no one really wants gods in their programs.&lt;/p&gt;

&lt;p&gt;In android development specifically, we have a god that we all know and love to hate: &lt;code&gt;Context&lt;/code&gt;.&lt;sup&gt;1&lt;/sup&gt; This post is about why and how I kill off the &lt;code&gt;Context&lt;/code&gt; god in my apps. The reasons and methods for killing off &lt;code&gt;Context&lt;/code&gt; can of course be applied to other kinds of &amp;ldquo;god-slaying.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;why-i-kill-context&#34;&gt;Why I Kill Context&lt;/h3&gt;

&lt;p&gt;Although &lt;code&gt;Context&lt;/code&gt; is a god object and I understand that there are disadvantages of working with god objects, this isn&amp;rsquo;t the main reason I started killing off contexts. Killing &lt;code&gt;Context&lt;/code&gt; is actually something that happened pretty naturally as a result of doing TDD. To see how this could happen, remember that when we&amp;rsquo;re doing TDD, we&amp;rsquo;re engaged in an exercise of wishful thinking: we&amp;rsquo;re writing the interfaces that we want to exist for the objects we&amp;rsquo;re testing. Here&amp;rsquo;s Freeman and Pryce on this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We like to start by writing a test as if its implementation already exists, and then filling in whatever is needed to make it work—what Abelson and Sussman call “programming by wishful thinking”&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we take this way of thinking seriously, a way of thinking that&amp;rsquo;s closely related to the idea that &lt;a href=&#34;https://www.philosophicalhacker.com/post/how-we-misuse-mocks-for-android-tests/&#34;&gt;we shouldn&amp;rsquo;t mock types we don&amp;rsquo;t own&lt;/a&gt;, we wind up with dependencies for our objects that are expressed in the domain of that object, on the one hand, and an adapter layer, on the other. Again, here&amp;rsquo;s Freeman and Pryce:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we don’t want to mock an external API, how can we test the code that drives it? We will have used TDD to design interfaces for the services our objects need—which will be defined in terms of our objects’ domain, not the external library.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I write the ideal interface for my objects first in a test, I find that none of my classes ever really want a &lt;code&gt;Context&lt;/code&gt;. What my objects really want is a way to get localized strings or a way to get a persistent key-value store, things that we usually obtain indirectly through a &lt;code&gt;Context&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When I pass in an object that clearly describes that object&amp;rsquo;s role with respect to the object being tested instead of passing in a &lt;code&gt;Context&lt;/code&gt;, it makes it easier for me to understand my class.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example. Let&amp;rsquo;s say you need to implement the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Show a “rate dialog” to a user if they’ve used the app three times. The user can opt to rate the app, request to be reminded to rate the app, or decline to rate the app. If the user opts to rate the app, take them to the google play store and don’t show the rate dialog again. If the user opts to be reminded to rate the app, reshow the dialog after three days have passed. If the user declines to rate the app, never show the dialog again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This functionality might make us a little nervous, so we let &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;fear drive us to write a test first&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@RunWith&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;MockitoJUnitRunner&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AppRaterPresenterTests&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Mock&lt;/span&gt; AskAppRateView askAppRateView&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Mock&lt;/span&gt; AppUsageStore appUsageStore&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;showsRateDialogIfUsedThreeTimes&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  

    AskAppRatePresenter askAppRatePresenter &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; AskAppRatePresenter&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;appUsageStore&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    when&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;appUsageStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getNumberOfUsages&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;thenReturn&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(3);&lt;/span&gt;

    askAppRatePresenter&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onAttach&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;askAppRateView&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    verify&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;askAppRateView&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayAsk&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When I&amp;rsquo;m writing this test and designing my ideal interface for &lt;code&gt;AskAppRatePresenter&lt;/code&gt;, I&amp;rsquo;m &lt;em&gt;not&lt;/em&gt; thinking about &lt;em&gt;how&lt;/em&gt; the number of app usages are stored. They could be stored through &lt;code&gt;SharedPreferences&lt;/code&gt; or through a database or through realm or&amp;hellip; Because of this, I don&amp;rsquo;t make the &lt;code&gt;AskAppRatePresenter&lt;/code&gt; ask for a &lt;code&gt;Context&lt;/code&gt;. All I really care about is that the &lt;code&gt;AskAppRatePresenter&lt;/code&gt; has a way of getting the number of times the app has been used.&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This actually makes it easier for me to read the code later. If I see that a &lt;code&gt;Context&lt;/code&gt; is being injected into an object, I don&amp;rsquo;t really have any strong idea what it might be used for. Its a god. It could be used for any number of things. However, if I see that a &lt;code&gt;AppUsageStore&lt;/code&gt; is being passed in, then I&amp;rsquo;ll be much further towards understanding what the &lt;code&gt;AskAppRatePresenter&lt;/code&gt; does.&lt;sup&gt;5&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-i-kill-context&#34;&gt;How I Kill Context&lt;/h3&gt;

&lt;p&gt;Once we have the test written and failing, we can start to implement what we need to make it pass. Obviously, we&amp;rsquo;ll need a &lt;code&gt;Context&lt;/code&gt; in the implementation, but that can be a detail that the &lt;code&gt;AskAppRatePresenter&lt;/code&gt; doesn&amp;rsquo;t know about. There are two pretty obvious ways of doing this. One is to use a &lt;code&gt;Context&lt;/code&gt; passed into the constructor to get the &lt;code&gt;SharedPreferences&lt;/code&gt; that stores the info we retrieve from a &lt;code&gt;AppUsageStore&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SharedPreferencesAppUsageStore&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;implements&lt;/span&gt; AppUsageStore &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; SharedPreferences sharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    SharedPreferencesAppUsageStore&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Context context&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      sharedPreferences &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSharedPreferences&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;usage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Context&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;MODE_PRIVATE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;getNumberOfUsages&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; sharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;numusages&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The other way is to make the &lt;code&gt;Activity&lt;/code&gt; that hosts the presenter implement the &lt;code&gt;AppUsageStore&lt;/code&gt; interface and pass a reference to the &lt;code&gt;Activity&lt;/code&gt; into &lt;code&gt;AskAppRatePresenter&lt;/code&gt;&amp;rsquo;s constructor:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MainActivity&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Activity &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;implements&lt;/span&gt; AppUsageStore&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; AskAppRateView &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Bundle savedInstanceState&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
      AskAppRatePresenter askAppRatePresenter &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; AskAppRatePresenter&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
      askAppRatePresenter&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onAttach&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;getNumberOfUsages&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; getSharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;usage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Context&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;MODE_PRIVATE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
          &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;usage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, the general recipe for killing a &lt;code&gt;Context&lt;/code&gt; &amp;ndash; or other gods in general &amp;ndash; is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an interface that represents what your class really wants from a &lt;code&gt;Context&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a class that implements this interface; that class may already be a &lt;code&gt;Context&lt;/code&gt; (e.g., an &lt;code&gt;Activity&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Inject that class into your class.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you follow the above recipe consistently, none of your interesting code will actually interact with a &lt;code&gt;Context&lt;/code&gt;. That&amp;rsquo;ll all happen in an adapter layer. When you get to this point, you&amp;rsquo;ll be able to do work on your interesting code without having any gods interfere with your ability to understand your code.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Context&lt;/code&gt; is a god object. We all know that &lt;a href=&#34;https://en.wikipedia.org/wiki/God_object&#34;&gt;god objects are an anti-pattern&lt;/a&gt;, so it might seem like &lt;code&gt;Context&lt;/code&gt; was a mistake. But that&amp;rsquo;s not obvious to me. Here&amp;rsquo;s why. First, as I pointed out in &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/&#34;&gt;my last post&lt;/a&gt;, performance was a huge concern in the early days of Android. Neat abstractions are a computational luxury that may not have been affordable at the time. Second, according to Diane Hackborne, app components are most accurately described as specific interactions with the Android OS. These aren&amp;rsquo;t your typical objects because they are instantiated by the framework and they are the entry point to a large portion of the Android SDK. These two circumstances suggest that making context a god may not have been a bad choice.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Steve Freeman and Nat Pryce, &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;, 141.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid., 121-122&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Interestingly, through doing TDD, we&amp;rsquo;ve stumbled into code that follows &lt;a href=&#34;https://en.wikipedia.org/wiki/Interface_segregation_principle&#34;&gt;the interface segregation principle&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This suggests that there&amp;rsquo;s an inverse relationship between the complexity of an injected class and ease with which we can understand the class being injected. In other words, the more complicated a class&amp;rsquo;s dependencies are, the harder it is to understand the class itself.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Why I Avoid Singletons for Android Data Loading</title>
      <link>https://www.philosophicalhacker.com/post/against-singletons-for-android-data-loading/</link>
      <pubDate>Sat, 04 Feb 2017 13:20:35 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/against-singletons-for-android-data-loading/</guid>
      <description>

&lt;p&gt;Imagine for a moment that there&amp;rsquo;s an annoying fly buzzing around your guests at a BBQ you&amp;rsquo;re hosting. You and your guests swat at it a few times, but no one manages to nail the sucker. You run into the house to grab a fly swatter, but you find that even if you wait for the fly to settle down somewhere, you can&amp;rsquo;t quite smash it.&lt;/p&gt;

&lt;p&gt;Frustrated and desperate, you decide to evacuate the party (and the state), get your hands on a nuke, and nuke the fly along with your backyard and neighborhood. Watching the mushroom cloud form from your fallout shelter, you raise glasses with your guests and say, &amp;ldquo;we got&amp;rsquo;em boys. Good work.&amp;rdquo;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Obviously, this is an absurd story. I&amp;rsquo;m telling this brief absurd story because there are parallels between singletons as a data loading solution and nukes as a fly swatter. Singletons for data loading, like nukes, are hard to test, leave a mess behind them, and are overkill. These parallels are the reasons that I try to avoid using singletons for data loading on Android. That&amp;rsquo;s what this post is about.&lt;/p&gt;

&lt;h3 id=&#34;the-fly-data-loading-in-activities&#34;&gt;The Fly: Data Loading in Activities&lt;/h3&gt;

&lt;p&gt;Before I dive into the reasons I try to avoid singletons for data loading in Activities, I want to clearly state the problem for which I think singletons are poorly suited.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the problem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Activity&lt;/code&gt;s are destroyed and re-created on configuration changes.&lt;/li&gt;
&lt;li&gt;If we&amp;rsquo;ve performed an expensive operation to get the data displayed by that &lt;code&gt;Activity&lt;/code&gt;, we&amp;rsquo;ll want a way for the results of long-running operations to be cached across orientation changes.&lt;/li&gt;
&lt;li&gt;If we need to perform an expensive operation to get data, the results of this operation must be held if there&amp;rsquo;s a configuration change while the operation is being performed and delivered once the &lt;code&gt;Activity&lt;/code&gt; has been re-created after the configuration change.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think singletons are a &lt;em&gt;sub-optimal&lt;/em&gt; solution for this specific problem. This is not a post about why singletons are bad, full stop. Let&amp;rsquo;s move on to why I think this.&lt;/p&gt;

&lt;h3 id=&#34;hard-to-test&#34;&gt;Hard to Test&lt;/h3&gt;

&lt;p&gt;Fortunately, nukes are hard to test. You&amp;rsquo;ve got to find a large area that you can pollute with radiation, and, depending on your place in the world order, you need to be prepared to handle varying degrees of fallout from the international community.&lt;/p&gt;

&lt;p&gt;Unfortunately, singletons are also hard to test, and this counts as one strike against them as a data loading solution in my mind. Others have already noted in detail why testing with singletons is hard,&lt;sup&gt;1&lt;/sup&gt; but let&amp;rsquo;s look at a brief example to see why testing with singletons is hard.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you&amp;rsquo;re tasked with implementing a screen that loads data from a database like the explore sessions screen from the google I/O app:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/session-data-ss.png&#34; alt=&#34;Session list&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Because the fairly complicated logic governing whether the list of sessions should be preceded by various preference cards &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;scares you a little&lt;/a&gt;, you decide to write tests for this screen. Since you know &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-we-should-stop-putting-logic-in-activities/&#34;&gt;you&amp;rsquo;re not going to have an easy time testing logic in an &lt;code&gt;Activity&lt;/code&gt;&lt;/a&gt;, you move the logic to a presenter:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SessionsPresenter&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;present&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;shouldShowSessionNotificationsCard&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      sessionsView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;showSessionNotificationsCard&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;shouldShowConferenceMessagesCard&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      sessionsView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;showConferenceMessagesCard&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    SessionsStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;      &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;loadSessions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SessionsStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LoadCompleteListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onLoadComplete&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Session&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sessions&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessions&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;            sessionsView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;showNoSessions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;          &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;            sessionsView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;showSessions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessions&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;          &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;      
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the first highlighted line, we&amp;rsquo;re accessing a singleton to load the sessions. In the following highlighted lines, we either show the sessions or something indicating that there are no sessions at this time.&lt;/p&gt;

&lt;p&gt;The use of a singleton in this code makes this presenter difficult to test. When we&amp;rsquo;re writing a test for &lt;code&gt;SessionsPresenter&lt;/code&gt;, we need to be able to swap out the implementation of &lt;code&gt;SessionsStore&lt;/code&gt; with stubs that will return canned responses so that we can execute each branch of the if-statement highlighted above. This is not easy with a singleton in place.&lt;/p&gt;

&lt;p&gt;Getting around this problem forces us to create additional methods that are only used by the tests. For example, to test the above code, we&amp;rsquo;d need to add &lt;code&gt;SessionStore.setTestInstance&lt;/code&gt; and set the test instance with a stub during our unit test:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SessionsPresenterTests&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;showsNoSessionsViewWhenNoSessions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;    
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
    SessionsStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setTestInstance&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SessionsStore&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;loadSessions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionsStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LoadCompleteListener&lt;/span&gt; listener&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        listener&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onLoadComplete&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Collections&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;emptyList&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we need to change the API of the SUT &lt;em&gt;solely&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; for the purpose of testing, our tests are telling us there&amp;rsquo;s a problem with our design.&lt;/p&gt;

&lt;p&gt;Even with these added methods, however, we lose the ability to speed up our tests by running them in parallel.&lt;sup&gt;3&lt;/sup&gt; The likelihood that tests are run regularly is related to how long it takes to run them. Tests are often more likely to be useful the more often they are run, so placing an uneeded limit on how quickly our tests can run is not ideal.&lt;/p&gt;

&lt;p&gt;At this point, some readers may point out that these problems are alleviated if we inject the singleton through the constructor and if we keep our &lt;code&gt;Activity&lt;/code&gt; as a dumb view that isn&amp;rsquo;t scary enough to test. The code for this suggestion might look something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SessionsActivity&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Activity &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Bundle bundle&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;bundle&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SessionsPresenter&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;present&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This does alleviate the testing problems at the unit level. However, if we want to stub out what gets returned by the singleton &lt;code&gt;SessionStore&lt;/code&gt; for UI tests, we&amp;rsquo;ll still have to add a &lt;code&gt;SessionStore.setTestInstance&lt;/code&gt; method. Again, modifying the API of our classes for testing purposes is smelly.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using a &lt;code&gt;@Singleton&lt;/code&gt;-scoped dependency that you inject with dagger, then we can facilitate UI testing without adding a &lt;code&gt;setTestInstance&lt;/code&gt; method. This is the best version of the idea of using singletons for loading data in &lt;code&gt;Activity&lt;/code&gt;s. Even if I didn&amp;rsquo;t mind the fact that including dagger was a high price to pay for doing any data loading in an Android app, I still wouldn&amp;rsquo;t ever feel comfortable using &lt;code&gt;@Singleton&lt;/code&gt;-scoped dependencies for data loading for the following reasons.&lt;/p&gt;

&lt;h3 id=&#34;leaves-a-mess-behind-them&#34;&gt;Leaves a mess behind them&lt;/h3&gt;

&lt;p&gt;Data owned by your singleton will live &lt;em&gt;for the entire process&lt;/em&gt;, unless you do something to clean it up. We&amp;rsquo;re often worried about memory on Android devices. &lt;em&gt;Even if our app performs fairly well on devices with low-memory&lt;/em&gt;, irresponsible use of memory can lead to a sort of tragedy of the commons, where the user experience suffers overall.&lt;/p&gt;

&lt;p&gt;Chet Haase in &lt;a href=&#34;https://medium.com/google-developers/developing-for-android-i-understanding-the-mobile-context-fd2351b131f8#.t0wde59q7&#34;&gt;&lt;em&gt;Developing for Android&lt;/em&gt;&lt;/a&gt; captures this well:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if any of these apps consume more memory than they need to, then there will be less system memory left over for the others. When that happens, the system will evict app processes (shutting them down), forcing the user into a situation where apps are constantly re-launching when the user switches to them because they cannot stay present in the background due to memory pressure.&lt;/p&gt;

&lt;p&gt;So overall: use as little memory as you can, because the entire system suffers if you don’t.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If our apps are going to be good citizens on user&amp;rsquo;s devices, we ought to clean up the data owned by our singleton once we&amp;rsquo;re done using it. Singletons for loading data, along with the memory concerns on Android, place an extra burden on us as programmers. Strike two for singletons.&lt;/p&gt;

&lt;p&gt;I can imagine cases and apps where the memory issue isn&amp;rsquo;t a big deal. I work at &lt;a href=&#34;http://www.unikey.com/&#34;&gt;a company where the minimum API level for our app is 20&lt;/a&gt;, so we definitely have less performance concerns than other companies. In cases where the data held by singletons really isn&amp;rsquo;t cause for concern, I could just never clean up the data held by the singleton, which definitely makes working with them easier. Still, there&amp;rsquo;s another reason I try to avoid singleton&amp;rsquo;s for data loading.&lt;/p&gt;

&lt;h3 id=&#34;overkill&#34;&gt;Overkill&lt;/h3&gt;

&lt;p&gt;Nuking a fly is absurd because its overkill. You just want to kill the fly. You don&amp;rsquo;t mean to obliterate the 3 mile radius around the fly.&lt;/p&gt;

&lt;p&gt;Similarly, singletons are overkill. We don&amp;rsquo;t really need the data loaded for our &lt;code&gt;Activity&lt;/code&gt; to live for the entire process. This is precisely why we usually have to clean up some of the data when the &lt;code&gt;Activity&lt;/code&gt; is done using it.&lt;/p&gt;

&lt;p&gt;Often what we really want is data that is cached across configuration changes, but the fact that the cached data within a singleton lives for the entire process makes implementing our retrieval of that data more complicated. Let me explain why.&lt;/p&gt;

&lt;p&gt;Suppose I want to want to send two emails with two different attachments. Both times I go to attach an email, the same &lt;em&gt;type&lt;/em&gt; of Activity will be launched. Suppose this &lt;code&gt;Activity&lt;/code&gt; gets its data from a singleton-based data loader. If both of these &lt;code&gt;Activity&lt;/code&gt;s try to grab data from the Singleton, the user can wind up with stale data the second time they try to attach an email because the first &lt;code&gt;Activity&lt;/code&gt; has already populated the cache with dat that was fresh at the time the first &lt;code&gt;Activity&lt;/code&gt; asked for it.&lt;/p&gt;

&lt;p&gt;Of course, these are solvable problems. However, I think it&amp;rsquo;d be better if we didn&amp;rsquo;t have these problems in the first place. It turns out there&amp;rsquo;s already a solution for data loading that doesn&amp;rsquo;t have any of these problems/complications.&lt;/p&gt;

&lt;h3 id=&#34;loaders-a-professional-fly-swatter&#34;&gt;Loaders: A Professional Fly Swatter&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Loader&lt;/code&gt;s are designed for this exact problem. They don&amp;rsquo;t &amp;ldquo;overkill&amp;rdquo; by giving us data that lasts the entire process instead of what we need: data that survives configuration changes. Because of this, there&amp;rsquo;s no need for us to worry about stale data when multiple &lt;code&gt;Activitiy&lt;/code&gt;s need the same data. Moreover, we don&amp;rsquo;t have to worry about cleaning up data once its no long used. Finally, if we use them sensibly, &lt;code&gt;Loader&lt;/code&gt;s don&amp;rsquo;t pose any special challenges to testing.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not denying that it can be difficult to get a handle on how &lt;code&gt;Loader&lt;/code&gt;s work. Nor am I saying that their API is a joy to work with. However, I think trudging through the docs and/or wrapping the Loader API in something more usable (e.g., &lt;a href=&#34;https://www.philosophicalhacker.com/post/rxloader-boilerplate-free-data-loading-with-loaders-and-rxjava/&#34;&gt;RxLoader&lt;/a&gt;) is the best option we have.&lt;/p&gt;

&lt;p&gt;The alternative is to use singletons for data loading in our &lt;code&gt;Activity&lt;/code&gt;s, which, if you buy into my argument and analogy is silly for the same reason it&amp;rsquo;s silly to nuke a fly at a BBQ you&amp;rsquo;re hosting.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Misko Hevery, &amp;ldquo;father of AngularJS,&amp;rdquo; has a really nice explanation of the relationship between singletons and testing as a part of his testing guide &lt;a href=&#34;http://misko.hevery.com/code-reviewers-guide/flaw-brittle-global-state-singletons/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Soley&amp;rdquo; is emphasized because otherwise the statement might feel like a contradiction. I&amp;rsquo;ve been saying recently that tests force us to design better applications, so how can it be that there&amp;rsquo;s a problem if the tests make us change the API of the SUT? There&amp;rsquo;s no problem the if we change the API of our classes to support testing, as long as that change introduces flexibility that can be used both by the application &lt;em&gt;and&lt;/em&gt; by the tests. A &lt;code&gt;setTestInstance&lt;/code&gt; method, as the name implies, is only used by tests. This seems like a sensible way of resolving the contradiction, but honestly, I need to think about this more to be sure.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>TDD &gt; The Principle of Single Responsibility</title>
      <link>https://www.philosophicalhacker.com/post/tdd-is-greater-than-the-principle-of-single-responsibility/</link>
      <pubDate>Sat, 14 Jan 2017 10:54:43 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/tdd-is-greater-than-the-principle-of-single-responsibility/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of &lt;strong&gt;realizing grand conceptual structures&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fred Brooks, The Mythical Man-Month&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Grand structures &amp;ndash; whether they are conceptual, programmatic, or physical &amp;ndash; require strong foundations. This is true in two senses.&lt;/p&gt;

&lt;p&gt;In the first, obvious sense, strong foundations are required for a structure to withstand its own weight and the forces that want to knock it down. Structures without strong foundations often collapse.&lt;/p&gt;

&lt;p&gt;In the second, less obvious sense, there&amp;rsquo;s another kind of foundation that&amp;rsquo;s crucial to a structure&amp;rsquo;s integrity: the epistemic foundations that guide the architect as she lays the foundation and builds her structure, the architect&amp;rsquo;s first principles. These epistemic foundations are even more fundamental to the structure&amp;rsquo;s integrity than the foundation the structure actually sits upon. An architect that doesn&amp;rsquo;t understand the foundational principles of her craft builds bad foundations, which leads to structures that collapse.&lt;/p&gt;

&lt;p&gt;The principle of single responsibility is supposed to be this second kind of strong foundation for those of us that &amp;ldquo;build castles in the air.&amp;rdquo; Its a principle that&amp;rsquo;s supposed to help us build software with strong foundations, software that won&amp;rsquo;t topple under its own weight and under the weight of forces that want to knock it down.&lt;/p&gt;

&lt;p&gt;I think that TDD actually serves as a better foundation for designing robust software. The epigraph I opened this article with actually provides a nice preview of why I think this: building abstractions is a big part of building good software, but without these abstractions, the principle of responsibility isn&amp;rsquo;t very helpful in guiding me. I often need something that pushes me to discover and build abstractions in the first place, and TDD does a better job of this than the principle of single responsibility.&lt;/p&gt;

&lt;p&gt;In the rest of this post, I&amp;rsquo;ll unpack and attempt to justify that last statement.&lt;/p&gt;

&lt;h3 id=&#34;abstraction-and-the-psr&#34;&gt;Abstraction and the PSR&lt;/h3&gt;

&lt;p&gt;Imagine for a moment that Bill, another engineer shows you an app he&amp;rsquo;s working on. When you take a look at it, you notice that the app consists of a single class that &lt;em&gt;implements&lt;/em&gt; the entirety of your application. Until recently, if this happened to me, I would have immediately reached for the principle of single responsibility to explain what he did wrong.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Have you ever heard of the principle of single responsibility?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bill:&lt;/strong&gt; Yeah. Actually, that principle was guiding me as I wrote this class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Really? Well, what is this class&amp;rsquo; responsibility?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bill:&lt;/strong&gt; Well, this class is responsible for running the app. This class didn&amp;rsquo;t seem to violate the PSR because the class fits Bob Martin&amp;rsquo;s definition of a class that follows the PSR. He says that &amp;ldquo;a class should only have one reason to change.&amp;rdquo;&lt;sup&gt;1&lt;/sup&gt; That&amp;rsquo;s true of this class. There&amp;rsquo;s only one reason it&amp;rsquo;ll change: if the app needs to behave differently, we&amp;rsquo;ll have to change this class. Also, the class passed Steve Freeman and Nat Pryce&amp;rsquo;s test for whether a class follows the PSR: I can state the class&amp;rsquo;s responsibility without any and&amp;rsquo;s, or&amp;rsquo;s, or but&amp;rsquo;s.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This is an absurd conversation, but its an extreme case to demonstrate an important point: whether a class seems to satisfy the principle of single responsibility depends largely on whether we can &lt;em&gt;identify&lt;/em&gt; other responsibilities that our class is tackling. Bill&amp;rsquo;s position feels absurd because we, as experienced developers, can identify other non-trivial responsibilities that are handled by his God class.&lt;/p&gt;

&lt;p&gt;However, here&amp;rsquo;s the kicker: its not always obvious that a class is handling multiple responsibilities. Bob Martin even says this in his chapter on the principle of single responsibility:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The SRP is one of the simplest of the principles, and one of the hardest to get right. Con-
joining responsibilities is something that we do naturally. &lt;strong&gt;Finding&lt;/strong&gt; and separating those responsibilities from one another is much of what software design is really about.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we keep in mind that the act of &lt;em&gt;naming&lt;/em&gt; another responsibility is already the first step creating an abstraction,&lt;sup&gt;4&lt;/sup&gt; we see that Michael Feathers gives us more evidence that finding and separating responsibilities is not a trivial exercise:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;one pervasive problem in legacy code bases is that there often aren’t any layers of abstraction; the most important code in the system often sits intermingled with low-level API calls.&lt;sup&gt;5&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To say that there are no layers of abstraction is to say that the programmer has failed to identify and separate responsibilities. In this particular example, the programmer has failed to identify domain-related responsibilities as separate from the responsibility of talking to some library or framework via low-level API calls.&lt;sup&gt;6&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s one more piece of evidence that identifying responsibilities is not trivial. Again, I&amp;rsquo;m trading here on the idea that identifying responsibilities is the beginning of creating abstractions. Creating abstractions, in turn, is a part of creating a higher-level vocabulary with which to write your programs. Apparently, Kent Beck has said something like this recently:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Reading through my notes &amp;amp; saw this pretty quote: &amp;quot;You’re creating a vocabulary, not writing a program. Be a poet for a moment.&amp;quot; &lt;a href=&#34;https://twitter.com/KentBeck&#34;&gt;@KentBeck&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jessica (@encompassky) &lt;a href=&#34;https://twitter.com/encompassky/status/813931671116451841&#34;&gt;December 28, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;Think about how much careful thought, experience, and discovery goes into creating sensible vocabularies. David West has a great bit about this in his book &lt;em&gt;Object Thinking&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we discover new things, we invent (or borrow) new words to express our discovery. When we want to make critical distinctions between or among similar notions, we use specialized vocabularies. The use of special vocabularies is common in our professional lives because, as specialists, we need to become familiar with unique ideas and to make important distinctions that as laypersons we might not make.&lt;sup&gt;7&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we think of programming as naming responsibilities to create abstractions that make up a vocabulary, then the non-triviality of creating vocabularies in general has a direct bearing on the difficulty of identifying responsibilities while writing programs, which, if we take Kent Beck seriously, is just a particular kind of vocabulary construction.&lt;/p&gt;

&lt;p&gt;So, whether a class seems to satisfy the principle of single responsibility depends on whether we can identify other responsibilities a class might be tackling. This isn&amp;rsquo;t a trivial task and the PSR doesn&amp;rsquo;t do anything to aid us in accomplishing it.&lt;/p&gt;

&lt;h3 id=&#34;abstraction-and-tdd&#34;&gt;Abstraction and TDD&lt;/h3&gt;

&lt;p&gt;TDD, on the other hand, actually puts pressure on us to identify responsibilities that may be hidden in the object we&amp;rsquo;re trying to test. This happens for two reasons.&lt;/p&gt;

&lt;p&gt;One reason is that we can&amp;rsquo;t unit test a class at all if we won&amp;rsquo;t have a way of getting the object into the right state for a test and a way of verifying the object is in the correct state after we&amp;rsquo;ve exercised it. Often, doing this requires that we identify an object&amp;rsquo;s dependencies and interactions AS separate objects with separate responsibilities. Steve Freeman and Nat Pryce seem to say something like this without actually using the language of responsibility:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;…to construct an object for a unit test, we have to pass its dependencies to it, which means that we have to know what they are.&lt;sup&gt;8&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There&amp;rsquo;s another quotation that supports my point here, albeit in a less direct way. Freeman and Pryce say, &amp;ldquo;for a class to be easy to unit-test, the class must…be loosely coupled and &lt;strong&gt;highly cohesive&lt;/strong&gt; —in other words, well-designed.&amp;rdquo; Cohesion, in Bob Martin&amp;rsquo;s mind, is closely linked with the idea of a class&amp;rsquo; responsibility, so this quote is almost a way of saying that unit testable classes are likely to follow the PSR.&lt;sup&gt;9&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The second reason TDD helps us identify responsibilities is that a part of the TDD process is to eliminate duplication. Kent Beck actually has a nice summary of how this creates cohesion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The first feature goes in&amp;hellip;the second feature, a variation on the first, goes in. &lt;strong&gt;The duplication between the two features is put in one place, whereas the differences tend to go in different places (different methods or even different classes).&lt;/strong&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quotations from famous software engineers aside, if we think for a second about what would happen if Bill tried to unit test his God class, I think we&amp;rsquo;ll find some intuitive support for the idea that TDD exerts pressure to identify responsibilities.&lt;/p&gt;

&lt;p&gt;For example, his app likely displays data in a format that&amp;rsquo;s different from how its stored in the database. When writing a test to verify that his God object massages the data into a more presentable format correctly, he&amp;rsquo;ll see that the database needs to have specific data pre-loaded in order for the test to pass. He could solve this problem by creating a sandbox database and pre-loading it with specific data, but it would be &lt;em&gt;easier&lt;/em&gt; to unit test his class if he identifies &amp;ldquo;getting data from the database&amp;rdquo; as a separate responsibility, creates a class for it, and injects that dependency into his God class.&lt;/p&gt;

&lt;p&gt;Testing other pieces of functionality of his application will require the same process, which, theoretically, will involve more identifying and separating of responsibilities.&lt;sup&gt;11&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The PSR is supposed to serve as a foundational principle for helping us write good software. However, the PSR isn&amp;rsquo;t helpful if we fail to identify hidden responsibilities that our class may be assuming. Because identifying these responsibilities isn&amp;rsquo;t trivial and because the PSR does nothing to help us with this non-trivial task, the PSR alone isn&amp;rsquo;t very helpful.&lt;/p&gt;

&lt;p&gt;TDD actually does a better job at helping us identify responsibilities. A class won&amp;rsquo;t be easy to unit test unless we&amp;rsquo;ve identified and injected its dependencies, and to identify a dependency is to identify a responsibility. Eliminating duplication, moreover, forces us to identify and create abstractions to co-locate common functionality so that it can be reused, and to identify an abstraction is to identify a responsibility.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Robert Martin, &lt;em&gt;Agile Software Development: Principles, Patterns, and Practices&lt;/em&gt;, 110. Excerpt &lt;a href=&#34;https://drive.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/view&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Steve Freeman and Nat Pryce, &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;, 96-97.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Robert Martin, &lt;em&gt;Agile Software Development: Principles, Patterns, and Practices&lt;/em&gt;, 114. Excerpt &lt;a href=&#34;https://drive.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/view&#34;&gt;here&lt;/a&gt;. Emphasis mine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Michael Feathers, &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;, 350-352.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Perhaps this is why &amp;ldquo;naming things&amp;rdquo; is one of the two things that are hard about computer science, &lt;a href=&#34;https://martinfowler.com/bliki/TwoHardThings.html&#34;&gt;according to Phil Karlton&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I think that a part of the reason finding responsibilities can be difficult is because we have to think at a level of abstraction that is actually lower than the one we were using when we decided to create the class in the first place. When Bill created the &lt;code&gt;Application&lt;/code&gt; class, he did so because he thought, &amp;ldquo;I need a class that&amp;rsquo;ll run my application.&amp;rdquo; When he started writing database-related code in this class, he could continue to think &amp;ldquo;this code is just helping this class fulfill its responsibility of running the app,&amp;rdquo; and in a sense, he would be right, but he&amp;rsquo;d be thinking at the wrong level of abstraction. Dropping down a level, he&amp;rsquo;d see that his Application class displays UI &lt;em&gt;and&lt;/em&gt; talks to a database &lt;em&gt;and&lt;/em&gt;&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;David West, &lt;em&gt;Object Thinking&lt;/em&gt;, 143-144.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Steve Freeman and Nat Pryce, &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;, 43.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid., 103-104.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Robert Martin, &lt;em&gt;Agile Software Development: Principles, Patterns, and Practices&lt;/em&gt;, 109. Excerpt &lt;a href=&#34;https://drive.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/view&#34;&gt;here&lt;/a&gt;. Martin Actually sees the PSR as being first described using the language of cohesion. Personally, I prefer the vocabulary of cohesion to the PSR because a class can have cohesiveness in degrees. Somehow, the more gradient (vs. binary) way of thinking about class design along this dimension seems to fit better with the idea that identifying responsibilities is related to the level of abstraction we&amp;rsquo;re on when we&amp;rsquo;re thinking about a class, but my thoughts on this aren&amp;rsquo;t well formed enough to say more.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kent Beck, &lt;em&gt;TDD By Example&lt;/em&gt;, 195.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Technically, this doesn&amp;rsquo;t fit the definition of TDD because the tests are written last, but there is a real sense in which the tests are driving the re-design of Bill&amp;rsquo;s app. This is why I say TDD is actually helping him design better classes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>