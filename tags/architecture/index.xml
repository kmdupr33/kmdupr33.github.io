<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Philosophical Hacker</title>
    <link>https://www.philosophicalhacker.com/tags/architecture/</link>
    <description>Recent content in Architecture on Philosophical Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 May 2017 18:48:58 -0400</lastBuildDate>
    
	<atom:link href="https://www.philosophicalhacker.com/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Abuse Kotlin Extension Functions</title>
      <link>https://www.philosophicalhacker.com/post/how-to-abuse-kotlin-extension-functions/</link>
      <pubDate>Fri, 26 May 2017 18:48:58 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/how-to-abuse-kotlin-extension-functions/</guid>
      <description>I&amp;rsquo;ve got a &amp;ldquo;sweet tooth,&amp;rdquo; which, in my case, is just a euphemism for me saying that I&amp;rsquo;m addicted to sugar. I&amp;rsquo;m young now, but I know that this addiction won&amp;rsquo;t end well once my metabolism slows down, so I try go to the gym.
Unfortunately, when I leave the gym, I often think to myself, &amp;ldquo;I just worked out, so I can snag that Oreo McFlurry I&amp;rsquo;ve been craving all day.</description>
    </item>
    
    <item>
      <title>Not Needing Dagger is a Code Smell (Pt. 1)</title>
      <link>https://www.philosophicalhacker.com/post/not-needing-dagger-is-a-smell-pt-1/</link>
      <pubDate>Fri, 12 May 2017 08:21:30 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/not-needing-dagger-is-a-smell-pt-1/</guid>
      <description>A code smell is a surface indication that usually corresponds to a deeper problem in the system&amp;hellip;smells don&amp;rsquo;t always indicate a problem&amp;hellip;You have to look deeper to see if there is an underlying problem there.
&amp;ndash;Martin Fowler
 Some people don&amp;rsquo;t think Dagger is very useful. I&amp;rsquo;m a bit suspicious of these people. An application that doesn&amp;rsquo;t need Dagger smells. It suggests that there might be something wrong with the application&amp;rsquo;s architecture.</description>
    </item>
    
    <item>
      <title>Test Driving away Coupling in Activities</title>
      <link>https://www.philosophicalhacker.com/post/test-driving-away-coupling-in-activities/</link>
      <pubDate>Sun, 09 Apr 2017 15:33:20 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/test-driving-away-coupling-in-activities/</guid>
      <description>Activitys and Fragments, perhaps by some strange historical accidents, have been seen as the optimal building blocks upon which we can build our Android applications for much of the time that Android has been around. Let&amp;rsquo;s call this idea &amp;ndash; the idea that Activitys and Fragments are the best building blocks for our apps &amp;ndash; &amp;ldquo;android-centric&amp;rdquo; architecture.
This series of posts is about the connection between the testability of android-centric architecture and the other problems that are now leading Android developers to reject it; it&amp;rsquo;s about how our unit tests are trying to tell us that Activitys and Fragments &amp;ndash; like the cracking bricks in the above image &amp;ndash; don&amp;rsquo;t make the best building blocks for our apps because they tempt us to write code with tight coupling and low cohesion.</description>
    </item>
    
    <item>
      <title>What Unit Tests are Trying to Tell us About Activities Pt 2</title>
      <link>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt-2/</link>
      <pubDate>Fri, 10 Mar 2017 22:32:02 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt-2/</guid>
      <description>Activitys and Fragments, perhaps by some strange historical accidents, have been seen as the optimal building blocks upon which we can build our Android applications for much of the time that Android has been around. Let&amp;rsquo;s call this idea &amp;ndash; the idea that Activitys and Fragments are the best building blocks for our apps &amp;ndash; &amp;ldquo;android-centric&amp;rdquo; architecture.
This series of posts is about the connection between the testability of android-centric architecture and the other problems that are now leading Android developers to reject it; it&amp;rsquo;s about how our unit tests are trying to tell us that Activitys and Fragments don&amp;rsquo;t make the best building blocks for our apps because they force us to write code with tight coupling and low cohesion.</description>
    </item>
    
    <item>
      <title>What Unit Tests are Trying to Tell us about Activities: Pt. 1</title>
      <link>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/</link>
      <pubDate>Sat, 25 Feb 2017 09:33:51 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/</guid>
      <description>Activitys and Fragments, perhaps by some strange historical accidents, have been seen as the optimal building blocks upon which we can build our Android applications for much of the time that Android has been around. Let&amp;rsquo;s call this idea &amp;ndash; the idea that Activitys and Fragments are the best building blocks for our apps &amp;ndash; &amp;ldquo;android-centric&amp;rdquo; architecture.
This series of posts is about the connection between the testability of android-centric architecture and the other problems that are now leading Android developers to reject it; it&amp;rsquo;s about how our unit tests are trying to tell us that Activitys and Fragments don&amp;rsquo;t make the best building blocks for our apps because they force us to write code with tight coupling and low cohesion.</description>
    </item>
    
    <item>
      <title>Towards Godless Android Development: How and Why I Kill God Objects</title>
      <link>https://www.philosophicalhacker.com/post/towards-godless-android-development-how-and-why-i-kill-god-objects/</link>
      <pubDate>Sat, 18 Feb 2017 09:27:03 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/towards-godless-android-development-how-and-why-i-kill-god-objects/</guid>
      <description>Korean Translation by Jihyok KIM
 God is dead&amp;hellip;and also Context is dead.
&amp;ndash;Friedrich Nietszche (probably)
 Godlessness in the context of OO-programming &amp;ndash; unlike godlessness in a broader context &amp;ndash; is uncontroversially a good thing. Some may want gods in school or gods in government, but &amp;ndash; all other things being equal &amp;ndash; no one really wants gods in their programs.
In android development specifically, we have a god that we all know and love to hate: Context.</description>
    </item>
    
    <item>
      <title>Why I Avoid Singletons for Android Data Loading</title>
      <link>https://www.philosophicalhacker.com/post/against-singletons-for-android-data-loading/</link>
      <pubDate>Sat, 04 Feb 2017 13:20:35 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/against-singletons-for-android-data-loading/</guid>
      <description>Imagine for a moment that there&amp;rsquo;s an annoying fly buzzing around your guests at a BBQ you&amp;rsquo;re hosting. You and your guests swat at it a few times, but no one manages to nail the sucker. You run into the house to grab a fly swatter, but you find that even if you wait for the fly to settle down somewhere, you can&amp;rsquo;t quite smash it.
Frustrated and desperate, you decide to evacuate the party (and the state), get your hands on a nuke, and nuke the fly along with your backyard and neighborhood.</description>
    </item>
    
    <item>
      <title>TDD &gt; The Principle of Single Responsibility</title>
      <link>https://www.philosophicalhacker.com/post/tdd-is-greater-than-the-principle-of-single-responsibility/</link>
      <pubDate>Sat, 14 Jan 2017 10:54:43 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/tdd-is-greater-than-the-principle-of-single-responsibility/</guid>
      <description>The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures&amp;hellip;
Fred Brooks, The Mythical Man-Month
 Grand structures &amp;ndash; whether they are conceptual, programmatic, or physical &amp;ndash; require strong foundations. This is true in two senses.</description>
    </item>
    
  </channel>
</rss>