<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Philosophical Hacker</title>
    <link>https://www.philosophicalhacker.com/tags/testing/index.xml</link>
    <description>Recent content in Testing on Philosophical Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://www.philosophicalhacker.com/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting up a Jenkins Pipeline for Android Testing</title>
      <link>https://www.philosophicalhacker.com/post/setting-up-a-jenkins-pipeline-for-android-testing/</link>
      <pubDate>Fri, 28 Apr 2017 17:39:22 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/setting-up-a-jenkins-pipeline-for-android-testing/</guid>
      <description>

&lt;p&gt;Some tests are fast. You can run 1000s of them in seconds. These are the tests that are the heart and soul of TDD, so you run them every chance you get.&lt;/p&gt;

&lt;p&gt;There are other tests that aren&amp;rsquo;t so fast. Because they&amp;rsquo;re slow, you don&amp;rsquo;t want to run them often. You&amp;rsquo;ve got better things to do than to sit and wait for test results to come through.&lt;/p&gt;

&lt;p&gt;Unfortunately, the less you run your slow tests, the less valuable they are. By moving your slow test runs off your machine and running them every time you make a change, you can make sure you&amp;rsquo;re getting the most value out of your slow tests.&lt;/p&gt;

&lt;p&gt;This is one reason why I think CI is so important. At every job I&amp;rsquo;ve had, setting up a CI is one of the first things I&amp;rsquo;ve done, and now that Jenkins has gotten a little more sophisticated with its &amp;ldquo;Pipelines,&amp;rdquo; I thought I should document how I set things up somewhere.&lt;/p&gt;

&lt;p&gt;My hope is that if my future self has a different job that requires him to setup Jenkins for Android Testing, he&amp;rsquo;ll find this useful. If your current self needs to setup Jenkins so that you can maximize the value of your slow tests, I hope you find this useful too.&lt;/p&gt;

&lt;h3 id=&#34;the-jenkinsfile&#34;&gt;The Jenkinsfile&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 1 &lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;node&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;android&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 2 &lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    step&lt;span style=&#34;color: #666666&#34;&gt;([&lt;/span&gt;$class&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;StashNotifier&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 3 &lt;/span&gt;    checkout scm
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 4 &lt;/span&gt;    &lt;span style=&#34;color: #0000FF&#34;&gt;stage&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Build&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 5 &lt;/span&gt;      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 6 &lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        sh &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;./gradlew --refresh-dependencies clean assemble&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 7 &lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        lock&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;emulator&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 8 &lt;/span&gt;          sh &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;./gradlew connectedCheck&amp;#39;&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt; 9 &lt;/span&gt;        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;10 &lt;/span&gt;        currentBuild&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;SUCCESS&amp;#39;&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;11 &lt;/span&gt;      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;error&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;12 &lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        slackSend &lt;span style=&#34;color: #A0A000&#34;&gt;channel:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;#build-failures&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #A0A000&#34;&gt;color:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;bad&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #A0A000&#34;&gt;message:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;This build is broken ${env.BUILD_URL}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #A0A000&#34;&gt;token:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;XXXXXXXXXXX&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;13 &lt;/span&gt;        currentBuild&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;FAILURE&amp;#39;&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;14 &lt;/span&gt;      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;15 &lt;/span&gt;        junit &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;**/test-results/**/*.xml&amp;#39;&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;16 &lt;/span&gt;      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;17 &lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;18 &lt;/span&gt;    stage&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Archive&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;19 &lt;/span&gt;      archiveArtifacts &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;app/build/outputs/apk/*&amp;#39;&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;20 &lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;21 &lt;/span&gt;    step&lt;span style=&#34;color: #666666&#34;&gt;([&lt;/span&gt;$class&lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;StashNotifier&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;22 &lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;rsquo;s a couple of lines worth highlighting here.&lt;/p&gt;

&lt;h4 id=&#34;1-node-android&#34;&gt;1 &lt;code&gt;node(&#39;android&#39;)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;A node is a computer that can execute a Jenkins job. A single Jenkins &amp;ldquo;master&amp;rdquo; server can queue up jobs for many nodes, so you can run as many jobs as you have machines simultaneously.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s interesting about this line is the parameter that &lt;code&gt;node()&lt;/code&gt; takes. The value of this parameter is a &amp;ldquo;label,&amp;rdquo; which is a way of telling Jenkins which types of nodes can run this job. With this line, I&amp;rsquo;m saying: &amp;ldquo;Only run this job on nodes that have the label &amp;lsquo;android&amp;rsquo;.&amp;rdquo; When managing your nodes through the Jenkins UI, you can specify which labels your node has, thereby limiting the execution of your jobs to particular nodes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/changing-node-labels.png&#34; alt=&#34;Setting labels on a node&#34; /&gt;&lt;/p&gt;

&lt;p&gt;OSX machines are more expensive than the linux machines that can run our Android builds, so we currently use labels to ensure that android build jobs aren&amp;rsquo;t tying up the (more expensive) OSX machines.&lt;/p&gt;

&lt;h4 id=&#34;2-step-class-stashnotifier&#34;&gt;2 &lt;code&gt;step([$class: &#39;StashNotifier&#39;])&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Prs can be gated by your Jenkins build. In other words, you can set things up so that no one can merge a pr with failing tests or lint violations. This pr gating is made possible by this step and the &lt;a href=&#34;https://github.com/jenkinsci/stashnotifier-plugin&#34;&gt;Stash Notifier plugin that exposes it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If someone can merge broken code into master in spite of failing tests, those tests aren&amp;rsquo;t as valuable as they could be.&lt;/p&gt;

&lt;p&gt;Flaky tests are made especially painful by pr gating based on test results. I think this is a good thing, as flaky tests can be a subtle poison to your testing suite. By making their poison more explicitly felt through pr gates, we&amp;rsquo;ll be more motivated to fix them or delete them. Better that, then for people to start ignoring test results.&lt;/p&gt;

&lt;h4 id=&#34;6-sh-gradlew-refresh-dependencies-clean-assemble&#34;&gt;6 &lt;code&gt;sh &#39;./gradlew --refresh-dependencies clean assemble&#39;&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;One way of thinking about a CI server is that it continuously runs what we might call &amp;ldquo;the integration test,&amp;rdquo; which we might express as follows:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Given &lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;a working code base&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;When &lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;new code is merged in&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;Then &lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;we still have a working code base&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;ldquo;working code base&amp;rdquo; here is fleshed out by the specific steps in a Jenkinsfile, but is often defined as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A working code base builds from a &lt;em&gt;fresh checkout&lt;/em&gt; and all the tests pass.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &amp;ldquo;fresh checkout&amp;rdquo; bit of the definition is often necessary to avoid the proverbial &amp;ldquo;but it builds on my machine&amp;rdquo; excuse.&lt;/p&gt;

&lt;p&gt;Since developers and their computers are not invincible, a particular developer&amp;rsquo;s machine is not the source of truth for whether a build is broken. The CI server should be that source of truth, as it tells us whether its possible for a new developer to build a project on a new machine.&lt;/p&gt;

&lt;p&gt;This is why &lt;code&gt;--refresh-dependencies&lt;/code&gt; and &lt;code&gt;clean&lt;/code&gt; are included in this line. &lt;code&gt;--refresh-dependencies&lt;/code&gt; is particularly important if you&amp;rsquo;re using SNAPSHOT dependencies, as I&amp;rsquo;ve run into cases where the build appears to be fine but is actually broken, and I couldn&amp;rsquo;t tell because the CI server was using a cached SNAPSHOT dependency.&lt;/p&gt;

&lt;h4 id=&#34;7-lock-emulator&#34;&gt;7 &lt;code&gt;lock(&#39;emulator&#39;) {}&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Suppose you have a quad-core node that builds Android jobs. Nodes often have an executor for each of their cores. This allows Jenkins to take full advantage of multi-core machines, as it can run a job for each core on a machine. A quad-core node, for example, could run 4 jobs simultaneously.&lt;/p&gt;

&lt;p&gt;Now, suppose that two jobs for two branches get kicked off simultaneously. If there&amp;rsquo;s only one emulator available on a node, you could have a problem: one test run could try to access the emulator while the other is using it, thereby causing failures. Locks solve this problem.&lt;/p&gt;

&lt;p&gt;This line of code grabs a lock on a resource labeled as &amp;ldquo;emulator,&amp;rdquo; and retains that lock until the code running inside its block has been completed. Any other jobs that try to run tests against the emulator while the lock is held by a particular job will have to wait, which ensures that you can take full advantage of the parallelism gained by adding additional nodes and executors.&lt;/p&gt;

&lt;h4 id=&#34;12-slacksend-channel-failures-message-broken-build-env-build-url&#34;&gt;12 &lt;code&gt;slackSend channel: &#39;#failures&#39;, message: &amp;quot;Broken build ${env.BUILD_URL}&amp;quot;&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;If a build on the CI passes, great. That should be the status quo. With all the noise in our emails and slack channels, we don&amp;rsquo;t need a notification that says, in effect, &amp;ldquo;everything is &lt;em&gt;still&lt;/em&gt; working just fine.&amp;rdquo; Any source of information that provides us with useless information MOST of the time seems likely to be a source of information that we&amp;rsquo;ll pay less attention to over time.&lt;/p&gt;

&lt;p&gt;This is why I only post build failures to a slack channel. A broken build is a big deal. Ideally, a developer will investigate a broken build immediately.&lt;/p&gt;

&lt;p&gt;When broken builds aren&amp;rsquo;t investigated immediately, we lose the value of our tests and CI, which are supposed to give us feedback on our code while the changes are still fresh in our mind. It&amp;rsquo;s much easier to fix broken code immediately than it is to fix it 3+ days later when the changes we&amp;rsquo;ve made aren&amp;rsquo;t fresh in our mind.&lt;/p&gt;

&lt;p&gt;All that to say, a slack notification seems appropriate for build failures.&lt;/p&gt;

&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ll conclude with an exhortation for my future self and for all the selves engaged in the noble struggle of Android dev:&lt;/p&gt;

&lt;p&gt;Slugging around in the Jenkins web UI may not be as interesting as writing an elegant Observable cascade for loading data in your &lt;code&gt;Activity&lt;/code&gt;, but it&amp;rsquo;s necessary if you&amp;rsquo;re going to maximize the value of the tests you&amp;rsquo;ve already written. Take solace in the fact that you&amp;rsquo;re efforts are making your team more effective.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Actually, you can run more jobs than this. Each node can have multiple executors, and the folks at Jenkins recommend that you create an executor for each core on the node.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Android Testing Calisthenics: Domain Objects</title>
      <link>https://www.philosophicalhacker.com/post/android-testing-calisthenics-domain-objects/</link>
      <pubDate>Fri, 14 Apr 2017 23:17:38 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/android-testing-calisthenics-domain-objects/</guid>
      <description>

&lt;p&gt;Imagine that you&amp;rsquo;ve never run a single mile in your life. You know that exercising is good for your health, so you decide that you&amp;rsquo;re going to take up running. Strangely, however, you also decide that you&amp;rsquo;re going to begin your journey towards physical fitness by running a marathon tomorrow.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s obviously a bad idea.&lt;/p&gt;

&lt;p&gt;Less obviously, deciding to go from no experience with testing to writing tests for an already existing Android app is also a bad idea. Adding test coverage to an already existing Android application is a marathon-level testing project. It&amp;rsquo;d be more sensible to start with something smaller and work your way up.&lt;/p&gt;

&lt;p&gt;This post invites you to embrace this sensible idea. It&amp;rsquo;s a series of exercises designed slowly introduce you to the challenge of testing Android applications. Before we do that though, I want to say a little about why I think Android testing is one of the hardest kinds of testing you can do.&lt;/p&gt;

&lt;h3 id=&#34;android-a-marathon-level-testing-project&#34;&gt;Android: A Marathon-Level Testing Project&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve been reading through Gerard Meszaros&amp;rsquo; &lt;em&gt;xUnit Testing Patterns&lt;/em&gt;. The other day I stumbled upon this passage:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some kinds of tests are harder to write than others. This difficulty arises partly because the techniques are more involved and partly because they are less well known&amp;hellip;The following common kinds of tests are listed in approximate order of difficulty, from easiest to most difficult.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simple entity objects&lt;/li&gt;
&lt;li&gt;Stateless service objects&lt;/li&gt;
&lt;li&gt;Stateful service objects&lt;/li&gt;
&lt;li&gt;User Interface, database, and multi-threaded logic&lt;/li&gt;
&lt;li&gt;Object-oriented legacy software (software built without tests)&lt;/li&gt;
&lt;li&gt;Non-object-oriented legacy software&lt;sup&gt;1&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve talked &lt;a href=&#34;https://www.philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/&#34;&gt;a&lt;/a&gt; &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/&#34;&gt;lot&lt;/a&gt; about why Android unit testing is so hard, but this passage struck me. As it read it, it occurred to me that testing Android code is combination of the hardest thing on that list with the 3rd hardest thing on that list. Android apps don&amp;rsquo;t tend to be object oriented and they involve a lot of user interface, database, and multi-threaded code.&lt;/p&gt;

&lt;p&gt;So, those who attempt to add tests to already existing Android apps are really doing something difficult. I&amp;rsquo;m not the only one saying that. Meszaros suggests the same thing (by implication) in the above passage.&lt;/p&gt;

&lt;h3 id=&#34;calisthenics&#34;&gt;Calisthenics&lt;/h3&gt;

&lt;p&gt;Instead of starting with the hardest possible target to test, let&amp;rsquo;s work our way up. &lt;a href=&#34;https://github.com/kmdupr33/TestingCalisthenics&#34;&gt;This github project&lt;/a&gt; has some exercises to get you ready. If you want, you can checkout the project and switch between the challenge and solution branches as you work through them. Throughout the remainder of the post, I&amp;rsquo;ll present a testing challenge and the solution to that challenge. If you really want to ready for testing Android apps, I&amp;rsquo;d suggest you try to work through the challenge and check your solution with the ones that I suggest.&lt;/p&gt;

&lt;h4 id=&#34;domain-object&#34;&gt;Domain Object&lt;/h4&gt;

&lt;p&gt;The easiest thing to test, according to Meszaros, is a simple domain object. We don&amp;rsquo;t typically deal with domain objects in Android development since Android apps tend not to be object oriented, but this is still a helpful starting point for learning testing.&lt;/p&gt;

&lt;p&gt;To come up with our challenge, we can think back to the business rule we discovered while &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/&#34;&gt;we were looking at the google I/O conference app a couple weeks back&lt;/a&gt;: A user cannot remove the keynote session from her schedule. Instead of encoding this business rule in the UI, suppose we had an actual domain object that enforced it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Schedule&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Session session&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
        sessions&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a simple, not-so-scary piece of code. Because &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;the code doesn&amp;rsquo;t scare us&lt;/a&gt;, we might not write a test for it in real life, but we&amp;rsquo;re just getting our feet wet with testing, so let&amp;rsquo;s give it a go. Here&amp;rsquo;s the stubs of the test methods you&amp;rsquo;ll need to fill in:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ScheduleTest&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;removesNonKeynoteSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;throwsOnRemoveKeyNote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the first method, you want to check that &lt;code&gt;Schedule&lt;/code&gt; actually removes non-keynote sessions. In the second method, you want to check that &lt;code&gt;Schedule&lt;/code&gt; throws an exception if you try to remove a keynote session. Give it a go! When you scroll down, you&amp;rsquo;ll see how I&amp;rsquo;ve filled in these methods.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here&amp;rsquo;s how I wrote &lt;code&gt;removesNonKeynoteSession&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;removesNonKeynoteSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    Schedule schedule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Schedule&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Session session &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Session&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertFalse&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here&amp;rsquo;s how I wrote &lt;code&gt;throwsOnRemoveKeynote&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;expected &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;throwsOnRemoveKeyNote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    Schedule schedule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Schedule&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Session session &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Session&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Already we&amp;rsquo;re seeing a pattern in these two tests. This pattern turns out to be core to testing. Each test method consists of three stages: arrange, act, assert. In the arrange stage, we get our domain object into the appropriate state for our test. In the case of &lt;code&gt;throwsOnRemoveKeyNote&lt;/code&gt;, the arrange steps consist of these highlighted lines:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;removesNonKeynoteSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    Schedule schedule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Schedule&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Session session &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Session&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertFalse&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember: we&amp;rsquo;re trying to test that the &lt;code&gt;Schedule&lt;/code&gt; allow us to remove a non-keynote session. To test that, we need a &lt;code&gt;Schedule&lt;/code&gt; that has a non-keynote &lt;code&gt;Session&lt;/code&gt; added to it, and that&amp;rsquo;s precisely what we&amp;rsquo;re doing in these three lines.&lt;/p&gt;

&lt;p&gt;The second stage in our test is the act stage. This is when we actually exercise the code we&amp;rsquo;re trying to test. In this case, we&amp;rsquo;re testing that &lt;code&gt;schedule.remove&lt;/code&gt; works correctly, so we call that method.&lt;/p&gt;

&lt;p&gt;The last stage is &amp;ldquo;assert,&amp;rdquo; where we&amp;rsquo;re actually making sure that, given the conditions we setup in the arrange stage and given that the target code has actually executed in the act stage, that target code has done what we wanted it to do. In this case, we expect that the &lt;code&gt;Session&lt;/code&gt; removed should no longer show up in the list of sessions on a certain schedule. This is what we&amp;rsquo;re doing by calling &lt;code&gt;assertFalse(schedule.get().contains(session))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To double check your understanding of the three stages of a test, why not try to identify which lines correspond to which stage in &lt;code&gt;throwsOnRemoveKeyNote&lt;/code&gt;. Again, scroll down when you&amp;rsquo;re ready.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Arrange:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;expected &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;throwsOnRemoveKeyNote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    Schedule schedule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Schedule&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Session session &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Session&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Act is when we call &lt;code&gt;schedule.remove()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Assert:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;expected &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;throwsOnRemoveKeyNote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;    Schedule schedule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Schedule&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Session session &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Session&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    schedule&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;session&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(When we pass &lt;code&gt;UnsupportedOperationException.class&lt;/code&gt; as the value for &lt;code&gt;expected&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hopefully that wasn&amp;rsquo;t too difficult. Hopefully that was a helpful exercise. Next time, we&amp;rsquo;ll make things a bit more difficult. Until then, feedback and questions are welcome!&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Gerard Meszaros, &lt;em&gt;xUnit Test Patterns&lt;/em&gt;, 247-248.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Test Driving away Coupling in Activities</title>
      <link>https://www.philosophicalhacker.com/post/test-driving-away-coupling-in-activities/</link>
      <pubDate>Sun, 09 Apr 2017 15:33:20 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/test-driving-away-coupling-in-activities/</guid>
      <description>

&lt;p&gt;&lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s, perhaps by &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/&#34;&gt;some strange historical accidents&lt;/a&gt;, have been seen as &lt;em&gt;the optimal&lt;/em&gt; building blocks upon which we can build our Android applications for much of the time that Android has been around. Let&amp;rsquo;s call this idea &amp;ndash; the idea that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s are the best building blocks for our apps &amp;ndash; &amp;ldquo;android-centric&amp;rdquo; architecture.&lt;/p&gt;

&lt;p&gt;This series of posts is about the connection between the testability of android-centric architecture and the other problems that are now leading Android developers to reject it; it&amp;rsquo;s about how our unit tests are trying to tell us that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s &amp;ndash; like the cracking bricks in the above image &amp;ndash; don&amp;rsquo;t make the best building blocks for our apps because they tempt us to write code with &lt;em&gt;tight coupling&lt;/em&gt; and &lt;em&gt;low cohesion&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt-2/&#34;&gt;Last time&lt;/a&gt;, we saw &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s tend to have low cohesion. This time, we&amp;rsquo;ll see how our tests can tell us that code within &lt;code&gt;Activity&lt;/code&gt;s have tight coupling. We&amp;rsquo;ll also see how test driving the functionality leads to a design that has looser coupling, which makes it easier to change the app and also opens up opportunities for removing duplication. As with the the other posts in the series, we&amp;rsquo;ll be discussing all of this using the Google I/O app as an example.&lt;/p&gt;

&lt;h3 id=&#34;the-target-code&#34;&gt;The Target Code&lt;/h3&gt;

&lt;p&gt;The code that we want to test, the &amp;ldquo;target code&amp;rdquo;, does the following: when the user navigates to the map view that shows where all the Google I/O sessions are, it asks for their location. If they reject the permission, we show a toast notifying the user that they&amp;rsquo;ve disabled an app permission. Here&amp;rsquo;s a screenshot of this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/permission-denied-toast.png&#34; alt=&#34;permission denied toast&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the code that accomplishes this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onRequestPermissionsResult&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; requestCode&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #AA22FF&#34;&gt;@NonNull&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; permissions&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #AA22FF&#34;&gt;@NonNull&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; grantResults&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;requestCode &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; REQUEST_LOCATION_PERMISSION&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;permissions&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            LOCATION_PERMISSION&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;permissions&lt;span style=&#34;color: #666666&#34;&gt;[0])&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            grantResults&lt;span style=&#34;color: #666666&#34;&gt;[0]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; PackageManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PERMISSION_GRANTED&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Permission has been granted.&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mMapFragment &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            mMapFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setMyLocationEnabled&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Permission was denied. Display error message.&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;map_permission_denied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;                Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onRequestPermissionsResult&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;requestCode&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; permissions&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
            grantResults&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;the-test-code&#34;&gt;The Test Code&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s take a stab at testing this. Here&amp;rsquo;s what that would look like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;showsToastIfPermissionIsRejected&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    MapActivity mapActivity &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; MapActivity&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

    mapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onRequestPermissionsResult&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
            MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;REQUEST_LOCATION_PERMISSION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LOCATION_PERMISSION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;
                    PackageManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PERMISSION_DENIED&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;

    assertToastDisplayed&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hopefully, you&amp;rsquo;re wondering what the implementation of &lt;code&gt;assertToastDisplayed()&lt;/code&gt; looks like. Here&amp;rsquo;s the thing: there isn&amp;rsquo;t a straight forward implementation of that method. In order to implement without refactoring our code, we&amp;rsquo;d need to use a combination of roboelectric and powermock.&lt;/p&gt;

&lt;p&gt;However, since we are trying to listen to our tests and &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/&#34;&gt;change the way we write code, rather than change the way we write tests&lt;/a&gt;, we are going to stop for a moment and think about what this test is trying to tell us:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our presentation logic that lives inside of &lt;code&gt;MapActivity&lt;/code&gt; is tightly coupled with &lt;code&gt;Toast&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This coupling is what drives us to use roboelectric to give us mocked android behavior and  powermock to mock the static &lt;code&gt;Toast.makeText&lt;/code&gt; method. Instead, let&amp;rsquo;s listen to our test and remove the coupling.&lt;/p&gt;

&lt;p&gt;To guide our refactoring, let&amp;rsquo;s write our test first. This will ensure that our &lt;em&gt;new&lt;/em&gt; classes are loosely coupled. We have to create a new class in this particular case in order to avoid Roboelectric, but ordinarily, we could just refactor already existing classes to reduce coupling.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displaysErrorWhenPermissionRejected&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    OnPermissionResultListener onPermissionResultListener &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; OnPermissionResultListener&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mPermittedView&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    onPermissionResultListener&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onPermissionResult&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
            MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;REQUEST_LOCATION_PERMISSION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LOCATION_PERMISSION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;},&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;PackageManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PERMISSION_DENIED&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;

    verify&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mPermittedView&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayPermissionDenied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;ve introduced a &lt;code&gt;OnPermissionResultListener&lt;/code&gt; whose job is just to handle the result of request permission from a user. Here&amp;rsquo;s the code for that:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onPermissionResult&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; requestCode&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; permissions&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; grantResults&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;requestCode &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;REQUEST_LOCATION_PERMISSION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;permissions&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LOCATION_PERMISSION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;permissions&lt;span style=&#34;color: #666666&#34;&gt;[0])&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            grantResults&lt;span style=&#34;color: #666666&#34;&gt;[0]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; PackageManager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PERMISSION_GRANTED&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Permission has been granted.&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        mPermittedView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayPermittedView&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Permission was denied. Display error message.&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        mPermittedView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayPermissionDenied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The calls to &lt;code&gt;MapFragment&lt;/code&gt; and &lt;code&gt;Toast&lt;/code&gt; have been replaced with method calls on the &lt;code&gt;PermittedView&lt;/code&gt;, an object that gets passed in through the constructor. &lt;code&gt;PermittedView&lt;/code&gt; is an interface:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;PermittedView&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displayPermissionDenied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displayPermittedView&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it gets implemented by the &lt;code&gt;MapActivity&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MapActivity&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; BaseActivity
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;implements&lt;/span&gt; SlideableInfoFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;Callback&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; MapFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;Callbacks&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;        ActivityCompat&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;OnRequestPermissionsResultCallback&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        OnPermissionResultListener&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;PermittedView&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displayPermissionDenied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;MapActivity&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;map_permission_denied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                Toast&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This may not the &lt;em&gt;best&lt;/em&gt; solution, but it gets us to a point where we can test things. This &lt;em&gt;required&lt;/em&gt; that &lt;code&gt;OnPermissionResultListener&lt;/code&gt; be loosely coupled with its &lt;code&gt;PermittedView&lt;/code&gt;. Loose coupling == definitely an improvement.&lt;/p&gt;

&lt;h3 id=&#34;who-cares&#34;&gt;Who cares?&lt;/h3&gt;

&lt;p&gt;At this point, some readers might be skeptical. &amp;ldquo;Is this definitely an improvement?,&amp;rdquo; they may wonder to themselves. Here are two reasons why this &lt;em&gt;design&lt;/em&gt; is better.&lt;/p&gt;

&lt;p&gt;(Neither reason I give, you&amp;rsquo;ll notice is &amp;ldquo;the design is better because its testable.&amp;rdquo; That would be circular reasoning.)&lt;/p&gt;

&lt;h4 id=&#34;easier-changes&#34;&gt;Easier Changes&lt;/h4&gt;

&lt;p&gt;First, its going to be easier to change this code now that it consists of loosely coupled components, and here&amp;rsquo;s the kicker: the code that we&amp;rsquo;ve just tested from the Google I/O app &lt;em&gt;actually did change&lt;/em&gt;, and with the tests that we have in place, making those changes will be easier. The code I tested was from &lt;a href=&#34;https://github.com/google/iosched/blob/bd31a838ce4ddc123c71025c859959517c7ae178/android/src/main/java/com/google/samples/apps/iosched/map/MapActivity.java&#34;&gt;an older commit&lt;/a&gt;. Later on, the folks working on the I/O app decided to replace the &lt;code&gt;Toast&lt;/code&gt; with a &lt;code&gt;Snackbar&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/permission-denied-snackbar.png&#34; alt=&#34;snackbar permission rejected&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Its a small change, but because we&amp;rsquo;ve separated &lt;code&gt;OnPermissionResultListener&lt;/code&gt; from &lt;code&gt;PermittedView&lt;/code&gt;, we can make the change on the &lt;code&gt;MapActivity&lt;/code&gt;s implementation of &lt;code&gt;PermittedView&lt;/code&gt; without having to think at all about the &lt;code&gt;OnPermissionResultListener&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what that change would have looked like, using their little &lt;code&gt;PermissionUtils&lt;/code&gt; class they wrote for displaying &lt;code&gt;SnackBar&lt;/code&gt;s.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displayPermissionDenied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    PermissionsUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayConditionalPermissionDenialSnackbar&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
            R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;map_permission_denied&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;LOCATION_PERMISSION&lt;span style=&#34;color: #666666&#34;&gt;},&lt;/span&gt;
            REQUEST_LOCATION_PERMISSION&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, notice that we can make this change without thinking about the &lt;code&gt;OnPermissionResultListener&lt;/code&gt; at all. This is actually exactly what Larry Constantine was talking about when he first defined the concept of coupling back in the 70s:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;what we are striving for is loosely coupled systems…in which one can study (or debug, or maintain) any one module without having to know very much about any other modules in the system&lt;/p&gt;

&lt;p&gt;–Edward Yourdon and Larry Constantine, Structured Design&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;reducing-duplication&#34;&gt;Reducing Duplication&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s another interesting reason to why the fact that our tests have forced us to remove coupling is a good thing: coupling often leads to duplication. Here&amp;rsquo;s Kent Beck on this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dependency is the key problem in software development at all scales…if dependency is the problem, duplication is the symptom.&lt;/p&gt;

&lt;p&gt;-Kent Beck, TDD By Example, pg 7.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If this is true, when we remove coupling, we will often see opportunities to reduce duplication. Indeed, this is precisely what we find in this case. It turns out that there is  another classes whose &lt;code&gt;onRequestPermissionsResult&lt;/code&gt; is nearly identical to the one in &lt;code&gt;MapActivity&lt;/code&gt;: &lt;a href=&#34;https://github.com/google/iosched/blob/bd31a838ce4ddc123c71025c859959517c7ae178/android/src/main/java/com/google/samples/apps/iosched/welcome/AccountFragment.java#L139&#34;&gt;&lt;code&gt;AccountFragment&lt;/code&gt;&lt;/a&gt;. Our tests drove us to create two classes &lt;code&gt;OnPermissionResultListener&lt;/code&gt; and &lt;code&gt;PermittedView&lt;/code&gt; that &amp;ndash; without much modification &amp;ndash; can be reused in these other classes.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So, when we have a hard time testing our &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s, its often because our tests are trying to tell us that our code is tightly coupled. The test&amp;rsquo;s warning about coupling often come in the form of an inability to make an assertion against the code we&amp;rsquo;re trying to test.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;When we listen to our tests, instead of changing them by using Roboelectric our powermock, we&amp;rsquo;re lead to change in our code in a way that makes it less coupled, which makes it easier to make changes and opens up opportunities to reduce duplication.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;It could also show up as an inability to get your target code into the right state for testing. That&amp;rsquo;s what we saw &lt;a href=&#34;&#34;&gt;in this post&lt;/a&gt;, for example.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>What Unit Tests are Trying to Tell us About Activities Pt 2</title>
      <link>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt-2/</link>
      <pubDate>Fri, 10 Mar 2017 22:32:02 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt-2/</guid>
      <description>

&lt;p&gt;&lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s, perhaps by &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/&#34;&gt;some strange historical accidents&lt;/a&gt;, have been seen as &lt;em&gt;the optimal&lt;/em&gt; building blocks upon which we can build our Android applications for much of the time that Android has been around. Let&amp;rsquo;s call this idea &amp;ndash; the idea that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s are the best building blocks for our apps &amp;ndash; &amp;ldquo;android-centric&amp;rdquo; architecture.&lt;/p&gt;

&lt;p&gt;This series of posts is about the connection between the testability of android-centric architecture and the other problems that are now leading Android developers to reject it; it&amp;rsquo;s about how our unit tests are trying to tell us that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s don&amp;rsquo;t make the best building blocks for our apps because they force us to write code with &lt;em&gt;tight coupling&lt;/em&gt; and &lt;em&gt;low cohesion&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this second part of &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/&#34;&gt;the series&lt;/a&gt;, through an examination of the Session Detail screen in the Google I/O sample app, I show how using &lt;code&gt;Activity&lt;/code&gt;&amp;rsquo;s and &lt;code&gt;Fragment&lt;/code&gt;s as building blocks makes our code hard to test and show that our failure to unit test tell us that our target class has low-cohesion.&lt;/p&gt;

&lt;h3 id=&#34;the-google-i-o-session-detail-example&#34;&gt;The Google I/O Session Detail Example&lt;/h3&gt;

&lt;p&gt;When I&amp;rsquo;m working on a project, I try to start by &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;testing the code that scares me the most&lt;/a&gt;. Large classes scare me. The largest class in the Google I/O app is the &lt;code&gt;SessionDetailFragment&lt;/code&gt;. Large methods scare me too, and the largest method of this large class is &lt;code&gt;displaySessionData&lt;/code&gt;. Here&amp;rsquo;s a screenshot of what this monster class displays:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/session-detail.png&#34; alt=&#34;Session Detail Screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the scary &lt;code&gt;displaySessionData&lt;/code&gt; method. This isn&amp;rsquo;t something you&amp;rsquo;re supposed to &lt;em&gt;easily&lt;/em&gt; understand; that&amp;rsquo;s what makes it scary. Gaze upon it with fear and trembling for a moment before we move on:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displaySessionData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; SessionDetailModel data&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  mTitle&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionTitle&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
  mSubtitle&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionSubtitle&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    AppIndex&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;AppIndexApi&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mClient&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; getActionForTitle&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionTitle&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()));&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Throwable e&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Nothing to do if indexing fails.&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;shouldShowHeaderImage&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mImageLoader&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;loadImage&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getPhotoUrl&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; mPhotoView&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mPhotoViewContainer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;GONE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    ViewCompat&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setFitsSystemWindows&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mAppBar&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// This is hacky but the collapsing toolbar requires a minimum height to enable&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// the status bar scrim feature; set 1px. When there is no image, this would leave&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// a 1px gap so we offset with a negative margin.&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;((&lt;/span&gt;ViewGroup&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;MarginLayoutParams&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; mCollapsingToolbar&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getLayoutParams&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;topMargin&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-1;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  tryExecuteDeferredUiOperations&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Handle Keynote as a special case, where the user cannot remove it&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// from the schedule (it is auto added to schedule on sync)&lt;/span&gt;
  mShowFab &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;AccountUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasActiveAccount&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getContext&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
  mAddScheduleFab&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mShowFab &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VISIBLE&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INVISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  displayTags&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    showInScheduleDeferred&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isInSchedule&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;TextUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionAbstract&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    UIUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setTextMaybeHtml&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mAbstract&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionAbstract&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
    mAbstract&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mAbstract&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;GONE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Build requirements section&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; View requirementsBlock &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; getActivity&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session_requirements_block&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; String sessionRequirements &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getRequirements&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;TextUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessionRequirements&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    UIUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setTextMaybeHtml&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mRequirements&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; sessionRequirements&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    requirementsBlock&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    requirementsBlock&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;GONE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; ViewGroup relatedVideosBlock &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ViewGroup&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; getActivity&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;related_videos_block&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  relatedVideosBlock&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;GONE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  updateEmptyView&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  updateTimeBasedUi&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getLiveStreamVideoWatched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mPhotoView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setColorFilter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getContext&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getResources&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getColor&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;played_video_tint&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
    mWatchVideo&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getString&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session_replay&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasLiveStream&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mWatchVideo&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setOnClickListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;OnClickListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View v&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        String videoId &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
            YouTubeUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getVideoIdFromSessionData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getYouTubeUrl&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getLiveStreamId&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
        YouTubeUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;showYouTubeVideo&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;videoId&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; getActivity&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  fireAnalyticsScreenView&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionTitle&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;

  mTimeHintUpdaterRunnable &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Runnable&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getActivity&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Do not post a delayed message if the activity is detached.&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
      updateTimeBasedUi&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
      mHandler&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;postDelayed&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mTimeHintUpdaterRunnable&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
          SessionDetailConstants&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;TIME_HINT_UPDATE_INTERVAL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;};&lt;/span&gt;
  mHandler&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;postDelayed&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mTimeHintUpdaterRunnable&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
      SessionDetailConstants&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;TIME_HINT_UPDATE_INTERVAL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;mHasEnterTransition&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// No enter transition so update UI manually&lt;/span&gt;
    enterTransitionFinished&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;BuildConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;ENABLE_EXTENDED_SESSION_URL&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;shouldShowExtendedSessionLink&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mExtendedSessionUrl &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getExtendedSessionUrl&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;TextUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mExtendedSessionUrl&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      mExtended&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;description_extended&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
      mExtended&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

      mExtended&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setClickable&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
      mExtended&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setOnClickListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;OnClickListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; View v&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
          sendUserAction&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailUserActionEnum&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;EXTENDED&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I know that was scary, but pull yourself together. Let&amp;rsquo;s zoom in on these few lines in particular:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displaySessionData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; SessionDetailModel data&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Handle Keynote as a special case, where the user cannot remove it&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// from the schedule (it is auto added to schedule on sync)&lt;/span&gt;
  mShowFab &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;AccountUtils&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasActiveAccount&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;getContext&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
  mAddScheduleFab&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mShowFab &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VISIBLE&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INVISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    showInScheduleDeferred&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isInSchedule&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Interesting. It looks like we&amp;rsquo;ve stumbled upon a business rule:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Conference attendee cannot remove the keynote session from their schedule.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looks like there&amp;rsquo;s presentation-logic related to this rule as well: If we&amp;rsquo;re displaying the keynote session, don&amp;rsquo;t bother providing an affordance to add or remove it from the schedule. Otherwise, go ahead and provide said affordance. Oh&amp;hellip;and also, if the session is in the attendee&amp;rsquo;s schedule, go ahead and show it.&lt;/p&gt;

&lt;p&gt;That method name, &lt;code&gt;showInScheduleDeferred&lt;/code&gt; actually turns out to be a lie. Even if you call it, you won&amp;rsquo;t see a FAB to add or remove a non-keynote session from their calendar. Lying methods are even scarier than long ones. The reason you won&amp;rsquo;t see a the FAB is another business rule:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Conference attendee cannot add or remove sessions that have already passed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That code lives in &lt;code&gt;updateTimeBasedUi&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;updateTimeBasedUi&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailModel data&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// If the session is done, hide the FAB, and show the &amp;quot;Give feedback&amp;quot; card.&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isSessionReadyForFeedback&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    mShowFab &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    mAddScheduleFab&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;GONE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasFeedback&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isInScheduleWhenSessionFirstLoaded&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;sDismissedFeedbackCard&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSessionId&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      showGiveFeedbackCard&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you look at a session&amp;rsquo;s details before the conference starts, you&amp;rsquo;ll actually see the &amp;ldquo;add to schedule&amp;rdquo; FAB:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/session-detail-with-fab.png&#34; alt=&#34;Add to schedule fab is visible now&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So, we&amp;rsquo;ve actually got a fairly complicated business rule here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A conference attendee can only add or remove a session from their schedule if that session is not the keynote and if that session hasn&amp;rsquo;t already passed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, we want our presentation-logic to reflect this rule, which means we only want to give the attendees an affordance to add or remove a session in accordance with this rule. It&amp;rsquo;d be silly if we showed the FAB and when the user tapped it, the app said &amp;ndash; perhaps with a &lt;code&gt;Dialog&lt;/code&gt; or a &lt;code&gt;Toast,&lt;/code&gt; &amp;ldquo;Nope! You can&amp;rsquo;t remove the keynote session!&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;a-failed-attempt-to-test&#34;&gt;A Failed Attempt to Test&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s see if we can write a few tests for this presentation logic. Remember, as we said &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/&#34;&gt;last time&lt;/a&gt;, the idea here is that tests tell us something about our design. If the class is easy to unit test, its well designed. When I write this unit test, I&amp;rsquo;ll write what I think is the easiest way to unit test this functionality. The more I have to change my ideal easy test, the most suspicious I become of the class I&amp;rsquo;m testing.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SessionDetailFragmentTest&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displayDataOnlyProvidesAddRemoveSessionAffordanceIfSessionIsNotKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Arrange&lt;/span&gt;
    SessionDetailFragment sessionDetailFragment &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; SessionDetailModel sessionDetailModel &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mock&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    when&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;thenReturn&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Act&lt;/span&gt;
    sessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
        SessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailQueryEnum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SESSIONS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Assert&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; View addScheduleButton &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
        sessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getView&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add_schedule_button&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertTrue&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;addScheduleButton&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INVISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the easiest test I can think of. There&amp;rsquo;s already some trouble here since &lt;code&gt;displaySessionData&lt;/code&gt; is a private method, so we have to test it indirectly through the public &lt;code&gt;SessionDetailFragment.displayData&lt;/code&gt; method. Not too shabby though. Unfortunately, when we run it. Here&amp;rsquo;s what we get:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;java&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;NullPointerException&lt;/span&gt;
	at com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;samples&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;apps&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iosched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailFragment&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displaySessionData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:396)&lt;/span&gt;
	at com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;samples&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;apps&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iosched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailFragment&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:292)&lt;/span&gt;
	at com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;samples&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;apps&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iosched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailFragmentTest&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayDataOnlyProvidesAddRemoveSessionAffordanceIfSessionIsNotKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailFragmentTest&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:19)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The test is complaining that &lt;code&gt;SessionDetailFragment.mTitleView&lt;/code&gt; is null. Ugh. The error is annoying because &lt;code&gt;SessionDetailFragment.mTitleView&lt;/code&gt; &lt;em&gt;nothing to do with this test&lt;/em&gt;. Looks like I&amp;rsquo;ll have to add a call to &lt;code&gt;onActivityCreated&lt;/code&gt; to make sure those &lt;code&gt;View&lt;/code&gt;s get instantiated:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;displayDataOnlyProvidesAddRemoveSessionAffordanceIfSessionIsNotKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Arrange&lt;/span&gt;
    SessionDetailFragment sessionDetailFragment &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; SessionDetailModel sessionDetailModel &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; mock&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    when&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;thenReturn&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Act&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    sessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onActivityCreated&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;    sessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayData&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
        SessionDetailModel&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailQueryEnum&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SESSIONS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Assert&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; View addScheduleButton &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;
        sessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getView&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add_schedule_button&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertTrue&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;addScheduleButton&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getVisibility&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INVISIBLE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we run this test, we get another error:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;java&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;NullPointerException&lt;/span&gt;
	at com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;samples&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;apps&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iosched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailFragment&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;initPresenter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:260)&lt;/span&gt;
	at com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;samples&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;apps&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iosched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailFragment&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onActivityCreated&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailFragment&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:177)&lt;/span&gt;
	at com&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;google&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;samples&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;apps&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iosched&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;SessionDetailFragmentTest&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayDataOnlyProvidesAddRemoveSessionAffordanceIfSessionIsNotKeynote&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionDetailFragmentTest&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;:20)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time, the complaint basically boils down to the fact that &lt;code&gt;getActivity()&lt;/code&gt; returns null. At this point, we might decide to call &lt;code&gt;onAttach&lt;/code&gt; and pass in a dummy &lt;code&gt;Activity&lt;/code&gt; to get around this. Or, we might realize that even if we did do this, there&amp;rsquo;s going to be a lot of things we have to do to get this test setup &lt;em&gt;that have nothing to do with testing the behavior we&amp;rsquo;re interested in.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At this point, we might be tempted give up and go use roboelectric. &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/&#34;&gt;I&amp;rsquo;ve said before&lt;/a&gt; that using roboelectric feels like exactly the wrong thing to do here. The test is trying to tell us something about our code. We don&amp;rsquo;t need to change the way we test. We need to change the way we code.&lt;/p&gt;

&lt;p&gt;So, before giving up, let&amp;rsquo;s think for a second about what&amp;rsquo;s happening. We&amp;rsquo;re interested in testing a small piece of behavior, and the way our class is designed is forcing us to care about a bunch of other objects &lt;em&gt;that have nothing to do with the behavior we&amp;rsquo;re testing.&lt;/em&gt; What this means is that our class has low cohesion. Our class has a bunch of functionality and objects that have little to do with each other. This is what makes it difficult to complete the arrange step in our unit test; its what makes it difficult to get our object into a state where we can actually run our test.&lt;/p&gt;

&lt;p&gt;As we know, however, low cohesion, isn&amp;rsquo;t just about testability. Classes that have low cohesion are difficult to understand and change. This test that we&amp;rsquo;ve tried and failed to write is reinforcing something that we already know intuitively: the 900+ line &lt;code&gt;SessionDetailFragment&lt;/code&gt; is a monster and it needs to be refactored.&lt;/p&gt;

&lt;p&gt;Perhaps more controversially, when we listen to the tests and follow their suggestions by writing them first, I think we&amp;rsquo;ll eventually find that we don&amp;rsquo;t even really want a &lt;code&gt;Fragment&lt;/code&gt; here at all. In fact, I think we&amp;rsquo;ll find that its rare that a &lt;code&gt;Fragment&lt;/code&gt; is the ideal building block we want to use for our functionality. One claim at a time though. Let&amp;rsquo;s wrap this post up. We&amp;rsquo;ll get to the juicy controversy in due time.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve just seen how writing a test for a class can tell us that the target class suffers from low cohesion. The &lt;code&gt;SessionDetailFragment&lt;/code&gt; may be a particularly obvious case of a low-cohesion class, but TDD can also help us identify more subtle cases of classes that lack cohesion. In this case, the target class was a &lt;code&gt;Fragment&lt;/code&gt;, but if you write tests for a while, you&amp;rsquo;ll find that the same thing is true for &lt;code&gt;Activity&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;In the next post, we&amp;rsquo;ll look at how the difficulty of testing this class shows us another insight: that &lt;code&gt;SessionDetailFragment&lt;/code&gt; is tightly coupled. We&amp;rsquo;ll also test drive this same functionality and show how the resulting design is more cohesive and loosely coupled.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some Resources for Learning how to Test Android Apps</title>
      <link>https://www.philosophicalhacker.com/post/some-resources-for-learning-how-to-test-android-apps/</link>
      <pubDate>Fri, 03 Mar 2017 08:34:09 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/some-resources-for-learning-how-to-test-android-apps/</guid>
      <description>

&lt;p&gt;Someone recently asked me how I &amp;ldquo;know so much&amp;rdquo; about testing android apps. After disabusing them of the notion that I know a lot about testing, I said that I&amp;rsquo;d write up a blog post of some helpful resources I&amp;rsquo;ve found and send it to them. This is that blog post.&lt;/p&gt;

&lt;p&gt;The resources are divided into books, articles, talks, and podcasts. I&amp;rsquo;ve marked resources that I think are essential with a &amp;ldquo;*&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;books&#34;&gt;Books:&lt;/h2&gt;

&lt;h3 id=&#34;working-effectively-with-legacy-code&#34;&gt;Working Effectively with Legacy Code *&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re working on already existing Android app and you&amp;rsquo;re trying to figure out how to get tests in place, I can&amp;rsquo;t recommend this book enough. &lt;a href=&#34;https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052&#34;&gt;The book&lt;/a&gt; has a lot of fantastic theory on &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-makes-android-apps-testable/&#34;&gt;what makes code testable in general&lt;/a&gt;. It also has a bunch of great tips for conservative refactorings you can do to safely get your codebase to a more testable state.&lt;/p&gt;

&lt;h3 id=&#34;growing-object-oriented-software-guided-by-tests&#34;&gt;Growing Object Oriented Software Guided by Tests&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re working on a greenfield project, &lt;a href=&#34;https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627&#34;&gt;this book&lt;/a&gt; is a great way to see how tests positively influence the architecture of your application and help you move towards more object oriented code. It also has some very practical tips on some trickier cases like testing persistence, etc.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a nice appendix in the book that talks about the history of &amp;ldquo;mocking&amp;rdquo; and what Fowler would call the &amp;ldquo;mockist&amp;rdquo; style of TDD. The underlying philosophy behind Mockito makes a lot more sense once you&amp;rsquo;ve read this.&lt;/p&gt;

&lt;h3 id=&#34;tdd-by-example&#34;&gt;TDD By Example *&lt;/h3&gt;

&lt;p&gt;This is &lt;a href=&#34;https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/ref=pd_sbs_14_t_1?_encoding=UTF8&amp;amp;psc=1&amp;amp;refRID=GBD9CHYJGZ7Y5YEB07CH&#34;&gt;the book by the guy popularized TDD&lt;/a&gt;. Since I had already read &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt; and &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt; before picking this up, there wasn&amp;rsquo;t a ton new for me to glean. However, since this is written by Kent Beck, I consider it essential reading. One thing I found interesting was how non-dogmatic Beck was in advocating for TDD. I also did learn &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;a neat heuristic for determining when I should be writing tests or doing TDD&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;xunit-test-patterns&#34;&gt;xUnit Test Patterns&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m nearly finished with &lt;a href=&#34;https://www.amazon.com/xUnit-Test-Patterns-Refactoring-Code/dp/0131495054&#34;&gt;this one&lt;/a&gt;. Some of it feels a bit repetitive, but there are some great insights about writing readable tests. There&amp;rsquo;s also a really nice discussion about the tradeoff between easy fixture management and test performance.&lt;/p&gt;

&lt;h2 id=&#34;articles&#34;&gt;Articles:&lt;/h2&gt;

&lt;h3 id=&#34;mocks-aren-t-stubs&#34;&gt;Mocks Aren&amp;rsquo;t Stubs *&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/articles/mocksArentStubs.html&#34;&gt;Great Martin Fowler article&lt;/a&gt; that gives a taxonomy of test doubles. Mockito has us all confused about this, but Fowler does a great job of teasing apart the various concepts that are mingled in Mockito&amp;rsquo;s &amp;ldquo;mocks.&amp;rdquo; It also contains a wonderful discussion of two different styles of TDD, with special attention paid to the influence the styles have on the architecture that emerges from doing that particular style of TDD.&lt;/p&gt;

&lt;h3 id=&#34;page-object-pattern&#34;&gt;Page Object Pattern&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/bliki/PageObject.html&#34;&gt;Martin Fowler&lt;/a&gt; named a neat pattern for ensuring that your UI tests aren&amp;rsquo;t brittle. Its identical with Jake Wharton&amp;rsquo;s &amp;ldquo;robot pattern&amp;rdquo; linked below.&lt;/p&gt;

&lt;h3 id=&#34;misko-hevery-s-testability-guide&#34;&gt;Misko Hevery&amp;rsquo;s Testability Guide&lt;/h3&gt;

&lt;p&gt;Misko Hevery, in case you don&amp;rsquo;t know, is a Google engineer and the father of Angular. He&amp;rsquo;s also the author of an excellent &lt;a href=&#34;http://misko.hevery.com/code-reviewers-guide/&#34;&gt;Testability Guide&lt;/a&gt;. In the guide, you learn why GOF Singletons and static access in general aren&amp;rsquo;t great for tests or your architecture. This guide actually inspired my post &lt;a href=&#34;https://www.philosophicalhacker.com/2015/07/14/why-static-references-to-application-contexts-are-probably-not-the-best-idea/&#34;&gt;&amp;ldquo;Why Static References to Application Contexts Aren&amp;rsquo;t the Best Idea&amp;rdquo;&lt;/a&gt;. You&amp;rsquo;ll also see some good rules about constructors and scope and how they relate to testability.&lt;/p&gt;

&lt;h2 id=&#34;talks&#34;&gt;Talks:&lt;/h2&gt;

&lt;h4 id=&#34;dagger-and-testing&#34;&gt;Dagger and Testing *&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://jakewharton.com/android-apps-with-dagger-devoxx/&#34;&gt;Great talk on Dagger&lt;/a&gt;, which is arguably essential for UI-level testing. A great highlight here is Jake&amp;rsquo;s discussion of &amp;ldquo;mock mode&amp;rdquo; in his u2020 app.&lt;/p&gt;

&lt;h4 id=&#34;increasing-app-quality-with-testing-and-monitoring&#34;&gt;Increasing App Quality with Testing and Monitoring&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4fyhgHQYG1U&amp;amp;list=PLOU2XLYxmsILe6_eGvDN3GyiodoV3qNSC&amp;amp;index=48&#34;&gt;This&lt;/a&gt; is a nice panel-like talk with developers from companies like Shazam and American Express. It was mostly useful for getting an idea of how testing works in the real world and at scale.&lt;/p&gt;

&lt;h4 id=&#34;jake-wharton-on-the-robot-pattern&#34;&gt;Jake Wharton on The Robot Pattern *&lt;/h4&gt;

&lt;p&gt;Jake Wharton basically renamed Fowler&amp;rsquo;s Page Object Pattern and &lt;a href=&#34;https://realm.io/news/kau-jake-wharton-testing-robots/&#34;&gt;he has a nice talk&lt;/a&gt; explaining how to apply the pattern to espresso tests.&lt;/p&gt;

&lt;h2 id=&#34;podcasts&#34;&gt;Podcasts:&lt;/h2&gt;

&lt;h3 id=&#34;is-tdd-dead&#34;&gt;Is TDD Dead? *&lt;/h3&gt;

&lt;p&gt;This is &lt;a href=&#34;https://martinfowler.com/articles/is-tdd-dead/&#34;&gt;a fantastic five part discussion&lt;/a&gt; between Martin Fowler, Kent Beck, and DHH. Highlights include a discussion of what we should test, the role of QA in a TDD world, the role of mocks in writing tests, and, of course, whether TDD leads to better code.&lt;/p&gt;

&lt;h3 id=&#34;fragmented-episode-7&#34;&gt;Fragmented episode 7&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://fragmentedpodcast.com/episodes/7&#34;&gt;Great episode of Fragmented&lt;/a&gt; with Jake Wharton. The discussion around Roboelectric and what we should test is good. That discussion partially inspired &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/&#34;&gt;&amp;ldquo;Why I Don&amp;rsquo;t Use Roboelectric.&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Unit Tests are Trying to Tell us about Activities: Pt. 1</title>
      <link>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/</link>
      <pubDate>Sat, 25 Feb 2017 09:33:51 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/</guid>
      <description>

&lt;p&gt;&lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s, perhaps by &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/&#34;&gt;some strange historical accidents&lt;/a&gt;, have been seen as &lt;em&gt;the optimal&lt;/em&gt; building blocks upon which we can build our Android applications for much of the time that Android has been around. Let&amp;rsquo;s call this idea &amp;ndash; the idea that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s are the best building blocks for our apps &amp;ndash; &amp;ldquo;android-centric&amp;rdquo; architecture.&lt;/p&gt;

&lt;p&gt;This series of posts is about the connection between the testability of android-centric architecture and the other problems that are now leading Android developers to reject it; it&amp;rsquo;s about how our unit tests are trying to tell us that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s don&amp;rsquo;t make the best building blocks for our apps because they force us to write code with &lt;em&gt;tight coupling&lt;/em&gt; and &lt;em&gt;low cohesion&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this first part of the series, I want to say a little about why I think android-centric architecture has been dominant for so long and to provide a little background on why I think unit tests have insightful things to say about rejecting android-centric architecture.&lt;/p&gt;

&lt;h3 id=&#34;what-is-android-centric-architecture&#34;&gt;What is Android-Centric Architecture?&lt;/h3&gt;

&lt;p&gt;An android-centric architecture is one in which each screen the user sees is &lt;em&gt;ultimately&lt;/em&gt; backed by a class whose main purpose is to interact with the android operating system. As we&amp;rsquo;ll see later, Diane Hackborne and Chet Haase have both recently stated that &lt;code&gt;Activity&lt;/code&gt;s are an example of such a class. Since &lt;code&gt;Fragment&lt;/code&gt;s are very similar to &lt;code&gt;Activity&lt;/code&gt;s, I consider an app where each screen is backed by a &lt;code&gt;Fragment&lt;/code&gt; to also have an android-centric architecture, even if there&amp;rsquo;s only one &lt;code&gt;Activity&lt;/code&gt; in the app.&lt;/p&gt;

&lt;p&gt;MVP and VIPER and RIBLETS and&amp;hellip;are a thing now in the Android community. However, these suggestions aren&amp;rsquo;t &lt;em&gt;necessarily&lt;/em&gt; a full rejection of android-centric architecture. Although there may be &lt;code&gt;Presenter&lt;/code&gt;s or &lt;code&gt;Interactors&lt;/code&gt;s or whatever involved, these objects are often still built on top of &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s; they could still get instantiated by and delegate to android-centric components, one for each screen the user sees.&lt;/p&gt;

&lt;p&gt;An app that doesn&amp;rsquo;t follow android-centric architecture has one &lt;code&gt;Activity&lt;/code&gt; and no &lt;code&gt;Fragment&lt;/code&gt;s. Router and Controller type classes are POJOs.&lt;/p&gt;

&lt;h3 id=&#34;why-android-centric-architecture&#34;&gt;Why Android-Centric Architecture?&lt;/h3&gt;

&lt;p&gt;I suspect that a part of the reason why we buy into android-centric architecture is that Google hasn&amp;rsquo;t really been clear on what &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s are for until relatively recently. On channels less official and visible than the Android docs, &lt;a href=&#34;https://medium.com/google-developers/developing-for-android-vii-the-rules-framework-concerns-d0210e52eee3#.1o25pxfat&#34;&gt;Chet Haase&lt;/a&gt; and &lt;a href=&#34;https://plus.google.com/+DianneHackborn/posts/FXCCYxepsDU&#34;&gt;Diane Hackborne&lt;/a&gt; have both suggested that &lt;code&gt;Activity&lt;/code&gt;s aren&amp;rsquo;t really the kind of things with which you want to build your application.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s Hackborne:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;…With its Java language APIs and fairly high-level concepts, it can look like a typical application framework that is there to say how applications should be doing their work. But for the most part, it is not.&lt;/p&gt;

&lt;p&gt;It is probably better to call the core Android APIs a “system framework.” For the most part, the platform APIs we provide are there to define how an application interacts with the operating system; but for anything going on purely within the app, these APIs are often just not relevant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and here&amp;rsquo;s Haase:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Application components (activities, services, providers, receivers) are interfaces for your application to interact with the operating system; don’t take them as a recommendation of the facilities you should architect your entire application around.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hackborne and Haase almost explicitly reject android-centric architecture. I say &amp;ldquo;almost&amp;rdquo;, as they both don&amp;rsquo;t seem to denounce the use of &lt;code&gt;Fragment&lt;/code&gt;s as building blocks for our apps. However, there&amp;rsquo;s a tension between the idea &lt;code&gt;Activity&lt;/code&gt;s are not suitable app components and that &lt;code&gt;Fragment&lt;/code&gt;s are, and that tension is as strong as the the many similarities between the two components.&lt;/p&gt;

&lt;p&gt;It might even be fair to say that Google has actually suggested an android-centric architecture through the previous &lt;a href=&#34;https://github.com/google/iosched&#34;&gt;Google I/O app samples&lt;/a&gt; and the android documentation. The &amp;ldquo;app components&amp;rdquo; section of the Android docs is a particularly good example of this. &lt;a href=&#34;https://developer.android.com/guide/components/index.html&#34;&gt;The section introduction&lt;/a&gt; tells the reader that they&amp;rsquo;ll learn &amp;ldquo;how you can build the components [including &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s] that define the &lt;em&gt;building blocks&lt;/em&gt; of your app.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Over the past couple of years, many Android developers &amp;ndash; myself included &amp;ndash; are starting to realize that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s often are not helpful building blocks for their applications. Companies like &lt;a href=&#34;https://medium.com/square-corner-blog/advocating-against-android-fragments-81fd0b462c97&#34;&gt;Square&lt;/a&gt;, &lt;a href=&#34;https://eng.lyft.com/building-single-activity-apps-using-scoop-763d4271b41#.mshtjz99n&#34;&gt;Lyft&lt;/a&gt;, and &lt;a href=&#34;https://eng.uber.com/new-rider-app/&#34;&gt;Uber&lt;/a&gt; are moving away from android-centric architecture. Two common complaints stand out: as the app gets more complicated, the code is &lt;em&gt;difficult to understand&lt;/em&gt; and &lt;em&gt;too rigid to handle their varying use-cases.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-does-testing-have-to-do-with-this&#34;&gt;What does Testing have to do with this?&lt;/h3&gt;

&lt;p&gt;The connection between testability and understandable, flexible code is well expressed in this quotation from &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for a class to be easy to unit-test, the class must…be loosely coupled and highly cohesive &amp;ndash; in other words, well-designed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Coupling and cohesion have direct bearing on how understandable and flexible your code is, so if this quote is right and if unit testing &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s is difficult &amp;ndash; and you likely know that even if you haven&amp;rsquo;t read &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-we-should-stop-putting-logic-in-activities/&#34;&gt;my&lt;/a&gt; &lt;a href=&#34;https://www.philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/&#34;&gt;posts&lt;/a&gt; suggesting as much &amp;ndash; then writing unit tests would have shown us, before Google and painful experiences did, that &lt;code&gt;Activity&lt;/code&gt;s and &lt;code&gt;Fragment&lt;/code&gt;s aren&amp;rsquo;t the building blocks we want for constructing our applications.&lt;/p&gt;

&lt;h3 id=&#34;next-time&#34;&gt;Next Time&amp;hellip;&lt;/h3&gt;

&lt;p&gt;In the next post, I&amp;rsquo;ll try and fail to write an example test against an &lt;code&gt;Activity&lt;/code&gt; and show exactly how the tight coupling and low cohesion of &lt;code&gt;Activity&lt;/code&gt;s makes testing difficult. Next, I&amp;rsquo;ll test drive the same functionality, and we&amp;rsquo;ll end up with testable code. In the following post, I&amp;rsquo;ll show how the resulting code is loosely coupled and highly cohesive and talk about some of the benefits of these properties, including how they open up novel solutions to common problems on Android, like runtime permissions and intermittent connectivity.&lt;/p&gt;

&lt;!-- Misko Hevery quote --&gt;

&lt;!-- Joshua Block quote --&gt;

&lt;hr /&gt;

&lt;p&gt;Image Credit: Maret Hosemann, &amp;ldquo;Der Bruch,&amp;rdquo; &lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/legalcode&#34;&gt;Creative Commons 2.0&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Towards Godless Android Development: How and Why I Kill God Objects</title>
      <link>https://www.philosophicalhacker.com/post/towards-godless-android-development-how-and-why-i-kill-god-objects/</link>
      <pubDate>Sat, 18 Feb 2017 09:27:03 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/towards-godless-android-development-how-and-why-i-kill-god-objects/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://kimjihyok.info/entry/%EB%B2%88%EC%97%AD-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%99%80-%EB%AC%B4%EC%8B%A0%EB%A1%A0%EC%9D%98-%EB%B0%A9%ED%96%A5-God-Object-%EC%A0%9C%EA%B1%B0-%EC%A0%91%EA%B7%BC%EB%A1%A0&#34;&gt;Korean Translation&lt;/a&gt; by Jihyok KIM&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;God is dead&amp;hellip;and also Context is dead.&lt;/p&gt;

&lt;p&gt;&amp;ndash;Friedrich Nietszche (probably)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Godlessness in the context of OO-programming &amp;ndash; unlike godlessness in a broader context &amp;ndash; is &lt;em&gt;uncontroversially&lt;/em&gt; a good thing. Some may want gods in school or gods in government, but &amp;ndash; all other things being equal &amp;ndash; no one really wants gods in their programs.&lt;/p&gt;

&lt;p&gt;In android development specifically, we have a god that we all know and love to hate: &lt;code&gt;Context&lt;/code&gt;.&lt;sup&gt;1&lt;/sup&gt; This post is about why and how I kill off the &lt;code&gt;Context&lt;/code&gt; god in my apps. The reasons and methods for killing off &lt;code&gt;Context&lt;/code&gt; can of course be applied to other kinds of &amp;ldquo;god-slaying.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;why-i-kill-context&#34;&gt;Why I Kill Context&lt;/h3&gt;

&lt;p&gt;Although &lt;code&gt;Context&lt;/code&gt; is a god object and I understand that there are disadvantages of working with god objects, this isn&amp;rsquo;t the main reason I started killing off contexts. Killing &lt;code&gt;Context&lt;/code&gt; is actually something that happened pretty naturally as a result of doing TDD. To see how this could happen, remember that when we&amp;rsquo;re doing TDD, we&amp;rsquo;re engaged in an exercise of wishful thinking: we&amp;rsquo;re writing the interfaces that we want to exist for the objects we&amp;rsquo;re testing. Here&amp;rsquo;s Freeman and Pryce on this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We like to start by writing a test as if its implementation already exists, and then filling in whatever is needed to make it work—what Abelson and Sussman call “programming by wishful thinking”&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we take this way of thinking seriously, a way of thinking that&amp;rsquo;s closely related to the idea that &lt;a href=&#34;https://www.philosophicalhacker.com/post/how-we-misuse-mocks-for-android-tests/&#34;&gt;we shouldn&amp;rsquo;t mock types we don&amp;rsquo;t own&lt;/a&gt;, we wind up with dependencies for our objects that are expressed in the domain of that object, on the one hand, and an adapter layer, on the other. Again, here&amp;rsquo;s Freeman and Pryce:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we don’t want to mock an external API, how can we test the code that drives it? We will have used TDD to design interfaces for the services our objects need—which will be defined in terms of our objects’ domain, not the external library.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I write the ideal interface for my objects first in a test, I find that none of my classes ever really want a &lt;code&gt;Context&lt;/code&gt;. What my objects really want is a way to get localized strings or a way to get a persistent key-value store, things that we usually obtain indirectly through a &lt;code&gt;Context&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When I pass in an object that clearly describes that object&amp;rsquo;s role with respect to the object being tested instead of passing in a &lt;code&gt;Context&lt;/code&gt;, it makes it easier for me to understand my class.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example. Let&amp;rsquo;s say you need to implement the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Show a “rate dialog” to a user if they’ve used the app three times. The user can opt to rate the app, request to be reminded to rate the app, or decline to rate the app. If the user opts to rate the app, take them to the google play store and don’t show the rate dialog again. If the user opts to be reminded to rate the app, reshow the dialog after three days have passed. If the user declines to rate the app, never show the dialog again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This functionality might make us a little nervous, so we let &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;fear drive us to write a test first&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@RunWith&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;MockitoJUnitRunner&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AppRaterPresenterTests&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Mock&lt;/span&gt; AskAppRateView askAppRateView&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Mock&lt;/span&gt; AppUsageStore appUsageStore&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;showsRateDialogIfUsedThreeTimes&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  

    AskAppRatePresenter askAppRatePresenter &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; AskAppRatePresenter&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;appUsageStore&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    when&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;appUsageStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getNumberOfUsages&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;thenReturn&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(3);&lt;/span&gt;

    askAppRatePresenter&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onAttach&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;askAppRateView&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    verify&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;askAppRateView&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;displayAsk&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When I&amp;rsquo;m writing this test and designing my ideal interface for &lt;code&gt;AskAppRatePresenter&lt;/code&gt;, I&amp;rsquo;m &lt;em&gt;not&lt;/em&gt; thinking about &lt;em&gt;how&lt;/em&gt; the number of app usages are stored. They could be stored through &lt;code&gt;SharedPreferences&lt;/code&gt; or through a database or through realm or&amp;hellip; Because of this, I don&amp;rsquo;t make the &lt;code&gt;AskAppRatePresenter&lt;/code&gt; ask for a &lt;code&gt;Context&lt;/code&gt;. All I really care about is that the &lt;code&gt;AskAppRatePresenter&lt;/code&gt; has a way of getting the number of times the app has been used.&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This actually makes it easier for me to read the code later. If I see that a &lt;code&gt;Context&lt;/code&gt; is being injected into an object, I don&amp;rsquo;t really have any strong idea what it might be used for. Its a god. It could be used for any number of things. However, if I see that a &lt;code&gt;AppUsageStore&lt;/code&gt; is being passed in, then I&amp;rsquo;ll be much further towards understanding what the &lt;code&gt;AskAppRatePresenter&lt;/code&gt; does.&lt;sup&gt;5&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-i-kill-context&#34;&gt;How I Kill Context&lt;/h3&gt;

&lt;p&gt;Once we have the test written and failing, we can start to implement what we need to make it pass. Obviously, we&amp;rsquo;ll need a &lt;code&gt;Context&lt;/code&gt; in the implementation, but that can be a detail that the &lt;code&gt;AskAppRatePresenter&lt;/code&gt; doesn&amp;rsquo;t know about. There are two pretty obvious ways of doing this. One is to use a &lt;code&gt;Context&lt;/code&gt; passed into the constructor to get the &lt;code&gt;SharedPreferences&lt;/code&gt; that stores the info we retrieve from a &lt;code&gt;AppUsageStore&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SharedPreferencesAppUsageStore&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;implements&lt;/span&gt; AppUsageStore &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; SharedPreferences sharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    SharedPreferencesAppUsageStore&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Context context&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      sharedPreferences &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSharedPreferences&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;usage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Context&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;MODE_PRIVATE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;getNumberOfUsages&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; sharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;numusages&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The other way is to make the &lt;code&gt;Activity&lt;/code&gt; that hosts the presenter implement the &lt;code&gt;AppUsageStore&lt;/code&gt; interface and pass a reference to the &lt;code&gt;Activity&lt;/code&gt; into &lt;code&gt;AskAppRatePresenter&lt;/code&gt;&amp;rsquo;s constructor:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MainActivity&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Activity &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;implements&lt;/span&gt; AppUsageStore&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; AskAppRateView &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Bundle savedInstanceState&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
      AskAppRatePresenter askAppRatePresenter &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; AskAppRatePresenter&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
      askAppRatePresenter&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onAttach&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;getNumberOfUsages&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; getSharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;usage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Context&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;MODE_PRIVATE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
          &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;usage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, the general recipe for killing a &lt;code&gt;Context&lt;/code&gt; &amp;ndash; or other gods in general &amp;ndash; is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an interface that represents what your class really wants from a &lt;code&gt;Context&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a class that implements this interface; that class may already be a &lt;code&gt;Context&lt;/code&gt; (e.g., an &lt;code&gt;Activity&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Inject that class into your class.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you follow the above recipe consistently, none of your interesting code will actually interact with a &lt;code&gt;Context&lt;/code&gt;. That&amp;rsquo;ll all happen in an adapter layer. When you get to this point, you&amp;rsquo;ll be able to do work on your interesting code without having any gods interfere with your ability to understand your code.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Context&lt;/code&gt; is a god object. We all know that &lt;a href=&#34;https://en.wikipedia.org/wiki/God_object&#34;&gt;god objects are an anti-pattern&lt;/a&gt;, so it might seem like &lt;code&gt;Context&lt;/code&gt; was a mistake. But that&amp;rsquo;s not obvious to me. Here&amp;rsquo;s why. First, as I pointed out in &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/&#34;&gt;my last post&lt;/a&gt;, performance was a huge concern in the early days of Android. Neat abstractions are a computational luxury that may not have been affordable at the time. Second, according to Diane Hackborne, app components are most accurately described as specific interactions with the Android OS. These aren&amp;rsquo;t your typical objects because they are instantiated by the framework and they are the entry point to a large portion of the Android SDK. These two circumstances suggest that making context a god may not have been a bad choice.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Steve Freeman and Nat Pryce, &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;, 141.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid., 121-122&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Interestingly, through doing TDD, we&amp;rsquo;ve stumbled into code that follows &lt;a href=&#34;https://en.wikipedia.org/wiki/Interface_segregation_principle&#34;&gt;the interface segregation principle&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This suggests that there&amp;rsquo;s an inverse relationship between the complexity of an injected class and ease with which we can understand the class being injected. In other words, the more complicated a class&amp;rsquo;s dependencies are, the harder it is to understand the class itself.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Why Android Testing is so Hard: Historical Edition</title>
      <link>https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/</link>
      <pubDate>Thu, 09 Feb 2017 08:28:19 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;As a profession, we also tend to be abysmally ignorant of our own history.&lt;/p&gt;

&lt;p&gt;David West, Object Thinking&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Almost two years ago, I wrote a &lt;a href=&#34;https://www.philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/&#34;&gt;couple&lt;/a&gt; &lt;a href=&#34;https://www.philosophicalhacker.com/2015/04/24/why-android-unit-testing-is-so-hard-pt-2/&#34;&gt;articles&lt;/a&gt; that attempted to answer the question, &amp;ldquo;Why is testing Android apps so hard?&amp;rdquo; In those posts, I suggested that the standard architecture of Android applications is what makes testing difficult. This explanation of the difficulty of testing android apps raises a deeper, more historical question: why did an architecture that makes testing difficult became the default way of building Android apps in the first place?&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the question I want to speculate about in this post. I think there were three things that contributed to a less-than-ideal testing situation on Android: performance concerns, confusion about the purpose of app component classes, and the newness of TDD and automated testing at the time of Android&amp;rsquo;s initial release.&lt;/p&gt;

&lt;h3 id=&#34;performance&#34;&gt;Performance&lt;/h3&gt;

&lt;p&gt;To some extent, there&amp;rsquo;s an inverse relationship between testable code and performant code. As Michael Feathers points out, testable code requires layers of abstraction.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;one pervasive problem in legacy code bases is that there often aren’t any layers of abstraction; the most important code in the system often sits intermingled with low-level API calls. We’ve already seen how this can make testing difficult&amp;hellip;&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Layers of abstraction, as Chet Haase points out, have a performance cost, a cost that we need to particularly aware of as Android developers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If there is some section of code that is executed rarely&amp;hellip;,but which would benefit from a clearer style, then a more traditional layer of abstraction could be the right decision. But if analysis shows that you are re-executing some code path often and causing lots of memory churn in the process, consider these strategies for avoiding excess allocations&amp;hellip;&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although &amp;ldquo;#perfmatters&amp;rdquo; in 2017, performance was a much larger concern when Android was first getting off the ground, which means that the design of the Android APIs and the early practices/architectures for building Android apps was extremely performance sensitive. Its possible that building the layers of abstraction to support testing just wasn&amp;rsquo;t practical in those days.&lt;/p&gt;

&lt;p&gt;The first Android phone, &lt;a href=&#34;https://www.google.com/shopping/product/1556749025834621307/specs?sourceid=chrome-psyapi2&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8&amp;amp;q=tmobile+g1+android&amp;amp;oq=tmobile+g1+android&amp;amp;aqs=chrome..69i57j0l5.2528j0j4&amp;amp;sa=X&amp;amp;ved=0ahUKEwjilvOU0YXSAhVG8CYKHTp2BrAQuC8IjgE&#34;&gt;the G1&lt;/a&gt;, had &lt;em&gt;192 MB of RAM&lt;/em&gt; and a &lt;em&gt;528MHZ&lt;/em&gt; processor. Obviously, we&amp;rsquo;ve come a long way since then, and in many cases, we can now afford the additional layers of abstraction that testability requires.&lt;/p&gt;

&lt;p&gt;One of the more interesting things I&amp;rsquo;ve heard lately that indicates how heavily performance concerns weighed on the design of Android and on the early days of Android development in the trenches comes from Ficus Kirkpatrick, one of the founding members of the Android team, in a recent episode of Android Developers backstage:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;A lot these things like enums and this philosophy of extreme frugality when it comes to CPU cycles or memory&amp;hellip;that&amp;rsquo;s an interesting lens to look at a lot the early Android decisions. I look at a lot of these engineers almost like they were raised during the depression and they learned to scrape the bottom of the pot.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There&amp;rsquo;s a great discussion after this point in the podcast about the tradeoff between performance and development speed. Chet Haase and Tor Norbye push pretty hard on performance concerns while Ficus Fitzpatrick, who is now at Facebook, seems more sympathetic towards trading performance for development speed.&lt;/p&gt;

&lt;p&gt;Who is right &amp;ndash; or whether there was ultimately an unresolved disagreement in the end &amp;ndash; doesn&amp;rsquo;t matter for our purposes. What matters is that their conversation, along with the &lt;a href=&#34;https://plus.google.com/105051985738280261832/posts/YDykw2hstUu&#34;&gt;hoopla&lt;/a&gt; &lt;a href=&#34;https://twitter.com/jakewharton/status/551876948469620737?lang=en&#34;&gt;about&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=5MzayZXtSiQ&#34;&gt;enums&lt;/a&gt;, shows clearly that the folks at Android are still very concerned about performance and this might make them less interested in promoting patterns whose abstractions have some performance overhead, even if that overhead facilitates testing.&lt;/p&gt;

&lt;h3 id=&#34;misunderstanding-android-components&#34;&gt;Misunderstanding Android Components&lt;/h3&gt;

&lt;p&gt;Another reason that the testing situation on Android is so bad may be that we&amp;rsquo;ve fundamentally misunderstood the purpose of Android&amp;rsquo;s app component classes (viz., &lt;code&gt;Activity&lt;/code&gt;, &lt;code&gt;Service&lt;/code&gt;, &lt;code&gt;BroadcastReceiver&lt;/code&gt;, and &lt;code&gt;ContentProvider&lt;/code&gt;). For a long time, I thought that these classes were supposed to facilitate &lt;em&gt;application development&lt;/em&gt;. Not so, says Diane Hackborne:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;With its Java language APIs and fairly high-level concepts, it can look like a typical application framework that is there to say how applications should be doing their work.  But for the most part, it is not.&lt;/p&gt;

&lt;p&gt;It is probably better to call the core Android APIs a &amp;ldquo;system framework.&amp;rdquo;  For the most part, the platform APIs we provide are there to define how an application interacts with the operating system; but for anything going on purely within the app, these APIs are often just not relevant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This same idea gets reiterated by Chet Haase in his &lt;em&gt;Developing for Android&lt;/em&gt; medium blog post series:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Application components (activities, services, providers, receivers) are interfaces for your application to interact with the operating system; don’t take them as a recommendation of the facilities you should architect your entire application around.&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think by know its well-known &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-we-should-stop-putting-logic-in-activities/&#34;&gt;that putting logic in activities and other app component classes makes testing difficult&lt;/a&gt; because of the lack of proper dependency injection. Because many of us believed that we were supposed to be building our applications around these components, we over-used them, worsening the testability situation in our apps.&lt;/p&gt;

&lt;h3 id=&#34;the-rise-of-android-and-unit-testing&#34;&gt;The Rise of Android and Unit Testing&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s one more thing that probably contributed to the sad testing situation on Android: TDD was on the rise at the same time Android was. The first release of Android was in September of 2008. &lt;em&gt;TDD by Example&lt;/em&gt; one of the earliest books written on TDD-style unit testing was written a mere 3 years earlier.&lt;/p&gt;

&lt;p&gt;The importance of automated testing is likely much more widely accepted now than it was then. Perceived importance of testability likely factored into design decisions around the Android SDK and the Android community&amp;rsquo;s willingness to develop practices and architectures that supported testing.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Michael Feathers, &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;, 350-351.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Chet Haase, &lt;em&gt;&lt;a href=&#34;https://medium.com/google-developers/developing-for-android-ii-bb9a51f8c8b9#.p49q9k3uj&#34;&gt;Developing for Android II The Rules: Memory&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;In the Beginning,&amp;rdquo; &lt;a href=&#34;http://androidbackstage.blogspot.com/2016/10/episode-56-in-beginning.html&#34;&gt;&lt;em&gt;Android Developers Backstage&lt;/em&gt;&lt;/a&gt;, ~25:00.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Haase, &lt;em&gt;&lt;a href=&#34;https://medium.com/google-developers/developing-for-android-vii-the-rules-framework-concerns-d0210e52eee3#.yegpenynu&#34;&gt;Developing for Android VII The Rules: Framework&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Why I Avoid Singletons for Android Data Loading</title>
      <link>https://www.philosophicalhacker.com/post/against-singletons-for-android-data-loading/</link>
      <pubDate>Sat, 04 Feb 2017 13:20:35 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/against-singletons-for-android-data-loading/</guid>
      <description>

&lt;p&gt;Imagine for a moment that there&amp;rsquo;s an annoying fly buzzing around your guests at a BBQ you&amp;rsquo;re hosting. You and your guests swat at it a few times, but no one manages to nail the sucker. You run into the house to grab a fly swatter, but you find that even if you wait for the fly to settle down somewhere, you can&amp;rsquo;t quite smash it.&lt;/p&gt;

&lt;p&gt;Frustrated and desperate, you decide to evacuate the party (and the state), get your hands on a nuke, and nuke the fly along with your backyard and neighborhood. Watching the mushroom cloud form from your fallout shelter, you raise glasses with your guests and say, &amp;ldquo;we got&amp;rsquo;em boys. Good work.&amp;rdquo;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Obviously, this is an absurd story. I&amp;rsquo;m telling this brief absurd story because there are parallels between singletons as a data loading solution and nukes as a fly swatter. Singletons for data loading, like nukes, are hard to test, leave a mess behind them, and are overkill. These parallels are the reasons that I try to avoid using singletons for data loading on Android. That&amp;rsquo;s what this post is about.&lt;/p&gt;

&lt;h3 id=&#34;the-fly-data-loading-in-activities&#34;&gt;The Fly: Data Loading in Activities&lt;/h3&gt;

&lt;p&gt;Before I dive into the reasons I try to avoid singletons for data loading in Activities, I want to clearly state the problem for which I think singletons are poorly suited.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the problem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Activity&lt;/code&gt;s are destroyed and re-created on configuration changes.&lt;/li&gt;
&lt;li&gt;If we&amp;rsquo;ve performed an expensive operation to get the data displayed by that &lt;code&gt;Activity&lt;/code&gt;, we&amp;rsquo;ll want a way for the results of long-running operations to be cached across orientation changes.&lt;/li&gt;
&lt;li&gt;If we need to perform an expensive operation to get data, the results of this operation must be held if there&amp;rsquo;s a configuration change while the operation is being performed and delivered once the &lt;code&gt;Activity&lt;/code&gt; has been re-created after the configuration change.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think singletons are a &lt;em&gt;sub-optimal&lt;/em&gt; solution for this specific problem. This is not a post about why singletons are bad, full stop. Let&amp;rsquo;s move on to why I think this.&lt;/p&gt;

&lt;h3 id=&#34;hard-to-test&#34;&gt;Hard to Test&lt;/h3&gt;

&lt;p&gt;Fortunately, nukes are hard to test. You&amp;rsquo;ve got to find a large area that you can pollute with radiation, and, depending on your place in the world order, you need to be prepared to handle varying degrees of fallout from the international community.&lt;/p&gt;

&lt;p&gt;Unfortunately, singletons are also hard to test, and this counts as one strike against them as a data loading solution in my mind. Others have already noted in detail why testing with singletons is hard,&lt;sup&gt;1&lt;/sup&gt; but let&amp;rsquo;s look at a brief example to see why testing with singletons is hard.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you&amp;rsquo;re tasked with implementing a screen that loads data from a database like the explore sessions screen from the google I/O app:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.philosophicalhacker.com/images/session-data-ss.png&#34; alt=&#34;Session list&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Because the fairly complicated logic governing whether the list of sessions should be preceded by various preference cards &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;scares you a little&lt;/a&gt;, you decide to write tests for this screen. Since you know &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-we-should-stop-putting-logic-in-activities/&#34;&gt;you&amp;rsquo;re not going to have an easy time testing logic in an &lt;code&gt;Activity&lt;/code&gt;&lt;/a&gt;, you move the logic to a presenter:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SessionsPresenter&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;present&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;shouldShowSessionNotificationsCard&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      sessionsView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;showSessionNotificationsCard&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;shouldShowConferenceMessagesCard&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      sessionsView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;showConferenceMessagesCard&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;    SessionsStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;      &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;loadSessions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SessionsStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LoadCompleteListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onLoadComplete&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Session&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; sessions&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessions&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;            sessionsView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;showNoSessions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;          &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;            sessionsView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;showSessions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sessions&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;          &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;      
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the first highlighted line, we&amp;rsquo;re accessing a singleton to load the sessions. In the following highlighted lines, we either show the sessions or something indicating that there are no sessions at this time.&lt;/p&gt;

&lt;p&gt;The use of a singleton in this code makes this presenter difficult to test. When we&amp;rsquo;re writing a test for &lt;code&gt;SessionsPresenter&lt;/code&gt;, we need to be able to swap out the implementation of &lt;code&gt;SessionsStore&lt;/code&gt; with stubs that will return canned responses so that we can execute each branch of the if-statement highlighted above. This is not easy with a singleton in place.&lt;/p&gt;

&lt;p&gt;Getting around this problem forces us to create additional methods that are only used by the tests. For example, to test the above code, we&amp;rsquo;d need to add &lt;code&gt;SessionStore.setTestInstance&lt;/code&gt; and set the test instance with a stub during our unit test:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SessionsPresenterTests&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;showsNoSessionsViewWhenNoSessions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;    
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
    SessionsStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setTestInstance&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SessionsStore&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;loadSessions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionsStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;LoadCompleteListener&lt;/span&gt; listener&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        listener&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onLoadComplete&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Collections&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;emptyList&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we need to change the API of the SUT &lt;em&gt;solely&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; for the purpose of testing, our tests are telling us there&amp;rsquo;s a problem with our design.&lt;/p&gt;

&lt;p&gt;Even with these added methods, however, we lose the ability to speed up our tests by running them in parallel.&lt;sup&gt;3&lt;/sup&gt; The likelihood that tests are run regularly is related to how long it takes to run them. Tests are often more likely to be useful the more often they are run, so placing an unneeded limit on how quickly our tests can run is not ideal.&lt;/p&gt;

&lt;p&gt;At this point, some readers may point out that these problems are alleviated if we inject the singleton through the constructor and if we keep our &lt;code&gt;Activity&lt;/code&gt; as a dumb view that isn&amp;rsquo;t scary enough to test. The code for this suggestion might look something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SessionsActivity&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Activity &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Bundle bundle&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;bundle&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SessionsPresenter&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;SessionStore&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;present&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This does alleviate the testing problems at the unit level. However, if we want to stub out what gets returned by the singleton &lt;code&gt;SessionStore&lt;/code&gt; for UI tests, we&amp;rsquo;ll still have to add a &lt;code&gt;SessionStore.setTestInstance&lt;/code&gt; method. Again, modifying the API of our classes for testing purposes is smelly.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using a &lt;code&gt;@Singleton&lt;/code&gt;-scoped dependency that you inject with dagger, then we can facilitate UI testing without adding a &lt;code&gt;setTestInstance&lt;/code&gt; method. This is the best version of the idea of using singletons for loading data in &lt;code&gt;Activity&lt;/code&gt;s. Even if I didn&amp;rsquo;t mind the fact that including dagger was a high price to pay for doing any data loading in an Android app, I still wouldn&amp;rsquo;t ever feel comfortable using &lt;code&gt;@Singleton&lt;/code&gt;-scoped dependencies for data loading for the following reasons.&lt;/p&gt;

&lt;h3 id=&#34;leaves-a-mess-behind-them&#34;&gt;Leaves a mess behind them&lt;/h3&gt;

&lt;p&gt;Data owned by your singleton will live &lt;em&gt;for the entire process&lt;/em&gt;, unless you do something to clean it up. We&amp;rsquo;re often worried about memory on Android devices. &lt;em&gt;Even if our app performs fairly well on devices with low-memory&lt;/em&gt;, irresponsible use of memory can lead to a sort of tragedy of the commons, where the user experience suffers overall.&lt;/p&gt;

&lt;p&gt;Chet Haase in &lt;a href=&#34;https://medium.com/google-developers/developing-for-android-i-understanding-the-mobile-context-fd2351b131f8#.t0wde59q7&#34;&gt;&lt;em&gt;Developing for Android&lt;/em&gt;&lt;/a&gt; captures this well:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if any of these apps consume more memory than they need to, then there will be less system memory left over for the others. When that happens, the system will evict app processes (shutting them down), forcing the user into a situation where apps are constantly re-launching when the user switches to them because they cannot stay present in the background due to memory pressure.&lt;/p&gt;

&lt;p&gt;So overall: use as little memory as you can, because the entire system suffers if you don’t.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If our apps are going to be good citizens on user&amp;rsquo;s devices, we ought to clean up the data owned by our singleton once we&amp;rsquo;re done using it. Singletons for loading data, along with the memory concerns on Android, place an extra burden on us as programmers. Strike two for singletons.&lt;/p&gt;

&lt;p&gt;I can imagine cases and apps where the memory issue isn&amp;rsquo;t a big deal. I work at &lt;a href=&#34;http://www.unikey.com/&#34;&gt;a company where the minimum API level for our app is 20&lt;/a&gt;, so we definitely have less performance concerns than other companies. In cases where the data held by singletons really isn&amp;rsquo;t cause for concern, I could just never clean up the data held by the singleton, which definitely makes working with them easier. Still, there&amp;rsquo;s another reason I try to avoid singleton&amp;rsquo;s for data loading.&lt;/p&gt;

&lt;h3 id=&#34;overkill&#34;&gt;Overkill&lt;/h3&gt;

&lt;p&gt;Nuking a fly is absurd because its overkill. You just want to kill the fly. You don&amp;rsquo;t mean to obliterate the 3 mile radius around the fly.&lt;/p&gt;

&lt;p&gt;Similarly, singletons are overkill. We don&amp;rsquo;t really need the data loaded for our &lt;code&gt;Activity&lt;/code&gt; to live for the entire process. This is precisely why we usually have to clean up some of the data when the &lt;code&gt;Activity&lt;/code&gt; is done using it.&lt;/p&gt;

&lt;p&gt;Often what we really want is data that is cached across configuration changes, but the fact that the cached data within a singleton lives for the entire process makes implementing our retrieval of that data more complicated. Let me explain why.&lt;/p&gt;

&lt;p&gt;Suppose I want to want to send two emails with two different attachments. Both times I go to attach an email, the same &lt;em&gt;type&lt;/em&gt; of Activity will be launched. Suppose this &lt;code&gt;Activity&lt;/code&gt; gets its data from a singleton-based data loader. If both of these &lt;code&gt;Activity&lt;/code&gt;s try to grab data from the Singleton, the user can wind up with stale data the second time they try to attach an email because the first &lt;code&gt;Activity&lt;/code&gt; has already populated the cache with data that was fresh at the time the first &lt;code&gt;Activity&lt;/code&gt; asked for it.&lt;/p&gt;

&lt;p&gt;Of course, these are solvable problems. However, I think it&amp;rsquo;d be better if we didn&amp;rsquo;t have these problems in the first place. It turns out there&amp;rsquo;s already a solution for data loading that doesn&amp;rsquo;t have any of these problems/complications.&lt;/p&gt;

&lt;h3 id=&#34;loaders-a-professional-fly-swatter&#34;&gt;Loaders: A Professional Fly Swatter&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Loader&lt;/code&gt;s are designed for this exact problem. They don&amp;rsquo;t &amp;ldquo;overkill&amp;rdquo; by giving us data that lasts the entire process instead of what we need: data that survives configuration changes. Because of this, there&amp;rsquo;s no need for us to worry about stale data when multiple &lt;code&gt;Activitiy&lt;/code&gt;s need the same data. Moreover, we don&amp;rsquo;t have to worry about cleaning up data once its no long used. Finally, if we use them sensibly, &lt;code&gt;Loader&lt;/code&gt;s don&amp;rsquo;t pose any special challenges to testing.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not denying that it can be difficult to get a handle on how &lt;code&gt;Loader&lt;/code&gt;s work. Nor am I saying that their API is a joy to work with. However, I think trudging through the docs and/or wrapping the Loader API in something more usable (e.g., &lt;a href=&#34;https://www.philosophicalhacker.com/post/rxloader-boilerplate-free-data-loading-with-loaders-and-rxjava/&#34;&gt;RxLoader&lt;/a&gt;) is the best option we have.&lt;/p&gt;

&lt;p&gt;The alternative is to use singletons for data loading in our &lt;code&gt;Activity&lt;/code&gt;s, which, if you buy into my argument and analogy is silly for the same reason it&amp;rsquo;s silly to nuke a fly at a BBQ you&amp;rsquo;re hosting.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Misko Hevery, &amp;ldquo;father of AngularJS,&amp;rdquo; has a really nice explanation of the relationship between singletons and testing as a part of his testing guide &lt;a href=&#34;http://misko.hevery.com/code-reviewers-guide/flaw-brittle-global-state-singletons/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Soley&amp;rdquo; is emphasized because otherwise the statement might feel like a contradiction. I&amp;rsquo;ve been saying recently that tests force us to design better applications, so how can it be that there&amp;rsquo;s a problem if the tests make us change the API of the SUT? There&amp;rsquo;s no problem the if we change the API of our classes to support testing, as long as that change introduces flexibility that can be used both by the application &lt;em&gt;and&lt;/em&gt; by the tests. A &lt;code&gt;setTestInstance&lt;/code&gt; method, as the name implies, is only used by tests. This seems like a sensible way of resolving the contradiction, but honestly, I need to think about this more to be sure.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Espresso Test Addiction: An Anti-pattern</title>
      <link>https://www.philosophicalhacker.com/post/espresso-test-addiction/</link>
      <pubDate>Sat, 28 Jan 2017 09:19:38 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/espresso-test-addiction/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;More than 1000 apps&amp;hellip;they have espresso tests for the first time using the test recorder&amp;hellip;espresso adoption has also grown since the introduction of [the espresso test recorder].&lt;/p&gt;

&lt;p&gt;Android Developers Backstage, &lt;a href=&#34;http://androidbackstage.blogspot.com/2016/10/episode-57-espresso-test-recorder.html&#34;&gt;Episode 37 Espresso Test Recorder&lt;/a&gt;, 31:10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Record-playback tools are almost always a bad idea for any kind of automation, since they resist changeability and obstruct useful abstractions. They are only worth having as a tool to generate fragments of scripts which you can then &lt;strong&gt;edit&lt;/strong&gt; as a proper programming language&amp;hellip;&lt;/p&gt;

&lt;p&gt;Martin Fowler, &lt;a href=&#34;https://martinfowler.com/bliki/TestPyramid.html&#34;&gt;&amp;ldquo;Test Pyramid&amp;rdquo;&lt;/a&gt; (emphasis mine)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Espresso tests make a nice addition to our testing tool-belt. The espresso test recorder, moreover, makes getting started with testing and espresso very easy. As I&amp;rsquo;ve said before, &lt;a href=&#34;https://www.philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/&#34;&gt;getting started with automated testing on Android is hard&lt;/a&gt;, so having nice tools and an clear on-boarding ramp for testing is a good thing.&lt;/p&gt;

&lt;p&gt;Of course, we all know that its possible to have too much of a good thing, and I sometimes worry that espresso and espresso recorder are contributing to the formation of a UI testing addiction in the Android community. I worry, moreover, that this addiction that will probably lead to less testing in the long-run.&lt;/p&gt;

&lt;p&gt;UI tests and test recorders are, of course, not new, so they have well-understood limitations. Moreover, lots of smart programmers have said smart things about how to best use these tools. This post reviews these limitations and best practices in general and suggests how we ought to apply those practices to Android development.&lt;/p&gt;

&lt;h3 id=&#34;ui-tests-outside-the-android-community&#34;&gt;UI Tests Outside the Android Community&lt;/h3&gt;

&lt;p&gt;Outside the Android community, the caution around writing too many UI tests is actually surprisingly loud and clear.&lt;/p&gt;

&lt;p&gt;Mike Cohn, for example, expresses this caution with &lt;a href=&#34;https://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid&#34;&gt;his testing pyramid suggestion&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At the base of the test automation pyramid is unit testing. Unit testing should be the foundation of a solid test automation strategy and as such represents the largest part of the pyramid&amp;hellip;Automated user interface testing is placed at the top of the test automation pyramid &lt;strong&gt;because we want to do as little of it as possible.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cohn warns us in this article (and the book the article is advertising) that if we don&amp;rsquo;t have a healthy test pyramid, then &amp;ldquo;all other testing ends up being performed through the user interface, resulting in tests that are expensive to run, expensive to write, and brittle.&amp;rdquo; This test pyramid suggestion is echoed by &lt;a href=&#34;https://martinfowler.com/bliki/TestPyramid.html&#34;&gt;Martin Fowler&lt;/a&gt; and by &lt;a href=&#34;https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html&#34;&gt;Google&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Michael Feathers, to take another example, also talks about the limitations of large tests, particularly with respect to how useful they are in helping us refactor with confidence:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unit testing is one of the most important components in legacy code work. System-level regression tests are great, but small, localized tests are invaluable. They can give you feedback as you develop and allow you to refactor with much more safety.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And later on, contrasting unit tests with larger tests, he says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Larger tests tend to take longer to execute. This tends to make test runs rather frustrating. Tests that take too long to run end up not being run.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, Gerard Meszaros in his &lt;em&gt;xUnit Test Patterns&lt;/em&gt; has an entire section explaining why over-using UI tests isn&amp;rsquo;t a great idea.&lt;sup&gt;3&lt;/sup&gt; Here&amp;rsquo;s one specific passage with a strong caution against using recorded UI tests in particular:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the last decade [1998-2008], more general-purpose test automation tools have become available for testing applications through their user interfaces. Some of these tools use scripting languages to define the tests; the sexier tools rely on the &amp;ldquo;robot user&amp;rdquo; or &amp;ldquo;record and playback&amp;rdquo; metaphor for test automation. Unfortunately, many of the early experiences with these latter tools left the testers and test managers less than satisfied. The cause was high test maintenance costs caused by the &amp;ldquo;fragile test&amp;rdquo; problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The gist of all of these quotes is that writing too many UI tests will likely result in a suite that is a) too slow to support development/refactoring, b) too difficult to maintain, as changes in the UI can break a large amount of tests.&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;but-what-about-the-robot-pattern&#34;&gt;But what about the &amp;ldquo;robot pattern?&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;At this point, some readers may wonder whether &amp;ldquo;&lt;a href=&#34;https://realm.io/news/kau-jake-wharton-testing-robots/&#34;&gt;the robot pattern&lt;/a&gt;&amp;rdquo; makes writing a ton of UI tests ok. The robot pattern, to refresh your memory, is a way of making your UI tests more resistant to change by hiding the details of view interaction behind &amp;ldquo;robot&amp;rdquo; objects. While the robot pattern does &lt;em&gt;mitigate&lt;/em&gt; the issue of brittle tests, over-relying on UI tests, even with the robot pattern, is still going to result in a sub-par testing suite. Here&amp;rsquo;s why.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by noting that the robot pattern is not new. The robot pattern is just &lt;a href=&#34;https://martinfowler.com/bliki/PageObject.html&#34;&gt;Martin Fowler&amp;rsquo;s page object pattern&lt;/a&gt;.&lt;sup&gt;5&lt;/sup&gt; So, when other software engineers outside the Android community suggest that too much UI testing is a bad idea, its not because they aren&amp;rsquo;t aware of the possibility of &amp;ldquo;the robot pattern.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Next, we can note something obvious about the robot pattern: it does nothing to improve the &lt;em&gt;speed&lt;/em&gt; of UI tests. The lack of speed of UI tests is one of the main disadvantages of over-relying on them.&lt;/p&gt;

&lt;p&gt;Finally, although the robot pattern does make UI tests resistant to small UI changes, it does not allow tests to gracefully adapt to larger UI changes. Suppose, for example, that a particular piece of functionality is moved to a different screen within our app. If this happens, we&amp;rsquo;ll need to update our tests &lt;em&gt;and&lt;/em&gt; our robots.&lt;/p&gt;

&lt;p&gt;For the reasons, the robot pattern doesn&amp;rsquo;t change the fact that we&amp;rsquo;re often better off trying to find a way of testing functionality at the unit-level or integration-level.&lt;/p&gt;

&lt;h3 id=&#34;how-to-use-espresso-tests-and-the-recorder&#34;&gt;How to use Espresso Tests and the Recorder&lt;/h3&gt;

&lt;p&gt;Based on experiences and recommendations of &lt;em&gt;very&lt;/em&gt; experienced software engineers outside the Android community, here&amp;rsquo;s how I recommend we handle use espresso and recorder for UI tests:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If there&amp;rsquo;s a way to test the functionality that you&amp;rsquo;re trying to test at the unit level, do so.&lt;/li&gt;
&lt;li&gt;If you can&amp;rsquo;t do this, refactor so that you can test the functionality at the unit-level. Use the test recorder to record a UI test to support your refactoring to be sure that you didn&amp;rsquo;t break anything.&lt;sup&gt;6&lt;/sup&gt; After you&amp;rsquo;ve refactored your code to test the functionality at the unit-level, delete the recorded test.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re &lt;em&gt;really&lt;/em&gt; interested in testing how the application works &lt;em&gt;as a whole&lt;/em&gt;, using a UI test is fine, but, as the epigraph opening this post suggests, &lt;em&gt;refactor&lt;/em&gt; your recorded tests to use the &amp;ldquo;robot pattern&amp;rdquo; to keep your UI tests resistant to small changes in the UI.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Espresso and the test recorder are great tools, but don&amp;rsquo;t let them suck you into writing too many UI tests. That way lies madness&amp;hellip;and slow, fragile tests. These are tests that won&amp;rsquo;t be useful, and as a result, &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-should-we-unit-test/&#34;&gt;the fear that&amp;rsquo;s supposed to be alleviated by writing unit tests will return&lt;/a&gt;. I don&amp;rsquo;t want to work with code I&amp;rsquo;m afraid to change, so selfishly, I hope we&amp;rsquo;ll all do better here.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Michael Feathers, &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;, 34-35.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid., 35-36.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Gerard Meszaros, &lt;em&gt;xUnit Test Patterns&lt;/em&gt;, 299.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Poor defect localization is another disadvantage of UI tests that I&amp;rsquo;m not covering in detail here. Writing too many UI tests &lt;em&gt;can&lt;/em&gt; be a way of ignoring the design feedback your tests are trying to give you. (&lt;a href=&#34;https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/&#34;&gt;The same thing can happen when we write robolectric tests.&lt;/a&gt;) Unit testing android applications is hard because our Android apps often have bad architecture. Instead of listening to our tests that are telling us &amp;ldquo;your classes are tightly coupled and they violate the principle of single responsibility,&amp;rdquo; we just say, &amp;ldquo;forget unit tests. I&amp;rsquo;ll just test everything through the UI instead.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The key idea of this pattern, however, is definitely older than Fowler&amp;rsquo;s page object pattern. Gerard Meszaros talks about it in &lt;em&gt;xUnit Test Patterns&lt;/em&gt;, for example, which was published in 2007.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This strategy is recommended by both Feathers and Meszaros.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Exploiting Android-Specific Seams for Testing and Flexibility</title>
      <link>https://www.philosophicalhacker.com/post/exploiting-android-specific-seams-for-testing-and-flexibility/</link>
      <pubDate>Sat, 21 Jan 2017 11:20:01 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/exploiting-android-specific-seams-for-testing-and-flexibility/</guid>
      <description>

&lt;p&gt;As I pointed out throughout my &lt;a href=&#34;https://www.philosophicalhacker.com/post/what-makes-android-apps-testable/&#34;&gt;series of posts on writing testable Android applications&lt;/a&gt;, the key to writing testable Android apps, is creating and exploiting seams. During these posts, I pointed out two types of seams that are available in any OO programming language and any programming environment. In this post, I want to highlight some Android-specific seams that we can leverage to make our applications more testable and flexible.&lt;/p&gt;

&lt;h3 id=&#34;manifest-seams&#34;&gt;Manifest Seams&lt;/h3&gt;

&lt;p&gt;Manifest seams allow you to change a manifest that&amp;rsquo;s used for a particular build variant without editing your main manifest in place. Changing your manifest, of course, results in different behavior for your app. These new behaviors can be used to make your app more testable. To flesh out the concept of a manifest seam, let&amp;rsquo;s look at using manifest seams to set up your app&amp;rsquo;s &amp;ldquo;mock mode.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;An application running in mock mode stubs out its interactions with external services for testing purposes.&lt;sup&gt;1&lt;/sup&gt; A nice example of mock mode in action is &lt;a href=&#34;https://github.com/JakeWharton/u2020&#34;&gt;Jake Wharton&amp;rsquo;s u2020 app&lt;/a&gt;. In his implementation of mock mode, Wharton uses an object seam, along with dagger, to swap out views within Activities so that in mock mode, the &lt;code&gt;MainActivity&lt;/code&gt;&amp;rsquo;s view will contain a debug drawer that can be used to configure the stubbing behavior for the app.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MainActivity&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Activity &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Inject&lt;/span&gt; ViewContainer viewContainer&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Bundle savedInstanceState&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;

    ViewGroup container &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; viewContainer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;forActivity&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;    

    inflater&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;inflate&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;layout&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;main_activity&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; container&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    ButterKnife&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;bind&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; container&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;  
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This code gives u2020 users the ability to change mock behavior using the app&amp;rsquo;s UI without having to modify any production code. We could use manifest seams, however, to accomplish the same thing.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Manifest seams are made possible via manifest merging and &lt;a href=&#34;https://developer.android.com/studio/build/manifest-merge.html#merge_rule_markers&#34;&gt;merge rule markers&lt;/a&gt;. To exploit a manifest seam for mock mode, we can use merge rule markers to tell the manifest merger to change the initial &lt;code&gt;Activity&lt;/code&gt; that&amp;rsquo;s launched for a particular build variant.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;&amp;lt;!-- src/mock/AndroidManifest.xml --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;activity&lt;/span&gt;
  &lt;span style=&#34;color: #7D9029&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;.StubConfigActivity&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;android.intent.action.MAIN&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;category&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;android.intent.category.LAUNCHER&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;activity&lt;/span&gt;
  &lt;span style=&#34;color: #7D9029&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;.MainActivity&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;intent-filter&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;tools:node=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;remove&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;action&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;android.intent.action.MAIN&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;category&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;android:name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;android.intent.category.LAUNCHER&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The resulting manifest for the mock build variant will have the &lt;code&gt;StubConfigActivity&lt;/code&gt; as its launching activity, rather than the &lt;code&gt;MainActivity&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I think there are other interesting possibilities here that are worth exploring. For example, you could use merge rule markers to substitute out which actions and categories are on non-launcher &lt;code&gt;Activity&lt;/code&gt;&amp;rsquo;s intent-filter and thereby change which activities are started when we call &lt;code&gt;context.startActivity&lt;/code&gt; with implicit intents.&lt;/p&gt;

&lt;h3 id=&#34;buildconfig-seams&#34;&gt;BuildConfig Seams&lt;/h3&gt;

&lt;p&gt;BuildConfig seams allow us to change the values stored in the &lt;code&gt;BuildConfig&lt;/code&gt;&amp;rsquo;s constants depending on which build variant we&amp;rsquo;re building. By default, &lt;code&gt;BuildConfig&lt;/code&gt; contains some useful values like, &lt;code&gt;DEBUG&lt;/code&gt; and &lt;code&gt;FLAVOR&lt;/code&gt;, but we can actually create additional &lt;code&gt;BuildConfig&lt;/code&gt; constants via gradle. Let&amp;rsquo;s start by looking a simple example of creating a BuildConfig field:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;productFlavors &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  mock &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    buildConfigField&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Boolean&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;MOCK&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A simple use case for BuildConfig seams is setting up the base url for the api your app is hitting. This can make testing easier because you can point your app to a staging, sandbox, mock, or production servers without modifying production code.&lt;sup&gt;3&lt;/sup&gt; Leveraging a BuildConfig seam in this way might look something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;defaultConfig &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  buildConfigField&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;String&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;API_BASE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;\&amp;quot;api.awesomecompany.com\&amp;quot;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
productFlavors &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  sandbox &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    buildConfigField&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;String&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;API_BASE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;\&amp;quot;localhost:8080\&amp;quot;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could then use the BuildConfig field like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #0000FF&#34;&gt;buildGetAwesomenessApiUrl&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;http://&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; BuildConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;API_BASE&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/awesomenesss&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those of you who have read &lt;a href=&#34;https://www.philosophicalhacker.com/post/build-variants-and-link-seams/&#34;&gt;my post on link seams&lt;/a&gt;, BuildConfig seams may just look like a special case of using build variants to create link seams. In some sense, that&amp;rsquo;s true.&lt;/p&gt;

&lt;p&gt;However, BuildConfig seams have an advantage over placing identically named files in different sourcesets for different build variants: you can set a BuildConfig field for the default configuration and override it for specific build variants. You can&amp;rsquo;t do this by placing identically named files in the &lt;code&gt;main&lt;/code&gt; and build-variant sourcesets folders because the compiler will complain that there&amp;rsquo;s two files with the same name.&lt;/p&gt;

&lt;p&gt;There are other things to explore here as well. One use case I&amp;rsquo;ve found for BuildConfig seams is in &lt;em&gt;composing&lt;/em&gt; dagger configuration behavior for multi-dimensional product flavors by storing class names in BuildConfig fields and instantiating them via reflection. I&amp;rsquo;m not very confident that this is a sensible way to use BuildConfig seams, but its interesting anyway, and it might serve as a foundation for a better way to use BuildConfig seams.&lt;/p&gt;

&lt;h3 id=&#34;resource-seams&#34;&gt;Resource Seams&lt;/h3&gt;

&lt;p&gt;Resources from different build variants, like AndroidManifests, get merged. Unlike manifest merging, we don&amp;rsquo;t have merge rule markers that allow us to tweak how the resources are merged. However, we can still take advantage of the default merge behavior to change the behavior of our apps without editing production code in place. The default merge behavior, according to &lt;a href=&#34;https://developer.android.com/studio/write/add-resources.html#resource_merging&#34;&gt;the docs&lt;/a&gt;, is this:&lt;/p&gt;

&lt;p&gt;build variant &amp;gt; build type &amp;gt; product flavor &amp;gt; main source set &amp;gt; library dependencies&lt;/p&gt;

&lt;p&gt;This means that we can place resources in the main source set as a kind of default and override them for specific build variants. Again, this is something that we can&amp;rsquo;t do by placing identically named java files in different sourcesets.&lt;/p&gt;

&lt;p&gt;BuildConfig seams and Resource seams obviously have some similarities, which makes choosing between them confusing. Off the cuff, we can say that using a BuildConfig field is easier than getting a resource value, so we may want to prefer BuildConfig seams when we don&amp;rsquo;t have access to a &lt;code&gt;Context&lt;/code&gt;. Stuffing all of our build variant specific values into a single BuildConfig class, however, isn&amp;rsquo;t going to scale well, so we may want to prefer Resource seams if we do have access to a &lt;code&gt;Context&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Android developers have their own Android-specific seams that they can exploit for testing purposes. Manifest seams rely on manifest merging and merge rule markers. BuildConfig seams rely on the &lt;code&gt;productFlavor.buildConfigField&lt;/code&gt; method. Resource seams rely on Android&amp;rsquo;s default the resource merging behavior.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you don&amp;rsquo;t know why we&amp;rsquo;d want to do this, &lt;a href=&#34;https://android-developers.googleblog.com/2015/12/leveraging-product-flavors-in-android.html&#34;&gt;read this&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Manifest seams may be an inferior way of doing this, as Wharton&amp;rsquo;s strategy allows users to change mock behavior throughout their session with the app, while manifest seams, as we&amp;rsquo;ll see, only allow us to change this behavior when the app is first launched. My purpose here isn&amp;rsquo;t to say which approach is better. Its just to point out that manifest seams exist.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I haven&amp;rsquo;t found much use for mock web servers. I can eliminate flaky tests without them, and they often slow tests down since the tests are still making network requests.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>TDD &gt; The Principle of Single Responsibility</title>
      <link>https://www.philosophicalhacker.com/post/tdd-is-greater-than-the-principle-of-single-responsibility/</link>
      <pubDate>Sat, 14 Jan 2017 10:54:43 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/tdd-is-greater-than-the-principle-of-single-responsibility/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of &lt;strong&gt;realizing grand conceptual structures&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fred Brooks, The Mythical Man-Month&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Grand structures &amp;ndash; whether they are conceptual, programmatic, or physical &amp;ndash; require strong foundations. This is true in two senses.&lt;/p&gt;

&lt;p&gt;In the first, obvious sense, strong foundations are required for a structure to withstand its own weight and the forces that want to knock it down. Structures without strong foundations often collapse.&lt;/p&gt;

&lt;p&gt;In the second, less obvious sense, there&amp;rsquo;s another kind of foundation that&amp;rsquo;s crucial to a structure&amp;rsquo;s integrity: the epistemic foundations that guide the architect as she lays the foundation and builds her structure, the architect&amp;rsquo;s first principles. These epistemic foundations are even more fundamental to the structure&amp;rsquo;s integrity than the foundation the structure actually sits upon. An architect that doesn&amp;rsquo;t understand the foundational principles of her craft builds bad foundations, which leads to structures that collapse.&lt;/p&gt;

&lt;p&gt;The principle of single responsibility is supposed to be this second kind of strong foundation for those of us that &amp;ldquo;build castles in the air.&amp;rdquo; Its a principle that&amp;rsquo;s supposed to help us build software with strong foundations, software that won&amp;rsquo;t topple under its own weight and under the weight of forces that want to knock it down.&lt;/p&gt;

&lt;p&gt;I think that TDD actually serves as a better foundation for designing robust software. The epigraph I opened this article with actually provides a nice preview of why I think this: building abstractions is a big part of building good software, but without these abstractions, the principle of responsibility isn&amp;rsquo;t very helpful in guiding me. I often need something that pushes me to discover and build abstractions in the first place, and TDD does a better job of this than the principle of single responsibility.&lt;/p&gt;

&lt;p&gt;In the rest of this post, I&amp;rsquo;ll unpack and attempt to justify that last statement.&lt;/p&gt;

&lt;h3 id=&#34;abstraction-and-the-psr&#34;&gt;Abstraction and the PSR&lt;/h3&gt;

&lt;p&gt;Imagine for a moment that Bill, another engineer shows you an app he&amp;rsquo;s working on. When you take a look at it, you notice that the app consists of a single class that &lt;em&gt;implements&lt;/em&gt; the entirety of your application. Until recently, if this happened to me, I would have immediately reached for the principle of single responsibility to explain what he did wrong.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Have you ever heard of the principle of single responsibility?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bill:&lt;/strong&gt; Yeah. Actually, that principle was guiding me as I wrote this class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt; Really? Well, what is this class&amp;rsquo; responsibility?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bill:&lt;/strong&gt; Well, this class is responsible for running the app. This class didn&amp;rsquo;t seem to violate the PSR because the class fits Bob Martin&amp;rsquo;s definition of a class that follows the PSR. He says that &amp;ldquo;a class should only have one reason to change.&amp;rdquo;&lt;sup&gt;1&lt;/sup&gt; That&amp;rsquo;s true of this class. There&amp;rsquo;s only one reason it&amp;rsquo;ll change: if the app needs to behave differently, we&amp;rsquo;ll have to change this class. Also, the class passed Steve Freeman and Nat Pryce&amp;rsquo;s test for whether a class follows the PSR: I can state the class&amp;rsquo;s responsibility without any and&amp;rsquo;s, or&amp;rsquo;s, or but&amp;rsquo;s.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This is an absurd conversation, but its an extreme case to demonstrate an important point: whether a class seems to satisfy the principle of single responsibility depends largely on whether we can &lt;em&gt;identify&lt;/em&gt; other responsibilities that our class is tackling. Bill&amp;rsquo;s position feels absurd because we, as experienced developers, can identify other non-trivial responsibilities that are handled by his God class.&lt;/p&gt;

&lt;p&gt;However, here&amp;rsquo;s the kicker: its not always obvious that a class is handling multiple responsibilities. Bob Martin even says this in his chapter on the principle of single responsibility:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The SRP is one of the simplest of the principles, and one of the hardest to get right. Con-
joining responsibilities is something that we do naturally. &lt;strong&gt;Finding&lt;/strong&gt; and separating those responsibilities from one another is much of what software design is really about.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we keep in mind that the act of &lt;em&gt;naming&lt;/em&gt; another responsibility is already the first step creating an abstraction,&lt;sup&gt;4&lt;/sup&gt; we see that Michael Feathers gives us more evidence that finding and separating responsibilities is not a trivial exercise:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;one pervasive problem in legacy code bases is that there often aren’t any layers of abstraction; the most important code in the system often sits intermingled with low-level API calls.&lt;sup&gt;5&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To say that there are no layers of abstraction is to say that the programmer has failed to identify and separate responsibilities. In this particular example, the programmer has failed to identify domain-related responsibilities as separate from the responsibility of talking to some library or framework via low-level API calls.&lt;sup&gt;6&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s one more piece of evidence that identifying responsibilities is not trivial. Again, I&amp;rsquo;m trading here on the idea that identifying responsibilities is the beginning of creating abstractions. Creating abstractions, in turn, is a part of creating a higher-level vocabulary with which to write your programs. Apparently, Kent Beck has said something like this recently:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Reading through my notes &amp;amp; saw this pretty quote: &amp;quot;You’re creating a vocabulary, not writing a program. Be a poet for a moment.&amp;quot; &lt;a href=&#34;https://twitter.com/KentBeck?ref_src=twsrc%5Etfw&#34;&gt;@KentBeck&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jessica (@encompassky) &lt;a href=&#34;https://twitter.com/encompassky/status/813931671116451841?ref_src=twsrc%5Etfw&#34;&gt;December 28, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;Think about how much careful thought, experience, and discovery goes into creating sensible vocabularies. David West has a great bit about this in his book &lt;em&gt;Object Thinking&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we discover new things, we invent (or borrow) new words to express our discovery. When we want to make critical distinctions between or among similar notions, we use specialized vocabularies. The use of special vocabularies is common in our professional lives because, as specialists, we need to become familiar with unique ideas and to make important distinctions that as laypersons we might not make.&lt;sup&gt;7&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we think of programming as naming responsibilities to create abstractions that make up a vocabulary, then the non-triviality of creating vocabularies in general has a direct bearing on the difficulty of identifying responsibilities while writing programs, which, if we take Kent Beck seriously, is just a particular kind of vocabulary construction.&lt;/p&gt;

&lt;p&gt;So, whether a class seems to satisfy the principle of single responsibility depends on whether we can identify other responsibilities a class might be tackling. This isn&amp;rsquo;t a trivial task and the PSR doesn&amp;rsquo;t do anything to aid us in accomplishing it.&lt;/p&gt;

&lt;h3 id=&#34;abstraction-and-tdd&#34;&gt;Abstraction and TDD&lt;/h3&gt;

&lt;p&gt;TDD, on the other hand, actually puts pressure on us to identify responsibilities that may be hidden in the object we&amp;rsquo;re trying to test. This happens for two reasons.&lt;/p&gt;

&lt;p&gt;One reason is that we can&amp;rsquo;t unit test a class at all if we won&amp;rsquo;t have a way of getting the object into the right state for a test and a way of verifying the object is in the correct state after we&amp;rsquo;ve exercised it. Often, doing this requires that we identify an object&amp;rsquo;s dependencies and interactions AS separate objects with separate responsibilities. Steve Freeman and Nat Pryce seem to say something like this without actually using the language of responsibility:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;…to construct an object for a unit test, we have to pass its dependencies to it, which means that we have to know what they are.&lt;sup&gt;8&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There&amp;rsquo;s another quotation that supports my point here, albeit in a less direct way. Freeman and Pryce say, &amp;ldquo;for a class to be easy to unit-test, the class must…be loosely coupled and &lt;strong&gt;highly cohesive&lt;/strong&gt; —in other words, well-designed.&amp;rdquo; Cohesion, in Bob Martin&amp;rsquo;s mind, is closely linked with the idea of a class&amp;rsquo; responsibility, so this quote is almost a way of saying that unit testable classes are likely to follow the PSR.&lt;sup&gt;9&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The second reason TDD helps us identify responsibilities is that a part of the TDD process is to eliminate duplication. Kent Beck actually has a nice summary of how this creates cohesion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The first feature goes in&amp;hellip;the second feature, a variation on the first, goes in. &lt;strong&gt;The duplication between the two features is put in one place, whereas the differences tend to go in different places (different methods or even different classes).&lt;/strong&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quotations from famous software engineers aside, if we think for a second about what would happen if Bill tried to unit test his God class, I think we&amp;rsquo;ll find some intuitive support for the idea that TDD exerts pressure to identify responsibilities.&lt;/p&gt;

&lt;p&gt;For example, his app likely displays data in a format that&amp;rsquo;s different from how its stored in the database. When writing a test to verify that his God object massages the data into a more presentable format correctly, he&amp;rsquo;ll see that the database needs to have specific data pre-loaded in order for the test to pass. He could solve this problem by creating a sandbox database and pre-loading it with specific data, but it would be &lt;em&gt;easier&lt;/em&gt; to unit test his class if he identifies &amp;ldquo;getting data from the database&amp;rdquo; as a separate responsibility, creates a class for it, and injects that dependency into his God class.&lt;/p&gt;

&lt;p&gt;Testing other pieces of functionality of his application will require the same process, which, theoretically, will involve more identifying and separating of responsibilities.&lt;sup&gt;11&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The PSR is supposed to serve as a foundational principle for helping us write good software. However, the PSR isn&amp;rsquo;t helpful if we fail to identify hidden responsibilities that our class may be assuming. Because identifying these responsibilities isn&amp;rsquo;t trivial and because the PSR does nothing to help us with this non-trivial task, the PSR alone isn&amp;rsquo;t very helpful.&lt;/p&gt;

&lt;p&gt;TDD actually does a better job at helping us identify responsibilities. A class won&amp;rsquo;t be easy to unit test unless we&amp;rsquo;ve identified and injected its dependencies, and to identify a dependency is to identify a responsibility. Eliminating duplication, moreover, forces us to identify and create abstractions to co-locate common functionality so that it can be reused, and to identify an abstraction is to identify a responsibility.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Robert Martin, &lt;em&gt;Agile Software Development: Principles, Patterns, and Practices&lt;/em&gt;, 110. Excerpt &lt;a href=&#34;https://drive.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/view&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Steve Freeman and Nat Pryce, &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;, 96-97.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Robert Martin, &lt;em&gt;Agile Software Development: Principles, Patterns, and Practices&lt;/em&gt;, 114. Excerpt &lt;a href=&#34;https://drive.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/view&#34;&gt;here&lt;/a&gt;. Emphasis mine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Michael Feathers, &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;, 350-352.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Perhaps this is why &amp;ldquo;naming things&amp;rdquo; is one of the two things that are hard about computer science, &lt;a href=&#34;https://martinfowler.com/bliki/TwoHardThings.html&#34;&gt;according to Phil Karlton&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I think that a part of the reason finding responsibilities can be difficult is because we have to think at a level of abstraction that is actually lower than the one we were using when we decided to create the class in the first place. When Bill created the &lt;code&gt;Application&lt;/code&gt; class, he did so because he thought, &amp;ldquo;I need a class that&amp;rsquo;ll run my application.&amp;rdquo; When he started writing database-related code in this class, he could continue to think &amp;ldquo;this code is just helping this class fulfill its responsibility of running the app,&amp;rdquo; and in a sense, he would be right, but he&amp;rsquo;d be thinking at the wrong level of abstraction. Dropping down a level, he&amp;rsquo;d see that his Application class displays UI &lt;em&gt;and&lt;/em&gt; talks to a database &lt;em&gt;and&lt;/em&gt;&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;David West, &lt;em&gt;Object Thinking&lt;/em&gt;, 143-144.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Steve Freeman and Nat Pryce, &lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;, 43.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid., 103-104.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Robert Martin, &lt;em&gt;Agile Software Development: Principles, Patterns, and Practices&lt;/em&gt;, 109. Excerpt &lt;a href=&#34;https://drive.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/view&#34;&gt;here&lt;/a&gt;. Martin Actually sees the PSR as being first described using the language of cohesion. Personally, I prefer the vocabulary of cohesion to the PSR because a class can have cohesiveness in degrees. Somehow, the more gradient (vs. binary) way of thinking about class design along this dimension seems to fit better with the idea that identifying responsibilities is related to the level of abstraction we&amp;rsquo;re on when we&amp;rsquo;re thinking about a class, but my thoughts on this aren&amp;rsquo;t well formed enough to say more.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kent Beck, &lt;em&gt;TDD By Example&lt;/em&gt;, 195.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Technically, this doesn&amp;rsquo;t fit the definition of TDD because the tests are written last, but there is a real sense in which the tests are driving the re-design of Bill&amp;rsquo;s app. This is why I say TDD is actually helping him design better classes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Why I Don&#39;t use Robolectric</title>
      <link>https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/</link>
      <pubDate>Fri, 06 Jan 2017 22:01:04 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/</guid>
      <description>

&lt;p&gt;The more that I learn about testing, the more suspicious of Robolectric I get. I&amp;rsquo;m honestly starting to think that many of the heros of unit testing (e.g., Kent Beck, Michael Feathers, Steve Freeman, and Nat Pryce) would be pretty suspicious of Robolectric. Here are my concerns:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Robolectric is &lt;em&gt;largely&lt;/em&gt;&lt;sup&gt;1&lt;/sup&gt; a set of mocks for a set of types we don&amp;rsquo;t own. Mocking types we don&amp;rsquo;t own is not recommended by the folks who invented mocks.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Robolectric turns TDD on its head by allowing us to ignore something our standard unit tests are trying to tell us: our logic is tightly coupled and muddled with Android-SDK-related implementation details. That&amp;rsquo;s why we have such a hard time writing standard unit tests. Instead of listening to the design feedback of standard unit tests, Robolectric asks us to use a giant mock instead.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These concerns lead me to believe that Robolectric should be used sparingly, if at all. Let&amp;rsquo;s look at the concerns in detail. Along the way, I&amp;rsquo;ll be pulling in quotes from Feathers, Freeman, and Pryce to bolster my claim that the folks who are largely responsible for our practices of unit testing today would be suspicious of Robolectric.&lt;/p&gt;

&lt;h3 id=&#34;mocking-types-we-don-t-own&#34;&gt;Mocking Types We Don&amp;rsquo;t Own&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve already talked about how mocking types we don&amp;rsquo;t own can be a problem in &lt;a href=&#34;http://www.philosophicalhacker.com/post/how-we-misuse-mocks-for-android-tests/&#34;&gt;my post on how we misuse mocks for Android development&lt;/a&gt;, so I won&amp;rsquo;t repeat those points in detail here. The gist of this worry is twofold:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;According to Steve Freeman and Nat Pryce, the folks who really popularized mocks, mocking types we don&amp;rsquo;t own partially defeats the purpose of mocking and testing because the process of testing is supposed to tell us something about the design of the code we&amp;rsquo;re mocking. Because we don&amp;rsquo;t own the types, we can&amp;rsquo;t actually do anything with the design feedback our tests are giving us.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Secondly, and perhaps more importantly, mocking types we don&amp;rsquo;t own forces us to ensure that the mocked versions of the types our tests depend on actually match the behavior of their un-mocked counterparts. This is a concern that&amp;rsquo;s shared both by Freeman and Pryce and by Jake Wharton.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;robolectric-turns-tdd-on-its-head&#34;&gt;Robolectric turns TDD on its head&lt;/h3&gt;

&lt;p&gt;Obviously, Android developers aren&amp;rsquo;t the first ones who have tried testing code that relies on a framework. Typically, when folks outside the Android community are test driving code that depends on a framework, TDD encourages them to add a layer of abstraction between the framework and their code. This keeps the code loosely coupled and highly cohesive. The framework code stays at a layer below the application code.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s Freeman and Pryce on this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;we grow our systems a slice of functionality at a time. As the code scales up&amp;hellip;we use two principal heuristics to guide this structuring: Separation of Concerns&amp;hellip;[and] Higher Levels of Abstraction&amp;hellip;Applied consistently, these two forces will push the structure of an application towards something like Cockburn’s “ports and adapters” architecture [Cockburn08] , in which the code for the business domain is isolated from its dependencies on technical infrastructure, such as databases and user interfaces.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Higher levels of abstraction make our code more understandable and maintainable, and in order to achieve this in our design, we need to make sure our objects are &amp;ldquo;Context Independent,&amp;rdquo; which means that &amp;ldquo;each object has no build-in knowledge of the system in which it executes.&amp;rdquo;&lt;sup&gt;3&lt;/sup&gt; A few pages later in the next chapter, they go on to talk about how TDD specifically helps them drive towards this goal:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;to construct an object for a unit test, we have to pass its dependencies to it, which means that we have to know what they are. This encourages context independence, since we have to be able to set up the target object’s environment before we can unit-test it—a unit test is just another context. We’ll notice that an object with implicit (or just too many) dependencies is painful to prepare for testing—and make a point of cleaning it up.&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many of the difficulties we have as Android developers in testing (and otherwise) arise because our systems don&amp;rsquo;t exhibit separation of concerns and higher levels of abstraction. Freeman and Pryce are saying that there&amp;rsquo;s a direct link between these properties and testability, a link that Feathers echos in his book:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;one pervasive problem in legacy code bases is that there often aren’t any layers of abstraction; the most important code in the system often sits intermingled with low-level API calls. We’ve already seen how this can make testing difficult, but the problems go beyond testing. &lt;strong&gt;Code is harder to understand when it is littered with wide interfaces containing dozens of unused methods.&lt;/strong&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The emphasis on the last sentence is mine. It&amp;rsquo;s meant to highlight that Feathers and Freeman and Pryce are in agreement on the link between testability, abstraction, and understandable code.&lt;/p&gt;

&lt;p&gt;So, outside the Android community, its widely recognized that writing tests without any layers of abstraction between our application code and a framework is often impossible, so TDD exerts a positive influence on us to create layers of abstraction and because of this, we wind up with cleaner code.&lt;/p&gt;

&lt;p&gt;Hopefully, now we can start to see why Robolectric actually turns TDD on its head. Let&amp;rsquo;s start by remembering something I noted at the outset of this post: unfortunately, most Android apps are written in a way that muddles and couples application code with Android-SDK-related implementation details. The natural direction TDD with pure unit tests is pushing us in is to &lt;strong&gt;move the code we want to test OUT of Android framework classes like Activities, Fragments, and Services;&lt;/strong&gt; its pushing us in a cleaner direction of separating our application-specific logic from the Android SDK.&lt;sup&gt;6&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Robolectric, on the other hand, allows us to test our apps while leaving our application code mixed in with the Android SDK. Robolectric does this by &amp;ldquo;defanging the Android SDK&amp;rdquo; by mocking types we don&amp;rsquo;t own to make testing easier, but if we take traditional TDD seriously, &lt;strong&gt;this is exactly backwards&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t need to make testing easier by leaving our app code the same and changing the way we do testing. Instead, we need to make testing easier by listening to the tests and moving our application specific logic to a layer that&amp;rsquo;s higher than the Android SDK.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So, there you have it. Those are the biggest reasons why I don&amp;rsquo;t use robolectric. If you&amp;rsquo;ve got some ideas on where robolectric may be appropriate, I&amp;rsquo;d love to hear them.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Jake Wharton has pointed out &lt;a href=&#34;https://www.reddit.com/r/androiddev/comments/5mimhe/why_i_dont_use_roboletric_philosophical_hacker/dc40feu/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;fragmentedpodcast.com/episodes/7/&#34;&gt;here&lt;/a&gt; that some parts of Robolectric actually use real Android code, so I guess these parts wouldn&amp;rsquo;t really count as mocks.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Growing Object Oriented Software Guided by Tests&lt;/em&gt;, Steve Freeman and Nat Pryce, 93-94.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid., 99-100.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ibid., 103-104.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;, Michael Feathers, 350-352. Emphasis mine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To some extent, I&amp;rsquo;ve been hitting on this at various points. See &lt;a href=&#34;https://www.philosophicalhacker.com/2015/04/10/against-android-unit-tests/&#34;&gt;Against Android Unit Tests&lt;/a&gt;, &lt;a href=&#34;https://www.philosophicalhacker.com/post/why-we-should-stop-putting-logic-in-activities/&#34;&gt;Why we shouldn&amp;rsquo;t put logic in Activities&lt;/a&gt; and &lt;a href=&#34;post/object-seams-and-mvp-for-testability.md&#34;&gt;Object Seams and MVP&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>What Should we Unit Test?</title>
      <link>https://www.philosophicalhacker.com/post/what-should-we-unit-test/</link>
      <pubDate>Sun, 01 Jan 2017 16:41:45 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-should-we-unit-test/</guid>
      <description>

&lt;p&gt;When I go to work, I&amp;rsquo;m afraid of three things. I worry that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the new feature I&amp;rsquo;m implementing won&amp;rsquo;t work as expected&lt;/li&gt;
&lt;li&gt;the code I&amp;rsquo;m tweaking will break functionality that used to work&lt;/li&gt;
&lt;li&gt;the application isn&amp;rsquo;t architected in a way that makes it easy for me to adapt it to ever-changing business requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Automated testing is supposed to help alleviate all three of these fears, but when we&amp;rsquo;re first getting started with automated testing, it can be difficult to know where to start. We might look at a piece of code and wonder to ourselves, &amp;ldquo;Should I write a test for this code?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Cursory research on the question yields platitudes like &amp;ldquo;unit test your business logic,&amp;rdquo; but when I first got started, that didn&amp;rsquo;t really mean much to me&lt;sup&gt;1&lt;/sup&gt; and now that I have a bit more experience writing android unit tests, I find that answer to be too simplistic.&lt;/p&gt;

&lt;p&gt;Over-zealous testing enthusiasts may shout a different answer at us: &amp;ldquo;YOU SHOULD TEST (ALMOST) EVERYTHING!&amp;rdquo; They may be right. They&amp;rsquo;re not over-zealous because of how much they want us to test. Rather, they&amp;rsquo;re over-zealous because that&amp;rsquo;s a very unhelpful answer to the question &amp;ldquo;Where should I &lt;em&gt;start&lt;/em&gt; testing?&amp;rdquo; Its simply not true that all tests are equally helpful, a fact that Kent Beck, the guy who popularized TDD, recently tweeted about:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Being proud of 100% test coverage is like being proud of reading every word in the newspaper. Some are more important than others.&lt;/p&gt;&amp;mdash; Kent Beck (@KentBeck) &lt;a href=&#34;https://twitter.com/KentBeck/status/812703192437981184?ref_src=twsrc%5Etfw&#34;&gt;December 24, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;I think that if we keep in mind the fears that lead us to write tests in the first place, we&amp;rsquo;ll have a much easier time figuring out what to test. This should come as no surprise. After all, Kent Beck&amp;rsquo;s answer to the question of what to test is this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write tests until fear is transformed into boredom.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post is about the tests that fear drives us to write, tests that we should be spending most of our time writing.&lt;/p&gt;

&lt;h3 id=&#34;when-new-functionality-is-complicated&#34;&gt;When new functionality is complicated&lt;/h3&gt;

&lt;p&gt;Sometimes we write complicated code when simpler code could have done the trick. Sometimes, however, we can&amp;rsquo;t make our code any simpler. The problem we&amp;rsquo;re solving or the domain/rule we&amp;rsquo;re modeling is just complicated. When this happens, I get a little anxious. For example, suppose you had to implement the following functionality:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Show a &amp;ldquo;rate dialog&amp;rdquo; to a user if they&amp;rsquo;ve used the app three times. The user can opt to rate the app, request to be reminded to rate the app, or decline to rate the app. If the user opts to rate the app, take them to the google play store and don&amp;rsquo;t show the rate dialog again. If the user opts to be reminded to rate the app, reshow the dialog after three days have passed. If the user declines to rate the app, never show the dialog again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This isn&amp;rsquo;t terribly complicated, but its enough to make me anxious that I&amp;rsquo;ve covered all my bases as I&amp;rsquo;m writing the code. This is the kind of thing I&amp;rsquo;d write a unit test for.&lt;/p&gt;

&lt;h3 id=&#34;when-you-ve-got-old-code-that-breaks-often&#34;&gt;When you&amp;rsquo;ve got old code that breaks often&lt;/h3&gt;

&lt;p&gt;Sometimes there are parts of a code base that are very brittle. I typically dread having to make changes in these parts of a codebase. Even worse: some brittle parts of the code base have to change often and this causes lots of bugs. Making changes in this kind of code is like leaving food and dirty dishes out a crappy apartment: it invites bugs.&lt;/p&gt;

&lt;p&gt;Working on code that changes often and is often the source of bugs is maybe the scariest part of being a software engineer. You watch your co-workers trudge through the scary code and then they eventually find out the code that they changed introduced a bug. When you get assigned a ticket in that area, you have to pretend that you didn&amp;rsquo;t just see your co-worker get pwned by the code there. The fear is strong, so this is a great place to write tests.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, brittle code isn&amp;rsquo;t typically code that going to be easily unit testable, so you may have to settle for a functional-level test. Alternatively, you could employ some very conservative refactoring to get the brittle code into a unit-testable state.&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;when-you-think-your-code-will-change&#34;&gt;When you think your code will change&lt;/h3&gt;

&lt;p&gt;If you think you&amp;rsquo;re code will change, you&amp;rsquo;ve got a few reasons to write tests for it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tested code can be changed without introducing bugs.&lt;/li&gt;
&lt;li&gt;Tested code has a more flexible architecture that makes it is easier to change.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For some of us, all the code we write is susceptible to change. That&amp;rsquo;s why test zealots aren&amp;rsquo;t crazy in my mind. However, we can and should prioritize code that we think it is more likely to change in the near feature and make sure that we have tests around that code.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you let fear be your guide, you&amp;rsquo;ll write the tests you need to write. We&amp;rsquo;re writing tests because we&amp;rsquo;re afraid that if we don&amp;rsquo;t, new functionality won&amp;rsquo;t work as expected, that we&amp;rsquo;ll break stuff that used to work, or that we won&amp;rsquo;t be able to cope with changing business requirements. Keeping these fears in mind will lead us to write tests when we&amp;rsquo;re writing complicated new features, when we&amp;rsquo;re finding that our old code breaks often, and when we suspect that our code will need to change.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I think this is partially because many of us in the android community don&amp;rsquo;t have a firm grasp of the meaning of the phrase &amp;ldquo;business logic.&amp;rdquo; People often give hand-wavy definitions of business logic during their presentations. (I&amp;rsquo;ve been guilty of giving such definitions myself.) Sometimes I&amp;rsquo;ll even hear someone give an example of business logic and I&amp;rsquo;ll think to myself, &amp;ldquo;That&amp;rsquo;s not really business logic.&amp;rdquo; (I thought this when I heard Jake Wharton&amp;rsquo;s example of business logic in &lt;a href=&#34;http://fragmentedpodcast.com/episodes/7/&#34;&gt;Fragmented Episode 7 on testing&lt;/a&gt;.) Another reason I think this platitude is unhelpful is that business logic, on whatever definition you fancy, is often mixed in with all other types of code in Android applications. This makes its hard to tease out the subset of the Android code that is properly called &amp;ldquo;business logic.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;TDD By Example&lt;/em&gt;, Kent Beck, 194. On this same page, Beck also reluctantly gives us a list of things to test: conditionals, loops, operations, and polymorphism.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I&amp;rsquo;d love it if there was a tool that looked through my jira bug tickets, found the associated commits for addressing those tickets, and told me the classes and packages that needed to be changed to fix those bugs. I&amp;rsquo;d focus my efforts on writing tests for these buggy classes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Michael Feathers talks about these conservative refactoring techniques in &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>How we Misuse Mocks for Android Tests</title>
      <link>https://www.philosophicalhacker.com/post/how-we-misuse-mocks-for-android-tests/</link>
      <pubDate>Tue, 27 Dec 2016 08:21:42 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/how-we-misuse-mocks-for-android-tests/</guid>
      <description>

&lt;p&gt;Mocks are a pretty standard tool in our android developer tool belt. The extent to which we should use this tool for unit testing is a complicated and controversial issue.&lt;sup&gt;1&lt;/sup&gt; Within the Android community specifically, I think that a part of the controversy is due to confusion over the intended use of mocks. More specifically, some android developers seem intent on mocking types they don&amp;rsquo;t own and on verifying all interactions of a target class with a collaborator.&lt;/p&gt;

&lt;p&gt;It turns out that these two practices are not recommended by the folks who invented mocks because they have well-known have disadvantages. These disadvantages are precisely the ones that people seem to cite when they argue against mocks. There may be good arguments against mocks, but citing disadvantages of using them in a way that they aren&amp;rsquo;t meant to be used is about as compelling as arguing that we shouldn&amp;rsquo;t use hammers because they aren&amp;rsquo;t good for fastening screws.&lt;/p&gt;

&lt;p&gt;In this post, we&amp;rsquo;ll look at two ways I&amp;rsquo;ve seen mocks misused. Hopefully, by pointing out the intended use of mocks, we&amp;rsquo;ll find them more useful for unit testing android applications.&lt;/p&gt;

&lt;h3 id=&#34;too-many-verifications&#34;&gt;Too many verifications&lt;/h3&gt;

&lt;p&gt;A common complaint about mocks is that they tie tests too closely with the implementation details of the target code. Since we want our tests to help us refactor those implementation details with confidence, this coupling ruins one of the major advantages of writing tests.&lt;/p&gt;

&lt;p&gt;There are two things we can say in response to this complaint.&lt;/p&gt;

&lt;p&gt;First, Steve Freeman and Nat Pryce, the folks who really pioneered the use of mocks in testing, are well aware that this can occur when using mocks. This is why they recommend that we &amp;ldquo;write few expectations&amp;rdquo; in our tests using mocks:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A colleague, Romilly Cocking, when he first started working with us, was surprised by how few expectations we usually write in a unit test. Just like “everyone” has now learned to avoid too many assertions in a test, we try to avoid too many expectations. If we have more than a few, then either we’re trying to test too large a unit, or we’re locking down too many of the object’s interactions.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Second, whether a particular object&amp;rsquo;s interaction with a collaborator is an implementation detail depends on how we think about object-oriented programming and on the most compelling interpretation of OO I&amp;rsquo;m aware of, some interactions with collaborators aren&amp;rsquo;t really implementation details. Freeman puts this nicely &lt;a href=&#34;http://higherorderlogic.com/2013/01/some-mocks/&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some of us think about objects in terms of Alan Kay’s emphasis on message passing, others don’t. In my world, I’m interested in the protocols of how objects communicate, not what’s inside them, so testing based on interactions is a natural fit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think a compelling example of an object interacting with a collaborator in a way that isn&amp;rsquo;t an implementation detail is actually a &lt;code&gt;Presenter&lt;/code&gt; interacting with a &lt;code&gt;View&lt;/code&gt; in MVP. Take, for example, this &lt;code&gt;Presenter&lt;/code&gt; that we talked about in &lt;a href=&#34;https://www.philosophicalhacker.com/post/object-seams-and-mvp-for-testability/&#34;&gt;my post on MVP and object seams&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Presenter&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;presentCards&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;mIsAttendeeAtVenue&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;mMsgSettings&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasAnsweredMessagePrompt&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;background-color: #ffffcc&#34;&gt;        mExploreView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;addMessageOptInCard&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;
      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this snippet, the &lt;code&gt;Presenter&lt;/code&gt;&amp;rsquo;s responsibility is to display the appropriate cards depending on various factors. When we write a test that includes the line &lt;code&gt;verify(mExploreView).addMessageOptInCard()&lt;/code&gt;, we&amp;rsquo;re merely making sure that the &lt;code&gt;Presenter&lt;/code&gt; does its job. We&amp;rsquo;re concerned with the &amp;ldquo;what,&amp;rdquo; not with the &amp;ldquo;how.&amp;rdquo; If &lt;code&gt;mExploreView&lt;/code&gt; wants to change how it actually adds a message opt in card, we don&amp;rsquo;t care. If the implementation of &lt;code&gt;MessageSettings.hasAnsweredMessagePrompt&lt;/code&gt; changes, again, we don&amp;rsquo;t care.&lt;/p&gt;

&lt;h3 id=&#34;mocking-types-we-don-t-own&#34;&gt;Mocking Types We Don&amp;rsquo;t Own&lt;/h3&gt;

&lt;p&gt;Although the exceptions thrown by running android unit tests that exercise unmocked android dependencies suggests otherwise, we shouldn&amp;rsquo;t be in the business of mocking types we don&amp;rsquo;t own. Again, Freeman and Pryce are explicit about the disadvantages of doing this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We find that tests that mock external libraries often need to be complex to get the code into the right state for the functionality we need to exercise. The mess in such tests is telling us that the design isn’t right but, instead of fixing the problem by improving the code, we have to carry the extra complexity in both code and test. A second risk is that we have to be sure that the behavior we stub or mock matches what the external library will actually do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This second risk is actually something that Jake Wharton has commented on explicitly in the context of using robolectric for Android testing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[With robolectric], you end up testing the wrong thing&amp;hellip;your test is testing the robolectric implementation of these lifecycles and these mechanisms&amp;hellip;the fact that you&amp;rsquo;re relying on those behaviors&amp;hellip;it&amp;rsquo;s going to devalue the actual test itself.&lt;/p&gt;

&lt;p&gt;-Jake Wharton, Fragmented Podcast Episode 7 4:10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The approach recommended by Freeman and Pryce &amp;ndash; and the approach that I strive to follow when writing tests for my code &amp;ndash; is to instead write an adapter layer that translates requests from our application to the third party library, which in this case is the Android SDK. The &lt;code&gt;View&lt;/code&gt; in MVP is often a part of this adapter layer, as it translates requests made in the language of our application into code that talks directly to the Android SDK.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So, don&amp;rsquo;t make too many verifications on your mocks and don&amp;rsquo;t mock types you don&amp;rsquo;t own. Following this advice &amp;ndash; advice that&amp;rsquo;s given by the inventors of mocks &amp;ndash; will make your tests simpler and less tied to implementation details of the class you&amp;rsquo;re trying to test.&lt;sup&gt;3&lt;/sup&gt; If we follow this advice, I think we&amp;rsquo;ll find that mocks are a very apt tool for unit testing android applications.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;See &lt;a href=&#34;http://martinfowler.com/articles/mocksArentStubs.html&#34;&gt;&amp;ldquo;Mocks Aren&amp;rsquo;t Stubs&amp;rdquo;&lt;/a&gt; and &lt;a href=&#34;http://higherorderlogic.com/2013/01/some-mocks/&#34;&gt;&amp;ldquo;Some Mocks&amp;rdquo;&lt;/a&gt; for example.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;Growing Object Oriented Software Guided by Tests,&amp;rdquo; 319.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I actually think following these two pieces of advice leads to a virtuous circle: if you only mock types you own, then you have to define types in the language of your application. This makes your test less coupled to implementation details, as stubbing these types in the arrange step of your unit test will actually just feel like you&amp;rsquo;re declaratively specifying preconditions in the language of your application. Conversely, there&amp;rsquo;s a vicious cycle caused by mocking types you don&amp;rsquo;t own. You&amp;rsquo;re tests are going to be more tied to implementation details and because mocking types we don&amp;rsquo;t own winds up being complicated, its especially painful to change tests when implementation details need to change.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>