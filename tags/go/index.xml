<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Philosophical Hacker</title>
    <link>http://kmdupr33.github.io/tags/go/</link>
    <description>Recent content in Go on Philosophical Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Jan 2016 10:43:26 -0500</lastBuildDate>
    <atom:link href="http://kmdupr33.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting started with Gomock</title>
      <link>http://kmdupr33.github.io/post/getting-started-with-gomock/</link>
      <pubDate>Wed, 20 Jan 2016 10:43:26 -0500</pubDate>
      
      <guid>http://kmdupr33.github.io/post/getting-started-with-gomock/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;http://www.philosophicalhacker.com/2016/01/13/should-we-use-mocking-libraries-for-go-testing&#34;&gt;my last post&lt;/a&gt;, I talked about why I started using gomock, a mocking library that facilitates testing in go. If you found what I said in that post at all compelling, you might have decided to give gomock a try and you might have noticed that the documentation isn&amp;rsquo;t as helpful as it could be. This post is meant to supplement the documentation. It&amp;rsquo;s a brief tutorial on how to get started with gomock.&lt;/p&gt;

&lt;h3 id=&#34;your-first-mock-utilizing-test:6cd9afeec5930d76953b73f2578dd3db&#34;&gt;Your first mock-utilizing test&lt;/h3&gt;

&lt;p&gt;To get started using gomock, first follow the installation instructions laid out in the gomock &lt;a href=&#34;https://github.com/golang/mock&#34;&gt;repo&amp;rsquo;s readme&lt;/a&gt;. Once you&amp;rsquo;ve installed gomock, you can start generating mocks for your tests. Let&amp;rsquo;s explore how gomock works with an example.&lt;/p&gt;

&lt;p&gt;Suppose you&amp;rsquo;re writing a simple server that allows users to lookup go programmers (gophers) by name. The handler function for that server might look something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt; FindHandler(gf GopherFinder) http.HandlerFunc {

	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;http.Request) {

		gopher, err &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; gf.Find(r.URL.Path[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;:])
		&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;nil&lt;/span&gt; {
			w.WriteHeader(&lt;span style=&#34;color: #666666&#34;&gt;500&lt;/span&gt;)
			&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;
		}

		gopherBytes, err &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; json.Marshal(gopher)
		&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;nil&lt;/span&gt; {
			w.WriteHeader(&lt;span style=&#34;color: #666666&#34;&gt;500&lt;/span&gt;)
			&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;
		}

		w.Write(gopherBytes)
	}
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, say we want to write a unit test that ensures that this function works properly. The first thing that this function should do is pull the gopher&amp;rsquo;s name data off of the &lt;code&gt;Request&lt;/code&gt; struct and pass that name into the &lt;code&gt;Find()&lt;/code&gt; method of the &lt;code&gt;GopherFinder&lt;/code&gt;. With Gomock, we can create a mock &lt;code&gt;GopherFinder&lt;/code&gt; that will fail the test if it does not receive a call to &lt;code&gt;Find()&lt;/code&gt; with the appropriate arguments.&lt;/p&gt;

&lt;p&gt;First, we generate the file that will allow us to mock &lt;code&gt;GopherFinder&lt;/code&gt; by running following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mockgen -destination mock_gopher_finder.go \
github.com/kmdupr33/philhackerblogcode \
GopherFinder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command takes two arguments. The first argument is an import path leading to the &lt;em&gt;interfaces&lt;/em&gt; that you want to mock. The second argument is a comma separate list of interfaces to mock.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The command also takes several flags, but the most import flag to pass in is the &lt;code&gt;-destination&lt;/code&gt; flag. This flag specifies the the file you want the mock source code to live in. Without this flag, the generated mock code is simply printed to standard output.&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve generated the code to support our mock &lt;code&gt;GopherFinder&lt;/code&gt;, we can create a mock for a test of the &lt;code&gt;FindHandler&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;package&lt;/span&gt; philhackerblogcode_test

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;

	. &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;github.com/kmdupr33/philhackerblogcode&amp;quot;&lt;/span&gt;

	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
	&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;github.com/kmdupr33/philhackerblogcode/mock_philhackerblogcode&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt; TestHandler(t &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;testing.T) {

	mockCtrl &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; gomock.NewController(t)
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;defer&lt;/span&gt; mockCtrl.Finish()
	mgf &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; mock_philhackerblogcode.NewMockGopherFinder(mockCtrl)
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;	mgf.EXPECT().Find(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;andrewgerrand&amp;quot;&lt;/span&gt;)
&lt;/span&gt;
	h &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; FindHandler(mgf)

	wr &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; httptest.NewRecorder()
	url, _ &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; url.Parse(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;http://gopherfinder.com/andrewgerrand&amp;quot;&lt;/span&gt;)
	r &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;http.Request{URL: url}

	h(wr, r)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The highlighted line above is the call where you actually specify which methods the mock &lt;code&gt;GopherFinder&lt;/code&gt; is expecting to receive during the test. Here we tell the mock that we&amp;rsquo;re expecting a call to the &lt;code&gt;Find()&lt;/code&gt; method with an argument of &amp;ldquo;andrewgerrand.&amp;rdquo;&lt;/p&gt;

&lt;h1 id=&#34;handling-circular-dependencies:6cd9afeec5930d76953b73f2578dd3db&#34;&gt;Handling Circular Dependencies&lt;/h1&gt;

&lt;p&gt;Notice that the package for the above snippet of code is &lt;code&gt;philhackerblogcode_test&lt;/code&gt; instead of &lt;code&gt;philhackerblogcode&lt;/code&gt;. Typically, tests are placed in the same package as the code that those tests exercise, but if you do this when using gomock you are probably going to introduce a circular dependency between the package you are testing and the package that contains the generated mock code.&lt;/p&gt;

&lt;p&gt;The mockgen commmand generates files that are in the package mock_&amp;lt;package_containing_interfaces_to_be_mocked&amp;gt;. The mock package generated by mockgen will likely depend on the package that you&amp;rsquo;re testing and the package you are testing, if the tests live in that package, will depend on the mock package.&lt;/p&gt;

&lt;p&gt;The way to avoid this circular dependency is to place your tests in a package that&amp;rsquo;s different from the package you are testing. Next, have your test code import both the package you&amp;rsquo;d like to test and the mock package that the test depends upon. As Andrew Gerrand points out in his &lt;a href=&#34;https://www.youtube.com/watch?v=ndmB0bj7eyw&#34;&gt;testing techniques talk&lt;/a&gt;, this is a standard way of avoiding circular circular dependencies while testing.&lt;/p&gt;

&lt;h1 id=&#34;stubbing-with-gomock:6cd9afeec5930d76953b73f2578dd3db&#34;&gt;Stubbing with gomock&lt;/h1&gt;

&lt;p&gt;The above test ensures that the &lt;code&gt;HandlerFunc&lt;/code&gt; returned by &lt;code&gt;GetHandler&lt;/code&gt; calls the &lt;code&gt;GopherFinder&lt;/code&gt; with the appropriate arguments, but the &lt;code&gt;HandlerFunc&lt;/code&gt; has more behavior that we can test. One of the things the &lt;code&gt;HandlerFunc&lt;/code&gt; should do is respond with a 500 if the &lt;code&gt;GopherFinder&lt;/code&gt; returns an error while finding a gopher. In order to test this additional behavior, we need to force the &lt;code&gt;GopherFinder&lt;/code&gt; to return an error for the purposes of the test.&lt;/p&gt;

&lt;p&gt;Fortunately, Gomock also allows us to do exactly this. It allows the mocks it generates to behave like stubs.&lt;sup&gt;2&lt;/sup&gt; You can specify the return value that should be returned by using the &lt;code&gt;Return()&lt;/code&gt; method on the result of calling &lt;code&gt;EXPECT()&lt;/code&gt; and the method you are expecting:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;func&lt;/span&gt; TestHandler(t &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;testing.T) {
	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
	mgf &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; mock_philhackerblogcode.NewMockGopherFinder(mockCtrl)
&lt;span style=&#34;background-color: #ffffcc&#34;&gt;	mgf.EXPECT().
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;		Find(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;andrewgerrand&amp;quot;&lt;/span&gt;).
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;		Return(Gopher{}, errors.New(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;error for test purposes&amp;quot;&lt;/span&gt;))
&lt;/span&gt;
	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;

	wr &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; httptest.NewRecorder()
	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
	r &lt;span style=&#34;color: #666666&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;http.Request{URL: url}

	h(wr, r)

&lt;span style=&#34;background-color: #ffffcc&#34;&gt;	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; wr.Code &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;500&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;		t.Errorf(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Expected code: %d, actual code: %d&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;500&lt;/span&gt;, wr.Code)
&lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;	}
&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Because we&amp;rsquo;ve told the mock &lt;code&gt;GopherFinder&lt;/code&gt; to return an error when its &lt;code&gt;Find()&lt;/code&gt; method is called, we can test to see that the &lt;code&gt;HandlerFunc&lt;/code&gt; actually writes out a 500 response code when the &lt;code&gt;GopherFinder&lt;/code&gt; returns an error.&lt;/p&gt;

&lt;h2 id=&#34;notes:6cd9afeec5930d76953b73f2578dd3db&#34;&gt;Notes&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The mockgen command can also be run in &amp;ldquo;source mode.&amp;rdquo; In source mode, you simply pass in the source file containing interfaces to be mocked as an argument. See &lt;a href=&#34;https://github.com/golang/mock#running-mockgen&#34;&gt;the docs&lt;/a&gt; for more info.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For more on the difference between mocks and stubs, see Martin Fowler&amp;rsquo;s &lt;a href=&#34;http://martinfowler.com/articles/mocksArentStubs.html&#34;&gt;Mocks aren&amp;rsquo;t Stubs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>