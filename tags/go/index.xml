<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Philosophical Hacker</title>
    <link>https://www.philosophicalhacker.com/tags/go/</link>
    <description>Recent content in go on Philosophical Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Feb 2016 21:30:42 -0500</lastBuildDate>
    
	<atom:link href="https://www.philosophicalhacker.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing Package Implementation from &#39;the Outside&#39;</title>
      <link>https://www.philosophicalhacker.com/post/testing-package-implmentation-details-from-the-outside/</link>
      <pubDate>Wed, 03 Feb 2016 21:30:42 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/testing-package-implmentation-details-from-the-outside/</guid>
      <description>Sometimes you need to test a package&amp;rsquo;s implementation from outside of the package containing the implementation you&amp;rsquo;d like to test. This post briefly covers why this need arises and how we can meet that need. Much of the information here is already covered in Andrew Gerrand&amp;rsquo;s testing techniques talk, so if you&amp;rsquo;ve watched that, you&amp;rsquo;ll probably only think the last section of this post is interesting.
Why? Like I just said, sometimes you need to test a package&amp;rsquo;s implementation from outside of the package containing the implementation you&amp;rsquo;d like to test.</description>
    </item>
    
    <item>
      <title>Table-driven tests with Gomock</title>
      <link>https://www.philosophicalhacker.com/post/table-driven-tests-with-gomock/</link>
      <pubDate>Sat, 23 Jan 2016 13:01:07 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/table-driven-tests-with-gomock/</guid>
      <description>Table-driven tests are a common testing pattern for go tests. Since I recently started working with gomock, I wondered if there was a way to use table-driven tests with gomock mocks. It turns out that this is definitely possible, and that&amp;rsquo;s what this post is about. Before I show how to combine table-driven tests with gomock mocks, I briefly review how gomock and table-driven tests work and I try to show why you might want to combine table-driven tests with mocks in the first place.</description>
    </item>
    
    <item>
      <title>Integration Tests in Go</title>
      <link>https://www.philosophicalhacker.com/post/integration-tests-in-go/</link>
      <pubDate>Fri, 22 Jan 2016 19:27:36 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/integration-tests-in-go/</guid>
      <description>Although Go has support for testing built in to its toolchain, certain kinds of testing can be a bit tricky. For example, it may not be immediately obvious how you would go about writing and running integration tests in go. This post contains info on how to write and run integration tests for your go code.
Clarifying Terms As I&amp;rsquo;ve said before, many terms in software are vague or ambiguous.</description>
    </item>
    
    <item>
      <title>Getting started with Gomock</title>
      <link>https://www.philosophicalhacker.com/post/getting-started-with-gomock/</link>
      <pubDate>Wed, 20 Jan 2016 10:43:26 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/getting-started-with-gomock/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://www.philosophicalhacker.com/2016/01/13/should-we-use-mocking-libraries-for-go-testing&#34;&gt;my last post&lt;/a&gt;, I talked about why I started using gomock, a mocking library that facilitates testing in go. If you found what I said in that post at all compelling, you might have decided to give gomock a try and you might have noticed that the documentation isn&amp;rsquo;t as helpful as it could be. This post is meant to supplement the documentation. It&amp;rsquo;s a brief tutorial on how to get started with gomock.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Should we use mocking libraries for go testing?</title>
      <link>https://www.philosophicalhacker.com/2016/01/13/should-we-use-mocking-libraries-for-go-testing/</link>
      <pubDate>Thu, 14 Jan 2016 02:20:53 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2016/01/13/should-we-use-mocking-libraries-for-go-testing/</guid>
      <description>&lt;p&gt;A few weeks ago, I started learning go. Since I&amp;rsquo;m a wannabe TDD-er, I took a look at some resources on testing go code. I stumbled upon &lt;a href=&#34;https://talks.golang.org/2014/testing.slide#1&#34;&gt;Andrew Gerrand&amp;rsquo;s excellent Testing Techniques talk&lt;/a&gt; in which he says this:&lt;/p&gt;

&lt;blockquote&gt;Go eschews a lot of things, including mocks and fakes.&lt;/blockquote&gt;

&lt;p&gt;&amp;ldquo;Alright cool,&amp;rdquo; I thought to myself. I&amp;rsquo;m down to &amp;ldquo;do as the gophers do&amp;rdquo; and eschew mocks. Later on during his talk, Andrew Gerrand mentions &lt;a href=&#34;https://github.com/golang/mock&#34;&gt;gomock&lt;/a&gt;, a mocking library, and reluctantly says&lt;/p&gt;

&lt;blockquote&gt;[mocking libraries like gomock] are fine, but I find that on balance the hand-written fakes tend be easier to reason about and clearer to see what&#39;s going on, but I&#39;m not an enterprise go programmer so maybe people do need that so I don&#39;t know, but that&#39;s my advice.&lt;/blockquote&gt;

&lt;p&gt;Of course, after hearing that, I felt a little confused and unsure whether I should refrain from using mocking libraries in go. To make matters worse, I took a look at gomock and was surprised to find that its written by two engineers at Google.&lt;/p&gt;

&lt;p&gt;At that point, it seemed that the question of whether we should use a mocking library while testing go code is a bit of a contentious question, even within Google. I found the seeming contentious nature of this question pretty unhelpful and confusing when I was trying to get a handle on how to write good go code. However, it led me to do some research on the pros and cons of mocking libraries vs hand-written mocks, and in this post, I present the conclusions I came to based on my research:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The apparent contentiousness about whether to use use a mocking library if probably partially due to vague terminology.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If we are clear about our terms, the argument against using mocking libraries is not very compelling.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>