<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>management on Philosophical Hacker</title>
    <link>https://www.philosophicalhacker.com/tags/management/</link>
    <description>Recent content in management on Philosophical Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Nov 2017 09:18:03 -0500</lastBuildDate>
    
        <atom:link href="https://www.philosophicalhacker.com/tags/management/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Moving to substack</title>
      <link>https://www.philosophicalhacker.com/post/what-people-want/</link>
      <pubDate>Thu, 08 Feb 2024 11:56:41 -0600</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-people-want/</guid>
      <description>&lt;p&gt;These days I&amp;rsquo;m writing at &lt;a href=&#34;https://philosophicalhacker.substack.com&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;philosophicalhacker.substack.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Future of Machine Learning and AI: A visionary panel discussion</title>
      <link>https://www.philosophicalhacker.com/talk/future-of-ml-and-ai-a-visionary-panel/</link>
      <pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/talk/future-of-ml-and-ai-a-visionary-panel/</guid>
      <description>&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/MLIFbNyPaTU&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Panel Discussion: Exploring the Future of Machine Learning and AI</title>
      <link>https://www.philosophicalhacker.com/talk/future-of-ai-and-ml-a-panel/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/talk/future-of-ai-and-ml-a-panel/</guid>
      <description>&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EoY1oaNQoYw&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>For Data Notebooks, Functions Arent Enough (and what to do about it)</title>
      <link>https://www.philosophicalhacker.com/post/for-data-notebooks-functions-arent-enough/</link>
      <pubDate>Thu, 12 Jan 2023 11:14:33 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/for-data-notebooks-functions-arent-enough/</guid>
      <description>&lt;p&gt;&lt;img  src=&#34;./datawork-me.png&#34;
        alt=&#34;the joker laughing after batman hits him. an arrow labelled &amp;amp;ldquo;me&amp;amp;rdquo; is pointing at batman and another labelled &amp;amp;ldquo;data work&amp;amp;rdquo; is pointed at the joker &#34;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Dark Knight&lt;/em&gt; has this great scene where Batman punches The Joker to intimate him into giving up information and he just starts laughing and says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You have nothing! Nothing to threaten me with. Nothing to do with all your strength.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Batman, shocked and powerless, just stands there like an idiot.&lt;/p&gt;
&lt;p&gt;While working in a data notebook a few months back, I felt the same way. The typical power that I had as a programmer felt worthless against the data work I was doing. No matter what I did, I still found myself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;typing the same code repetitively&lt;/li&gt;
&lt;li&gt;worrying about making mistakes while writing data wrangling and model training code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;rsquo;re building an application or library, the solution to both of these problems is simple: write a function that does the repetitive thing and write more tests. That doesn&amp;rsquo;t work for programmatic data work. Below I explain why and highlight how a solution using &lt;a href=&#34;https://docs.python.org/3/library/ast.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;python&amp;rsquo;s ast module&lt;/a&gt; and ipython&amp;rsquo;s &lt;a href=&#34;https://ipython.readthedocs.io/en/stable/config/callbacks.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;event callbacks&lt;/a&gt; and &lt;a href=&#34;https://ipython.readthedocs.io/en/stable/config/intro.html#profiles&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;profiles&lt;/a&gt; does the job better than ordinary functions and tests.&lt;/p&gt;
&lt;h2 id=&#34;repetitive-code&#34;&gt;Repetitive code&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve been working with data and python, you could probably write code like this in your sleep:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://.../palmer_penguins.csv&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scatter(x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bill_length_mm&amp;#39;&lt;/span&gt;, y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bill_depth_mm&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hopefully at some point we realize we&amp;rsquo;re wasting time typing the same code&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and we reach for a library like &lt;a href=&#34;https://pandas-profiling.ydata.ai/docs/master/index.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;pandas-profiling&lt;/a&gt; or &lt;a href=&#34;https://github.com/fbdesignpro/sweetviz&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;sweetviz&lt;/a&gt;. These are great libraries that are doing the best they can with ordinary python functions, but they aren&amp;rsquo;t enough for two reasons.&lt;/p&gt;
&lt;p&gt;First, we need to iterate on a data visualization or table to see the story within the data. An initial scatter plot is great, but what if I want to put the x-axis on a log scale or color the data points by some column? Some of these &amp;ldquo;next steps&amp;rdquo; are supported in these libraries, but they can&amp;rsquo;t anticipate or support every iteration I may need to make and when they fail to anticipate my next step, I&amp;rsquo;m back to writing repetitive code again.&lt;/p&gt;
&lt;p&gt;Insofar as we see functions as black boxes whose implementation should be hidden/encapsulated from users, we can&amp;rsquo;t use them to solve this problem. We need the source of the code that generated the results we see so we can iterate.&lt;/p&gt;
&lt;p&gt;Second, the reports they generate aren&amp;rsquo;t tailored to my particular data set, which means we&amp;rsquo;re often flooded with information we don&amp;rsquo;t need, making it more likely we&amp;rsquo;ll miss the stuff we do need. Yes, you can remove certain aspects of these reports to cut down on noise, but even this is limited and you can&amp;rsquo;t easily add to the results they generate.&lt;/p&gt;
&lt;p&gt;These libraries could introduce more customization to help address this, but as functions, they couldn&amp;rsquo;t vary their output based on the code that I&amp;rsquo;m currently writing in a cell, and as we&amp;rsquo;ll see, this is important for dealing with bad data/code.&lt;/p&gt;
&lt;h2 id=&#34;bad-datacode&#34;&gt;Bad data/code&lt;/h2&gt;
&lt;p&gt;&lt;img  src=&#34;./missing-values.png&#34;
        alt=&#34;example missing values viz&#34;/&gt;&lt;/p&gt;
&lt;p&gt;This was the kind of visualization I needed thrust in my face the time that I accidentally computed a mean on a column with many missing values.&lt;/p&gt;
&lt;p&gt;If I&amp;rsquo;m building a model to predict &lt;code&gt;body_mass_g&lt;/code&gt; from &lt;code&gt;bill_length_mm&lt;/code&gt; and I imputed the mean of the &lt;code&gt;bill_length_mm&lt;/code&gt; column for all missing values, I&amp;rsquo;d want to see something like this to tip me off that there&amp;rsquo;s a better play&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;./boxplot-impute-ex.png&#34;
        alt=&#34;example of different mean by species&#34;/&gt;&lt;/p&gt;
&lt;p&gt;(The better play is to impute the mean &lt;code&gt;bill_length_mm&lt;/code&gt; of the particular species for that row.)&lt;/p&gt;
&lt;p&gt;If I&amp;rsquo;ve just trained a model that predicts penguin &lt;code&gt;sex&lt;/code&gt; from &lt;code&gt;bill_length_mm&lt;/code&gt;, &lt;code&gt;bill_depth_mm&lt;/code&gt; and &lt;code&gt;flipper_length_mm&lt;/code&gt;, I don&amp;rsquo;t want to forget to look at something like this table which can help me find label quality problems and generally debug my model:&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;./model-debug.png&#34;
        alt=&#34;doubt-labs example&#34;/&gt;&lt;/p&gt;
&lt;p&gt;In all of these cases, what I need to see most depends on the code I just finished executing, something a function knows nothing about.&lt;/p&gt;
&lt;p&gt;Some may say, &amp;ldquo;These are rookie mistakes. You should always check for missing values, better imputation methods, and low confidence predictions.&amp;rdquo; But as a former software engineer, this is unsatisfying. Good software engineers don&amp;rsquo;t manually check for every single bug every time they start writing code. They have automated tests that check correctness as they write new code. Data scientists need something similar.&lt;/p&gt;
&lt;h2 id=&#34;a-better-way-metaprogramming-and-hooks-with-python--ipython&#34;&gt;A better way: metaprogramming and hooks with python + ipython&lt;/h2&gt;
&lt;p&gt;Instead of having to remember to call specific functions and sift through their possibly irrelevant output as we work, we want a workflow like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We run a Jupyter cell&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;re automatically shown relevant visualizations and tables related to the data we&amp;rsquo;re working with&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;re able to access the source code that generated those results so we can iterate on them&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To do this, we can start by registering an ipython event callback that grabs the cell source code and shows the relevant visualizations based on that source:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;show_supplementary_results&lt;/span&gt;(result):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cell_source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;raw_cell
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  df_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_df_name(cell_source)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; df_name &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# This executes visualization and table functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# based on cell_source and make those functions&amp;#39; source&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# available&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    execute_funcs(df_name, get_user_funcs())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_ipython()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;events&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;register(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;post_run_cell&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  show_supplementary_results
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Place this in &lt;code&gt;~/.ipython/profile_default/startup/auto.py&lt;/code&gt;, and it&amp;rsquo;ll automatically run whenever ipython starts.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;execute_funcs&lt;/code&gt; is the key function that&amp;rsquo;ll be called automatially whenever a cell contains a data frame. Let&amp;rsquo;s delve into how it works. If we had a data frame called &lt;code&gt;penguins_df&lt;/code&gt; and wanted to automatically run &lt;code&gt;penguins_df.describe()&lt;/code&gt; and &lt;code&gt;penguins_df.isna().sum()&lt;/code&gt; , we&amp;rsquo;d call &lt;code&gt;execute_funcs&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;execute_funcs(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;penguins_df&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;df.describe()&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;df.isna().sum()&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After executing this in a cell, we&amp;rsquo;d see the output of &lt;code&gt;penguins_df.describe()&lt;/code&gt; and &lt;code&gt;penguins_df.isna().sum()&lt;/code&gt; and the following assertion would be true:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;execute_funcs(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;penguins_df&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;df.describe()&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;df.isna().sum()&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [_os0, _os1]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;penguins_df.describe()&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;penguins_df.isna().sum()&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that the source code stored in &lt;code&gt;_os*&lt;/code&gt;&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; has substituted &amp;ldquo;df&amp;rdquo; within &amp;ldquo;df.describe()&amp;rdquo; for &amp;ldquo;penguins_df,&amp;rdquo; the data frame name passed into &lt;code&gt;execute_funcs&lt;/code&gt;. This lets us quickly execute the source in &lt;code&gt;_os*&lt;/code&gt; without worrying about changing variable names, and it&amp;rsquo;s powered by the following &lt;code&gt;ast.NodeTransformer&lt;/code&gt; subclass:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VarSwapper&lt;/span&gt;(ast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NodeTransformer):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, new_name) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    super()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;visit_Name&lt;/span&gt;(self, node: ast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Name):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;df&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new_name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __call__(self, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwds):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;visit(args[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This subclass is invoked via &lt;code&gt;execute_funcs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;execute_funcs&lt;/span&gt;(df_name: str, funcs: list[str]):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eval(df_name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; func &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; funcs:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Evaluate the functions, ensuring that the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# df name points to the data frame named&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# by the df_name function argument&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    display(eval(func, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;df&amp;#39;&lt;/span&gt;: df}))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Transform the source code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(ast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse, funcs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  transformed_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(VarSwapper(df_name), nodes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sources &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(ast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unparse, transformed_nodes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Assign output variables so we can access source&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; idx, source &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(sources):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    globals()[&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_os&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;idx&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; source
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you put all this code in the aforementioned ipython profile file, you can execute and retrieve the source of arbitrary code automatically as you work in your notebook.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;
&lt;p&gt;Python&amp;rsquo;s ast module and ipythons extension points take us beyond what ordinary functions can offer, and I think they unlock workflows that lead to better analysis and better performing ML models. With these tools, we can tackle our data work more effectively and stop feeling like Batman standing there like an idiot.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to experience a workflow like above one I&amp;rsquo;ve described, I&amp;rsquo;ve built &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=data-chimp.data-chimp&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;a vscode plugin&lt;/a&gt; (currently in open beta) that automatically shows contextual data visualizations, tables, messages, and docs as you work in your notebook. Customize it to help you spot unexpected features in your data, get oriented in a new data set quickly, or enforce best practices on your team:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;./screenshot.png&#34;
        alt=&#34;screenshot of data chimp&#34;/&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Quickly banging out code like this to see a visualization is addictive. It&amp;rsquo;s easy, and there&amp;rsquo;s the possiblity of a big reward once you hit enter. Maybe you find a bombshell insight. Maybe you come up with an idea for a new feature to feed into your ML model. This &lt;a href=&#34;https://en.wikipedia.org/wiki/Reinforcement#:~:text=Ratio%20schedules%20produce%20higher%20rates,Reinforcement%20Extinction%20Effect%20%28PREE%29.&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;variable ratio reward schedule&lt;/a&gt; turns the data nobook into a slot machine, and it can keep us content with writing repetitive code indefinitely.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Thanks to Marysia Winkels for the example. She dicusses it more in &lt;a href=&#34;https://www.youtube.com/watch?v=pPgic2V7oWg&amp;amp;t=9046s&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;this PyData Global talk&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;I generated this table using &lt;a href=&#34;https://github.com/koaning/doubtlab&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Vincent Warmerdam&amp;rsquo;s doubtlab package&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;The &amp;ldquo;os&amp;rdquo; in &lt;code&gt;_os&lt;/code&gt; and &lt;code&gt;_os1&lt;/code&gt; stands for &amp;ldquo;output source,&amp;rdquo; and these variables are meant to feel like the standard &lt;code&gt;_&lt;/code&gt; &lt;code&gt;__&lt;/code&gt; variables that store the most recent outputs as a part of &lt;a href=&#34;https://ipython.readthedocs.io/en/stable/interactive/reference.html#output-caching-system&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;ipython&amp;rsquo;s caching system&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The code that ChatGPT can&#39;t write</title>
      <link>https://www.philosophicalhacker.com/post/the-code-that-chat-ai-cant-write/</link>
      <pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/the-code-that-chat-ai-cant-write/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=33898946&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;HN Discussion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ChatGPT is game-changing, and, more generally, language models may be the most important dev tool of our generation. (It takes some humility to admit this, as &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=data-chimp.data-chimp&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;we&amp;rsquo;re working on a dev tool for data scientists.&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;But neither ChatGPT nor some larger descendent model will ever be able to write the most difficult pieces of our software given natural language descriptions of desired functionality. Here&amp;rsquo;s my argument for this claim, drawing on observations from Fred Brooks&amp;rsquo; &amp;ldquo;No Silver Bullet&amp;rdquo; and Eric Evans&amp;rsquo; &lt;em&gt;Domain Driven Design&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;1-the-hard-part-of-building-software-is-specifying-its-behavior&#34;&gt;1. The &amp;ldquo;hard part&amp;rdquo; of building software is specifying its behavior&lt;/h2&gt;
&lt;p&gt;Fred Brooks nailed &amp;ldquo;the hard part about building software&amp;rdquo; in &lt;a href=&#34;http://worrydream.com/refs/Brooks-NoSilverBullet.pdf&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&amp;ldquo;No Silver Bullet&amp;rdquo;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The essence of a software entity is a construct of interlocking concepts: data sets,
relationships among data items, algorithms, and invocations of functions&amp;hellip;
I believe the hard part of building software to be the specification, design, and testing
of this conceptual construct, not the labor of representing it and testing the fidelity of the
representation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By converting English into code, ChatGPT helps us represent software in a programming language, but the hard part is representing it in English in the first place.&lt;/p&gt;
&lt;h2 id=&#34;2-we-cant-specify-this-behavior-_a-priori_&#34;&gt;2. We can&amp;rsquo;t specify this behavior &lt;em&gt;a priori&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;A big reason why specifying software in English is hard is that we don&amp;rsquo;t actually know what we want until we see it. Brooks nails it again here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;the most important function that software builders do for their clients is the
iterative extraction and refinement of the product requirements. For the truth is, the
clients do not know what they want. They usually do not know what questions must be
answered, and they almost never have thought of the problem in the detail that must be
specified&amp;hellip;Complex software systems are, moreover, things that act, that move, that
work. The dynamics of that action are hard to imagine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ChatGPT demos often operate on well-understood problems that have been solved many times over. Take this one, for example:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;./simple-python-demo.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;p&gt;These demos can make us forget that, as Brooks says, the most important and difficult pieces of our software solve poorly understood problems that haven&amp;rsquo;t been solved before, and because of their novelty, it&amp;rsquo;s difficult to imagine what the solution looks like. If we can&amp;rsquo;t imagine the solution, we certainly can&amp;rsquo;t specify it in English.&lt;/p&gt;
&lt;h2 id=&#34;3-natural-language-misleads-us-about-the-adequacy-of-our-specification&#34;&gt;3. Natural language misleads us about the adequacy of our specification&lt;/h2&gt;
&lt;p&gt;Even if we have a strong vision of our software&amp;rsquo;s behavior, specifying that behavior in English or any other natural language isn&amp;rsquo;t the best choice. Natural languages are messy, and this messiness can hide the vagueness in our specification. It can make us think we know more about the desired software than we actually know.&lt;/p&gt;
&lt;p&gt;Eric Evans has already observed this in the context of &lt;em&gt;Domain Driven Design&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A domain model can be the core of a common language for a software project. The model is a set of concepts built up in the heads of people on the project, with terms and relationships that reflect domain insight. These terms and interrelationships provide the semantics of a language that is tailored to the domain while being precise enough for technical development&amp;hellip;When domain experts use this LANGUAGE in discussions with developers or among themselves&amp;hellip;The domain experts (with the help of the developers) will also find areas where the precision of the model-based language exposes contradictions or vagueness in their thinking.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus, expressing our specification in code is not merely a means to bring our software vision to life. Rather, it is a crucial step towards stating our vision precisely.&lt;/p&gt;
&lt;h2 id=&#34;conclusion-summarizing-the-arugment&#34;&gt;Conclusion: Summarizing the arugment&lt;/h2&gt;
&lt;p&gt;ChatGPT doesn&amp;rsquo;t help with the hardest and most imporant part of building software: specifying it&amp;rsquo;s behavior in the context of poorly understood problems. It doesn&amp;rsquo;t help here because it needs a natural language description of the desired software&amp;rsquo;s behavior and generating that description is neither easy nor desirable. It&amp;rsquo;s not easy because we can&amp;rsquo;t imagine how our software should behave from the armchair, and it&amp;rsquo;s not desirable because natural language lacks the precison needed to adequately specify software.&lt;/p&gt;
&lt;p&gt;Also, if you&amp;rsquo;re a data scientist who&amp;rsquo;s going to write code the old fashion way, check out &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=data-chimp.data-chimp&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;our VSCode plugin&lt;/a&gt;. It adds a programmable analysis assistent to your Jupyter notebooks that automatically shows contextual data visualizations, tables, and data docs as you work in your Jupyter notebook. Use it to help you spot unexpected features in your data, get oriented in a new data set quickly, or to enforce best practices on your team.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An Introduction to Metaprogramming in R</title>
      <link>https://www.philosophicalhacker.com/talk/an-introduction-to-metaprogramming-in-r/</link>
      <pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/talk/an-introduction-to-metaprogramming-in-r/</guid>
      <description>&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/BXv0iVOiCrw&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;https://www.slideshare.net/slideshow/embed_code/key/uJ5amqNmANeruS?hostedIn=slideshare&amp;page=upload&#34; width=&#34;476&#34; height=&#34;400&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Lessons From Optimizing Queries at Heap</title>
      <link>https://www.philosophicalhacker.com/talk/lessons-from-optimizing-queries-at-heap/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/talk/lessons-from-optimizing-queries-at-heap/</guid>
      <description>&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/xfO1GXA634k&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;</description>
    </item>
    
    <item>
      <title>Postgres SQL Lessons From Advent of Code Challenges</title>
      <link>https://www.philosophicalhacker.com/post/aoc-sql/aoc-sql/</link>
      <pubDate>Thu, 17 Feb 2022 18:07:19 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/aoc-sql/aoc-sql/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: This post was originally published on &lt;a href=&#34;https://heap.io/blog/engineering/building-better-code-review-at-heap&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;heap&amp;rsquo;s blog&lt;/a&gt; and was co-written with &lt;a href=&#34;https://www.linkedin.com/in/amanda-murphy-17940835/details/experience/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Amanda Murphy&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We did something odd for Advent of Code this year: We solved a few challenges in javascript and then in PostgreSQL. We learned a few interesting things about SQL that we&amp;rsquo;d like to share here.&lt;/p&gt;
&lt;p&gt;Disclaimer: We did not complete all 25 days in SQL (judging by the links from &lt;a href=&#34;https://news.ycombinator.com/item?id=29472244&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;this HN thread&lt;/a&gt;, it looks like pretty much no one did), but we still think the things we learned about SQL are useful and worth sharing, especially for non-experts. If you’re an expert, you may not learn anything here.&lt;/p&gt;
&lt;h1 id=&#34;window-function-ranges-are-awesome&#34;&gt;Window function ranges are awesome&lt;/h1&gt;
&lt;p&gt;First, a quick refresher on window functions: you probably know that window functions perform calculations across a set of table rows that are somehow related to the current row. The example from &lt;a href=&#34;https://www.postgresql.org/docs/current/tutorial-window.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;the Postgres docs&lt;/a&gt; is calculating the department-specific average salary for a particular employee. The SQL looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; depname, empno, salary, &lt;span style=&#34;color:#66d9ef&#34;&gt;avg&lt;/span&gt;(salary) OVER (PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; depname) &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; empsalary;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, the “window” of rows considered are all rows whose department matches the department of the current row, but while working on the challenges, we learned that it’s also possible to define windows using ranges.&lt;/p&gt;
&lt;p&gt;For example, on &lt;a href=&#34;https://adventofcode.com/2021/day/1&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;day 1&lt;/a&gt;, we’re asked to count the number of times the sum of values in a sliding window of three elements increases. You can express a sum of a sliding window of three elements using window function ranges. The SQL looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; row_number, &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(value) OVER (&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; row_number RANGE &lt;span style=&#34;color:#66d9ef&#34;&gt;BETWEEN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CURRENT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ROW&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; FOLLOWING) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; input_with_rows
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the overall solution looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; input_with_rows &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; row_number() over () &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; row_number, value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; day1_input
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     windows &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; row_number, &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(value) OVER (&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; row_number RANGE &lt;span style=&#34;color:#66d9ef&#34;&gt;BETWEEN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CURRENT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ROW&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; FOLLOWING) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; input_with_rows
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     lagged &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; row_number, lag(value) OVER () &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; windows
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; windows
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; lagged &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; (windows.row_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lagged.row_number &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; lagged.value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; windows.value);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ranges are just the tip of the iceberg. There are many other methods of defining windows. Check out &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;this page&lt;/a&gt; of the Postgres docs for more.&lt;/p&gt;
&lt;h1 id=&#34;common-table-expressions-for-readability-and-iteration&#34;&gt;Common Table Expressions for readability and iteration&lt;/h1&gt;
&lt;p&gt;Common Table Expressions or CTE&amp;rsquo;s are temporary, scoped, and aliased tables created via a simple query expression. Subqueries can achieve the same result in most cases, and although subqueries are more common in textbooks and database documentation than CTEs, we found that using CTE&amp;rsquo;s instead of subqueries eliminated a great deal of nesting.&lt;/p&gt;
&lt;p&gt;There are plenty of resources that explain why deeply nested code is a code smell. Nesting can quickly become difficult to reason about. Following the flow of execution adds additional cognitive load when the reader has to jump around to get context. CTEs are sequential, and it&amp;rsquo;s easier for us humans to follow sequential steps.&lt;/p&gt;
&lt;p&gt;Another advantage of using CTEs is that they can refer to their own output if you use the &lt;code&gt;RECURSIVE&lt;/code&gt; keyword. &lt;a href=&#34;https://www.postgresql.org/docs/current/queries-with.html#QUERIES-WITH-RECURSIVE&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;The docs&lt;/a&gt; recommend using recursive CTEs to work with arbitrarily nested hierarchical data, but they can also be used for iteration.&lt;/p&gt;
&lt;p&gt;We learned how to use CTEs for iteration while working on day 3. In the second part, we’re asked to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start with a list of binary numbers and consider just the first bit of those numbers.&lt;/li&gt;
&lt;li&gt;Discard numbers whose first bit does not match the most common bit in the first-bit position of all remaining numbers&lt;/li&gt;
&lt;li&gt;If you only have one number left, stop; this is the value you’re looking for&lt;/li&gt;
&lt;li&gt;Otherwise, repeat the process, considering the next bit to the right.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The SQL for this is below. The interesting part where we use a recursive CTE is lines 14 - 40:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;copy&lt;/span&gt; day3_input &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;day3.txt&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; bits_with_row_number &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; row_number() over ()            &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; row_number,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           regexp_split_to_array(bits, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; bits
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; day3_input
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     bits_with_column_number &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;, row_number() over (partition &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; row_number) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; col_number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; bits_with_row_number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     recurse &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;RECURSIVE&lt;/span&gt; filter &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             (&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; target_bit &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; bits,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         &lt;span style=&#34;color:#66d9ef&#34;&gt;CASE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                             &lt;span style=&#34;color:#66d9ef&#34;&gt;WHEN&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(bits[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]::integer) OVER ()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) OVER ())::float &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                             &lt;span style=&#34;color:#66d9ef&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; o2,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         &lt;span style=&#34;color:#66d9ef&#34;&gt;CASE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                             &lt;span style=&#34;color:#66d9ef&#34;&gt;WHEN&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(bits[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]::integer) OVER ()) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) OVER ())::float &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                             &lt;span style=&#34;color:#66d9ef&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; co2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; bits_with_column_number)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; target_bit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; bits[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]::integer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; co2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ALL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             (&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; target_bit &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; bits,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         i,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         &lt;span style=&#34;color:#66d9ef&#34;&gt;CASE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                             &lt;span style=&#34;color:#66d9ef&#34;&gt;WHEN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(bits[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]::integer) OVER () &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) OVER ())::float &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                             &lt;span style=&#34;color:#66d9ef&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; o2,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                         &lt;span style=&#34;color:#66d9ef&#34;&gt;CASE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                             &lt;span style=&#34;color:#66d9ef&#34;&gt;WHEN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(bits[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]::integer) OVER () &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) OVER ())::float &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                             &lt;span style=&#34;color:#66d9ef&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; co2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; filter)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; bits, o2, co2, i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; target_bit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; bits[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]::integer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target_bit.co2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; filter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; recurse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;max&lt;/span&gt;(i) &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; recurse);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are &lt;a href=&#34;https://malisper.me/understanding-postgres-recursive-ctes/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;plenty&lt;/a&gt; &lt;a href=&#34;https://www.citusdata.com/blog/2018/05/15/fun-with-sql-recursive-ctes/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;of&lt;/a&gt; &lt;a href=&#34;https://www.postgresql.org/docs/13/queries-with.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;good&lt;/a&gt; explanations of how recursive CTEs work out there, so we won’t repeat those explanations here.&lt;/p&gt;
&lt;h1 id=&#34;how-to-think-relationally-instead-of-iteratively&#34;&gt;How to think relationally instead of iteratively&lt;/h1&gt;
&lt;p&gt;On day 4, we’re given a list of numbers and a list of bingo boards and we’re asked to find which bingo board wins first. When we started writing the SQL portion, we assumed that we would need to use a recursive CTE so that we could iterate over the boards, but the exercise of solving the problem in SQL helped us see the problem through a new lens. We learned that just because there&amp;rsquo;s an iterative aspect in the problem statement doesn&amp;rsquo;t mean we can&amp;rsquo;t abstract it away.&lt;/p&gt;
&lt;p&gt;Breaking down the problem into smaller pieces allowed us to see another way. We needed to find the first winning board, but what does that mean? Well, first, we need to think about how a board wins. A board wins when all the numbers in a column or row have been called. So, we need to find out when each column and row won.&lt;/p&gt;
&lt;p&gt;Breaking it down in this way allowed us to see that it was a sorting problem. We already knew the order the numbers were called in. You can use the number order to assign a “time” to each column and row that represents when that column or row won. Then we just find the min of that time for each board. Once you have that, you know when the board won. Then you sort the boards by when they won and you have your answer!&lt;/p&gt;
&lt;p&gt;Translating this to SQL looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; boards_ordered_with_call_order &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; boards_ordered
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; called_numbers_with_row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; called_numbers_with_row.called_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boards_ordered.value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     col_win_orders &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; board_no, col_number, &lt;span style=&#34;color:#66d9ef&#34;&gt;max&lt;/span&gt;(call_order) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; max_col_call_order
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; boards_ordered_with_call_order
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; board_no, col_number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     row_win_orders &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; board_no, row_number, &lt;span style=&#34;color:#66d9ef&#34;&gt;max&lt;/span&gt;(call_order) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; max_row_call_order
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; boards_ordered_with_call_order
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; board_no, row_number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     row_and_col_win_orders &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; col_win_orders
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; row_win_orders
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       &lt;span style=&#34;color:#66d9ef&#34;&gt;USING&lt;/span&gt; (board_no)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; board_no, row_number, col_number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     winning_boards &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; board_no,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;min&lt;/span&gt;(LEAST(max_col_call_order, max_row_call_order)) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; winning_call_number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; row_and_col_win_orders
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; board_no
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     last_called_number &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;min&lt;/span&gt;(called_numbers_with_row.called_number) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; winning_boards
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; called_numbers_with_row &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; (called_numbers_with_row.call_order &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; winning_call_number)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; board_no, &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(value::integer &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; called_numbers_with_row.called_number::integer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; boards_ordered_with_call_order
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; winning_boards &lt;span style=&#34;color:#66d9ef&#34;&gt;USING&lt;/span&gt; (board_no)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; called_numbers_with_row &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; called_numbers_with_row.call_order &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; winning_call_number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; boards_ordered_with_call_order.call_order &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; winning_call_number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This exercise was a great way to add additional tools to our algorithmic toolboxes.&lt;/p&gt;
&lt;h1 id=&#34;sql-is-surprisingly-compact&#34;&gt;SQL is surprisingly compact&lt;/h1&gt;
&lt;p&gt;While rewriting our javascript solutions in SQL, we were struck by how compactly and safely we could express solutions in SQL. For example, one challenge requires that you calculate the position of a submarine after it executes a series of up-down-forward commands (it’s &lt;a href=&#34;https://adventofcode.com/2021/day/2&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;day 2, part 1&lt;/a&gt; if you really want to know the details of the problem). Here’s a solution in javascript:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;depth&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;horizontal&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;instructions&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;forEach&lt;/span&gt;(({ &lt;span style=&#34;color:#a6e22e&#34;&gt;direction&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;distance&lt;/span&gt; }) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;direction&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;up&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;depth&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;distance&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;down&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;depth&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;distance&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forward&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;horizontal&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;distance&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;depth&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;horizontal&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here’s the same solution in SQL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(distance) FILTER ( &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;forward&amp;#39;&lt;/span&gt; ) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(distance) FILTER ( &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;up&amp;#39;&lt;/span&gt; ) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;sum&lt;/span&gt;(distance) FILTER ( &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;down&amp;#39;&lt;/span&gt; )) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;position&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; day2_input
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SQL actually looks more declarative and compact here than the javascript solution. We expected nearly all of my SQL solutions to be awkward but was pleasantly surprised to find it very elegant in this problem and in other cases.&lt;/p&gt;
&lt;p&gt;We had another goal in writing this post. We’re hiring and these learnings provide a nice glimpse into the engineering culture at Heap. We use a lot of Postgres. We participate in Advent of Code challenges together. We have a growth mindset and love learning new things; if that sounds like a neat place to work, check us out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Optimizing Postgres Queries at Scale</title>
      <link>https://www.philosophicalhacker.com/post/optimizing-postgres-queries-at-scale/</link>
      <pubDate>Tue, 28 Dec 2021 21:11:32 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/optimizing-postgres-queries-at-scale/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: This post was originally published on &lt;a href=&#34;https://heap.io/blog/optimizing-postgres-queries-at-scale&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;heap&amp;rsquo;s blog&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Heap is a product analytics tool that automatically captures web and mobile behavior like page views, clicks, and taps. We&amp;rsquo;re operating at a scale of billions of events per day, which we store across a distributed Postgres cluster.&lt;/p&gt;
&lt;p&gt;Heap&amp;rsquo;s thousands of customers can build queries in the Heap UI to answer almost any question about how users are using their product. Optimizing all of these queries across all our customers presents special challenges you wouldn&amp;rsquo;t typically encounter if you were optimizing the performance of a small set of queries within a typical app.&lt;/p&gt;
&lt;p&gt;This post is about why this scale requires us to conduct performance experiments to optimize our SQL, and it details how we conduct those experiments.&lt;/p&gt;
&lt;h2 id=&#34;why-its-hard-to-optimize-heap-queries&#34;&gt;Why it&amp;rsquo;s hard to optimize Heap queries&lt;/h2&gt;
&lt;p&gt;We want the querying experience within Heap to feel interactive, so we need most queries to return in just a few seconds. There are multiple reasons why this is particularly difficult to do with Heap queries, but the most important one is that Heap&amp;rsquo;s query builder allows customers to issue a wide variety of queries:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;./query-builder.png&#34;
        alt=&#34;heap&amp;amp;rsquo;s query builder&#34;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see, we support filters, group bys, and comparing different groups of users and time periods. While using these features may only result in a small change to the SQL, it can have a big impact on performance.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a recent example of this.&lt;/p&gt;
&lt;p&gt;One of our customers created a query that typically hits one of &lt;a href=&#34;https://www.philosophicalhacker.com/blog/running-10-million-postgresql-indexes-in-production&#34;&gt;the millions of indexes we have across our cluster&lt;/a&gt;. More specifically, the query resulted in an index-only scan, a special kind of (speedy!) operation in which the database can satisfy a query with &lt;em&gt;just&lt;/em&gt; the information that&amp;rsquo;s in the index, without having to read the table&amp;rsquo;s actual rows.&lt;/p&gt;
&lt;p&gt;Then the user made a slight modification to their query by changing a simple value in a dropdown:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;./change_dropdown.gif&#34;
        alt=&#34;changing dropdown value&#34;/&gt;&lt;/p&gt;
&lt;p&gt;This change resulted in &lt;a href=&#34;https://www.philosophicalhacker.com/blog/when-the-postgres-planner-is-not-very-smart&#34;&gt;SQL that could not use an index-only scan&lt;/a&gt;, which made the query take much longer to execute.&lt;/p&gt;
&lt;p&gt;Because of the wide variety of questions customers want to ask about their data, we have many examples like this. This means that when we&amp;rsquo;re assessing the performance of a set of queries that support a new feature within Heap, we can&amp;rsquo;t simply tweak some SQL, look at a few query plans from &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;, and call it a day. There may be a small, but common tweak to the query we&amp;rsquo;ve optimized that could tank the overall performance of the query. (This has happened to us multiple times.)&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a histogram of some of our queries that helps show the variability of performance:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;./query-perf-variability.png&#34;
        alt=&#34;histogram showing distribution of query performance&#34;/&gt;&lt;/p&gt;
&lt;h2 id=&#34;experiments-to-optimize-sql&#34;&gt;Experiments to optimize SQL&lt;/h2&gt;
&lt;p&gt;One of the things we do to combat this variability issue is to construct 95% confidence intervals around our estimates of performance. These confidence intervals help us identify the range of plausible values our p90 may take once we launch a new Heap query for all of our customers. This range takes into account the variability we introduce into our query performance by supporting a wide variety of ways customers can tweak and/or slice and dice their data.&lt;/p&gt;
&lt;p&gt;We typically visualize new Heap query performance like this:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;./confidence-interval.png&#34;
        alt=&#34;confidence interval for p90, p70, and p50 for new query&#34;/&gt;&lt;/p&gt;
&lt;p&gt;The width of the confidence bounds helps us see how much query performance could vary across all our customers and across all the various tweaks they make to their queries.&lt;/p&gt;
&lt;p&gt;To test if a SQL change makes a query faster, we first generate experimental and control SQL for a few hundred Heap queries, which are stored as JSON. Then, for each JSON query, we generate the control SQL and the experimental SQL that we hope will improve performance.&lt;/p&gt;
&lt;p&gt;Next, we run the queries in counterbalanced order, alternating which SQL statement gets run first for a particular JSON query. For example, given JSON queries A and B, we&amp;rsquo;d run our queries in the following order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Control SQL for Query A&lt;/li&gt;
&lt;li&gt;Experimental SQL for Query A&lt;/li&gt;
&lt;li&gt;Experimental SQL for Query B&lt;/li&gt;
&lt;li&gt;Control SQL for Query B&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We do this control for the effect of caching. If experimental SQL is always run after the control SQL for all queries, the experimental SQL may look faster merely because those queries benefit from caching.&lt;/p&gt;
&lt;p&gt;Why run experimental and control SQL on the same queries instead of a true experiment where we randomly assign queries to experimental and control groups? Because of the variability of query performance, a randomized experiment would require us to have a large sample of queries, which slows down the speed with which we can conduct experiments and puts additional load on our systems.&lt;/p&gt;
&lt;p&gt;Once we&amp;rsquo;ve executed these queries, we plot the performance estimates with confidence intervals of the experimental and control queries.&lt;/p&gt;
&lt;p&gt;The plot looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;./experimental-query-perf.png&#34;
        alt=&#34;experimental vs. control query performance&#34;/&gt;&lt;/p&gt;
&lt;p&gt;If the confidence intervals of the queries don&amp;rsquo;t overlap (as in the above picture), we can have some confidence that we&amp;rsquo;ve actually improved performance with our tweak.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a recap of the above process as a sequence diagram:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;./perf-rig-sequence-diag.png&#34;
        alt=&#34;sequence diagram recap&#34;/&gt;&lt;/p&gt;
&lt;p&gt;If you like nerding out about Postgres performance, @-me on Twitter &lt;a href=&#34;https://twitter.com/philosohacker&#34; target=&#34;_blank&#34;&gt;@philosohacker&lt;/a&gt;, and if you like working on large data systems, we&amp;rsquo;re hiring! Check out &lt;a href=&#34;https://www.philosophicalhacker.com/careers/departments/engineering-product-and-design/team&#34;&gt;our team&lt;/a&gt; and &lt;a href=&#34;https://www.philosophicalhacker.com/careers/departments/engineering-product-and-design?team=engineering&#34;&gt;open roles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I&amp;rsquo;d like to thank John Krauss for his help with reviewing early drafts of this post.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Postgres Audit Tables Saved Us From Taking Down Production</title>
      <link>https://www.philosophicalhacker.com/post/audit-tables/</link>
      <pubDate>Mon, 08 Nov 2021 19:50:46 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/audit-tables/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: This post was originally published on &lt;a href=&#34;https://heap.io/blog/how-postgres-audit-tables-saved-us-from-taking-down-production&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;heap&amp;rsquo;s blog&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Audit tables record changes that occur to rows in another table. They’re like commit logs for database tables, and they&amp;rsquo;re typically used to figure out who made what changes when. But surprisingly, we&amp;rsquo;ve found them useful for keeping our distributed Postgres cluster stable.&lt;/p&gt;
&lt;p&gt;To convince you of the stability-related value of audit tables, we&amp;rsquo;ll cover how audit tables helped us avoid a serious incident. Then, we&amp;rsquo;ll briefly cover how you can create audit tables in your own Postgres databases.&lt;/p&gt;
&lt;h1 id=&#34;the-almost-incident&#34;&gt;The almost incident&lt;/h1&gt;
&lt;p&gt;Heap is a product analytics tool that automatically captures web and mobile behavior like page views, clicks, and mobile touches. We&amp;rsquo;re operating at a scale of billions of events per day, which we store across a distributed Postgres cluster.&lt;/p&gt;
&lt;p&gt;The cluster has a coordinator node, which contains metadata about what data lives on which worker nodes. All our data is either a &lt;code&gt;user&lt;/code&gt; or an &lt;code&gt;event&lt;/code&gt;, so our metadata looks like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;table&lt;/th&gt;
&lt;th&gt;shardid&lt;/th&gt;
&lt;th&gt;nodename&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;23258&lt;/td&gt;
&lt;td&gt;137.185.251.252&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;events&lt;/td&gt;
&lt;td&gt;15987&lt;/td&gt;
&lt;td&gt;137.185.251.252&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;6866&lt;/td&gt;
&lt;td&gt;61.21.220.173&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;events&lt;/td&gt;
&lt;td&gt;22508&lt;/td&gt;
&lt;td&gt;61.21.220.173&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;4204&lt;/td&gt;
&lt;td&gt;6.182.224.250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;events&lt;/td&gt;
&lt;td&gt;10033&lt;/td&gt;
&lt;td&gt;6.182.224.250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;20570&lt;/td&gt;
&lt;td&gt;117.5.38.108&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;events&lt;/td&gt;
&lt;td&gt;4248&lt;/td&gt;
&lt;td&gt;117.5.38.108&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users&lt;/td&gt;
&lt;td&gt;18658&lt;/td&gt;
&lt;td&gt;0.85.220.110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;events&lt;/td&gt;
&lt;td&gt;27033&lt;/td&gt;
&lt;td&gt;0.85.220.110&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Our write path uses this metadata to determine where incoming users and events need to be written.&lt;/p&gt;
&lt;p&gt;Notice that each node is the home for a users table and a corresponding events table. Each users table is located with an events table that contains the events performed by those users. It’s crucial that these two tables are co-located on the same machine, so that we can join them during queries without having to send data over the network. The Kafka consumers that write to these workers check that this invariant is satisfied before doing any writing to workers.&lt;/p&gt;
&lt;p&gt;This makes changing the coordinator metadata a potentially dangerous affair. If we accidentally violate the invariant, the consumers won’t ingest any more data until the metadata is fixed. This is a problem because we want our users to be able to answer questions about how their product is being used in real-time; they shouldn&amp;rsquo;t have to wait hours for their event data to show up in Heap analyses. We call this delay &amp;ldquo;ingestion latency,&amp;rdquo; and we strive to keep it on the order of a minute or two.&lt;/p&gt;
&lt;p&gt;Although changing the coordinator metadata is potentially dangerous, it&amp;rsquo;s unavoidable. Sometimes we need to re-balance data across the cluster, or, in our case, perform a schema migration across many shards in the cluster. It was during a schema migration that we nearly caused some severe ingestion latency.&lt;/p&gt;
&lt;p&gt;We wanted to perform our schema migration on our distributed events table with no down-time and no ingestion latency. Since you can’t write to a table while changing its schema, we decided that for each shard, we should:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy data to a new shard with the new schema on the same worker&lt;/li&gt;
&lt;li&gt;Add the new shard id to the coordinator metadata table&lt;/li&gt;
&lt;li&gt;Drop the old shard from the coordinator metadata table and the worker&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately, the Node code we wrote to do this had a bug: it treated a string as if it was a number. After migrating a shard to a new schema, we created a new shard id by adding a fixed number to the old shard id and then dropping the entry for the old shard from the coordinator. However, because the &lt;code&gt;shardid&lt;/code&gt; was a string, adding the offset resulted in concatenation, which in turn resulted in a new &lt;code&gt;shardid&lt;/code&gt; that was rejected by the coordinator because it was too large to fit into an bigint:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shardIdString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;952025954&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shardIdNumber&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;952025954&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000000000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// what we expected
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;shardIdNumber&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2952025954&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// what we got (oh no!)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;shardIdString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;offset&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9223372036854775807&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although we use Typescript to mitigate these types of bugs, when we&amp;rsquo;re working with external systems, it&amp;rsquo;s easy to find yourself in a situation where the types are lying to you. Fortunately, our code didn’t delete any shard data unless metadata for the migrated shard was added to the coordinator. Unfortunately, because of this bug, the coordinator metadata still wound up in a state where it was missing event shard metadata for a particular worker.&lt;/p&gt;
&lt;p&gt;A few minutes later, the on-call engineer was paged with a link to our ingestion latency metrics:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;./ingestion-latency.png&#34;
        alt=&#34;graph showing ingestion latency spiking&#34;/&gt;&lt;/p&gt;
&lt;p&gt;Ingestion latency was spiking, but after we discovered the bug in our code, we were able to quickly reverse the removal of these shard metadata entries using our audit tables. The SQL to restore the deleted metadata looked a little like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; pg_dist_shard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; logicalrelid, shardid, nodename &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dist_shard_audit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DELETE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; log_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; now() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1 minutes&amp;#39;&lt;/span&gt;::interval;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Without the audit table, this minor incident would have been much more severe because it would have been much more difficult to track down which shards were deleted and to quickly re-add those shards back to the table. Logs would have been our only way to fix this, and we can all imagine how difficult it would have been to reconstruct the correct table using logs.&lt;/p&gt;
&lt;h1 id=&#34;how-to-create-audit-tables&#34;&gt;How to create audit tables&lt;/h1&gt;
&lt;p&gt;To make an audit table, start by creating an ordinary table with:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Columns that match the columns of the table you want to audit&lt;/li&gt;
&lt;li&gt;Some additional columns that describe the changes made to the audited table.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, an audit table for the above &lt;code&gt;pg_dist_shard&lt;/code&gt; table would look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; audit_action &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; enum (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SNAPSHOT&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INSERT&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UPDATE_OLD&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UPDATE_NEW&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DELETE&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; pg_dist_shard (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; regclass &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    shardid bigint &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nodename text &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    action audit_action &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    log_time &lt;span style=&#34;color:#66d9ef&#34;&gt;timestamp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; time &lt;span style=&#34;color:#66d9ef&#34;&gt;zone&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The trigger procedure would look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; tg_audit_dist_shard() &lt;span style=&#34;color:#66d9ef&#34;&gt;returns&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;trigger&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;language&lt;/span&gt; plpgsql
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DECLARE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    audit_entry int :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nextval(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;audit_entry_seq&amp;#39;&lt;/span&gt;::regclass);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;IF&lt;/span&gt; (TG_OP &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INSERT&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; dist_shard_audit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (now(), audit_entry, TG_OP::audit_action, TG_RELID::regclass, &lt;span style=&#34;color:#66d9ef&#34;&gt;NEW&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;RETURN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NEW&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ELSIF&lt;/span&gt; (TG_OP &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UPDATE&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; dist_shard_audit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (now(), audit_entry, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UPDATE_OLD&amp;#39;&lt;/span&gt;::audit_action, TG_RELID::regclass, &lt;span style=&#34;color:#66d9ef&#34;&gt;OLD&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               (now(), audit_entry, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UPDATE_NEW&amp;#39;&lt;/span&gt;::audit_action, TG_RELID::regclass, &lt;span style=&#34;color:#66d9ef&#34;&gt;NEW&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ELSIF&lt;/span&gt; (TG_OP &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DELETE&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; dist_shard_audit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (now(), audit_entry, TG_OP::audit_action, TG_RELID::regclass, &lt;span style=&#34;color:#66d9ef&#34;&gt;OLD&lt;/span&gt;.&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;RETURN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OLD&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IF&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;RETURN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code uses a few special variables that are automatically defined for triggers:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;variable&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TG_OP&lt;/td&gt;
&lt;td&gt;The CRUD operation that invoked this trigger function&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TG_RELID&lt;/td&gt;
&lt;td&gt;The table being operated on&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OLD&lt;/td&gt;
&lt;td&gt;The old &lt;code&gt;RECORD&lt;/code&gt; of the row that&amp;rsquo;s being updated or deleted&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NEW&lt;/td&gt;
&lt;td&gt;The new &lt;code&gt;RECORD&lt;/code&gt; that&amp;rsquo;s being updated or inserted&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;After defining a trigger like the one above, we can wire it up with the following SQL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TRIGGER&lt;/span&gt; pg_dist_shard_audit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;AFTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; pg_dist_shard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EACH&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ROW&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EXECUTE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PROCEDURE&lt;/span&gt; tg_audit_dist_shard();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So, audit tables aren’t just useful for seeing who changed what in your database. They also make it easy to undo and/or redo changes that may cause issues downstream in your system. If that sounds appealing and you’re okay with the overhead of introducing a few triggers to the table you’re auditing, consider creating audit tables in your own system. They’re a great fit for metadata tables like these, which are small and contain key information.&lt;/p&gt;
&lt;p&gt;If you like nerding out about underrated Postgres features, @-me on Twitter @philosohacker, and if you like working on large data systems, we’re hiring! Check out our team and open roles.&lt;/p&gt;
&lt;p&gt;I’d like to thank John Krauss and Daniel Robinson for their essential feedback on earlier drafts of this post.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=29003356&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;HN Discussion&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>