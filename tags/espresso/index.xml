<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>espresso on Philosophical Hacker</title>
    <link>/tags/espresso/</link>
    <description>Recent content in espresso on Philosophical Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Jul 2016 23:28:29 -0400</lastBuildDate>
    
        <atom:link href="https://www.philosophicalhacker.com/tags/espresso/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An Espresso Test Recorder Deep Dive</title>
      <link>https://www.philosophicalhacker.com/post/an-espresso-test-recorder-deep-dive/</link>
      <pubDate>Thu, 07 Jul 2016 23:28:29 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/an-espresso-test-recorder-deep-dive/</guid>
      <description>I&amp;rsquo;ve been working on a unit test recorder for Android. After struggling to find a way to implement the unit test recorder,1 I decided to take a look at how Google implements the espresso test recorder. This post presents what I found when I dug into the source code of the espresso test recorder.
Collecting User Interaction Info Before I took a look at the source for the espresso recorder, I half expected to find some fancy bytecode manipulation of the sort we see for the proguard or jacoco transformers.</description>
    </item>
    
  </channel>
</rss>