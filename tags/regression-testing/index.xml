<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Philosophical Hacker</title>
    <link>https://www.philosophicalhacker.com/tags/regression-testing/index.xml</link>
    <description>Recent content on Philosophical Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://www.philosophicalhacker.com/tags/regression-testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why don&#39;t we have a unit test recorder?</title>
      <link>https://www.philosophicalhacker.com/post/why-dont-we-have-a-unit-test-recorder/</link>
      <pubDate>Fri, 01 Jul 2016 11:49:34 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-dont-we-have-a-unit-test-recorder/</guid>
      <description>

&lt;p&gt;Last week, I introduced Vice, a &lt;em&gt;proof of concept&lt;/em&gt; regression test generation library. Vice generates regression tests simply by exercising the code we want to test.&lt;/p&gt;

&lt;p&gt;This is neat, but there&amp;rsquo;s already &lt;a href=&#34;https://github.com/dmcg/okey-doke&#34;&gt;something else out there that does something like this&lt;/a&gt;, and ultimately, Vice as it stands doesn&amp;rsquo;t answer a fundamental question I have about regression tests: if we can record functional UI tests using &lt;a href=&#34;http://android-developers.blogspot.com/2016/05/android-studio-22-preview-new-ui.html&#34;&gt;the espresso test recorder&lt;/a&gt; or &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/ToolsLanguages/Conceptual/Xcode_Overview/RecordingUITests.html&#34;&gt;apple&amp;rsquo;s test recorder&lt;/a&gt;, why don&amp;rsquo;t we have a &lt;em&gt;unit test recorder&lt;/em&gt;?&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This past week, I&amp;rsquo;ve been exploring potential ways creating a unit test recorder with special attention to implementing this functionality for Android development. In this post, I present an overall strategy for doing this and I present what I&amp;rsquo;ve learned so far vis-a-vis practically implementing this strategy for Android development.&lt;/p&gt;

&lt;h3 id=&#34;the-strategy&#34;&gt;The Strategy&lt;/h3&gt;

&lt;p&gt;Call the classes for which we want to generate tests &amp;ldquo;target classes.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;As I said &lt;a href=&#34;http://www.philosophicalhacker.com/post/vice-a-regression-test-generation-library/&#34;&gt;before&lt;/a&gt;, Vice already works by rewriting target classes so that instances of those classes record their method invocations. More specifically, these instances record both the arguments and return value of their method invocations. Let&amp;rsquo;s call these rewritten classes &amp;ldquo;Recorders.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Once this information is recorded, we can use it to generate regression tests that ensure that the behavior of our code remains unchanged. Those tests simply assert that target classes either a) return proper values or b) interact appropriately with their collaborators when their methods are invoked.&lt;/p&gt;

&lt;p&gt;Making Vice into a test recording library is as simple as rewriting the &lt;em&gt;providers&lt;/em&gt; of instances of the target classes so that these methods return a recorder.&lt;/p&gt;

&lt;p&gt;When I say &amp;ldquo;provider&amp;rdquo; here, I just mean any method that is responsible for providing an object &lt;em&gt;that is used by our application&lt;/em&gt;. Providers may be constructors, ordinary factory methods, or special methods in some DI-framework module class (e.g., &lt;code&gt;@Provides&lt;/code&gt; annotated methods in &lt;a href=&#34;http://google.github.io/dagger/&#34;&gt;Dagger&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If &lt;em&gt;all&lt;/em&gt; the instances in an application are recorders, then generating unit tests should be fairly trivial. As I see it, the central problem of creating a a unit test recorder is figuring out how to rewrite providers so that they return recorders instead of ordinary instances.&lt;/p&gt;

&lt;h3 id=&#34;learnings&#34;&gt;Learnings&lt;/h3&gt;

&lt;h4 id=&#34;bytebuddy-alone-won-t-work&#34;&gt;Bytebuddy alone won&amp;rsquo;t work&lt;/h4&gt;

&lt;p&gt;Doing this on Android was trickier than I first imagined. I thought that I could just use Bytebuddy to rewrite providers to return recorders like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;RecordingObject&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;rewrite&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Method providers&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;boolean&lt;/span&gt; isAndroid&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//...&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Class&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;?&amp;gt;,&lt;/span&gt; List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Provider&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; classesGroup
            &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; streamSupplier&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;groupingBy&lt;span style=&#34;color: #666666&#34;&gt;((&lt;/span&gt;Function&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;Provider&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Class&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;)&lt;/span&gt; Provider&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;getDeclaringClass&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
    classesGroup&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;((&lt;/span&gt;aClass&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; classProviders&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Working with the classProviders using the Stream API gives us a cleaner way of building up our dynamic subclass.&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; DynamicType&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; recordingSubclass &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; classProviders&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;byteBuddy&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;subclass&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;aClass&lt;span style=&#34;color: #666666&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; BiFunction&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;DynamicType&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;?&amp;gt;,&lt;/span&gt; Provider&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; DynamicType&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; DynamicType&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; apply&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;DynamicType&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; builder&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Provider provider&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; provider&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;rewrite&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;builder&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; any&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
                    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;builder&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; builder2&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; builder2&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

        recordingSubclass&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;load&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;aClass&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getClassLoader&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt;
                      isAndroid &lt;span style=&#34;color: #666666&#34;&gt;?&lt;/span&gt; AndroidClassLoadingStrategy&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;Default&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;WRAPPER&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; ClassReloadingStrategy&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;fromInstalledAgent&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; recorders&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The hope here was that we could simply pass in an array of method or constructor references and use Bytebuddy to rewrite those providers to return recorders. Unfortunately, I didn&amp;rsquo;t read notice this line in the Bytebuddy docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;with the ART runtime which succeeds the Dalvik virtual machine, Android applications are compiled into native machine code before being installed on an Android device. As a result, Byte Buddy cannot longer [sic.] redefine or rebase classes as long as an applications is not explicitly deployed together with its Java sources as there is otherwise no intermediate code representation to interpret.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since we can&amp;rsquo;t redefine classes using Bytebuddy alone, this approach turns out to be a dead end.&lt;/p&gt;

&lt;h4 id=&#34;some-alternative-implementation-approaches&#34;&gt;Some alternative implementation approaches&lt;/h4&gt;

&lt;p&gt;Dexmaker is a library that allows us to write dex files at runtime. I believe that dexmaker is used so that we can use mockito with Android, but I&amp;rsquo;m not sure. If dexmaker is in fact used for this purpose, it could be a useful tool for creating a unit test recorder on Android.&lt;/p&gt;

&lt;p&gt;Another possibility is to leverage &lt;a href=&#34;http://tools.android.com/tech-docs/new-build-system/transform-api&#34;&gt;the Transform api&lt;/a&gt; that&amp;rsquo;s a part of the Android gradle plugin. This api allows us to manipulate java bytecode before that code is converted to dex bytecode. At first glance, this approach appears to be preferable to the former one for the following reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We can probably use Bytebuddy here since other users of the Transform api seem to have had some success using similar libraries (viz., javassist and webasm). See, for example, &lt;a href=&#34;https://github.com/nsk-mironov/smuggler/blob/master/smuggler-compiler/build.gradle&#34;&gt;smuggler&lt;/a&gt; and &lt;a href=&#34;https://github.com/realm/realm-java/blob/467bd4b0cb61cf3479f9fa550005b9fd492bc112/realm-transformer/build.gradle&#34;&gt;the realm transformer&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We&amp;rsquo;re rewriting our providers at build time rather than runtime, which will presumably make for a smoother app running experience.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Because we rewriting our providers at build time, we may be able to take advantage of incremental builds.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rewriting the providers at runtime isn&amp;rsquo;t really &lt;em&gt;required&lt;/em&gt; for the functionality that we want. By using the transform api, we plugging in to an extension point that&amp;rsquo;s well supported by Android.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;ll be trying out these alternative approaches in the coming week. Hopefully, next time I&amp;rsquo;ll have a working unit test recorder!&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;In case its not obvious, this seems like an important question because unit-level tests can run much more quickly than functional UI tests, so they can actually serve as, to use Michael Feathers&amp;rsquo; metaphor, a &amp;ldquo;software vice&amp;rdquo; when we&amp;rsquo;re refactoring or adding features. Having to wait 5+ minutes to know if you&amp;rsquo;re changes have broken anything is way too long for functional UI tests to be useful feedback while programming.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Vice: A Regression Test Generation Library</title>
      <link>https://www.philosophicalhacker.com/post/vice-a-regression-test-generation-library/</link>
      <pubDate>Wed, 22 Jun 2016 13:25:16 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/vice-a-regression-test-generation-library/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Changes in a system can be made in two primary ways. I like to call them Edit and Pray and Cover and Modify&amp;hellip;When you use Edit and Pray, you carefully plan the changes you are going to make, you make sure that you understand the code you are going to modify, and then you start to make the changes. When you’re done, you run the system to see if the change was enabled, and then you poke around further to make sure that you didn’t break anything&amp;hellip;Cover and Modify is a different way of making changes. The idea behind it is that it is possible to work with a safety net when we change software&amp;hellip;&lt;strong&gt;When you have tests around the areas in which you are going to make changes, they act as a software vise. You can keep most of the behavior fixed and know that you are changing only what you intend to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Michael Feathers, &lt;em&gt;Working Effectively with Legacy Code&lt;/em&gt;, pg. 32-33&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &amp;ldquo;regression tests&amp;rdquo; that Feathers refers to in the above quotation are a huge asset to refactoring code. Unfortunately, they can often be time-consuming and soul-sucking to write. Vice is a library that I just started working on that helps to reduce the burden of writing these regression tests.&lt;/p&gt;

&lt;p&gt;With Vice, we can simply exercise the code we want regression tests for, and Vice will generate our unit-level regression tests for us. This post sketches how my current proof of concept of this library and suggests some ways I plan to expand the library, with special attention to how this library might aid in generating regression tests for Android applications. You can find the source code &lt;a href=&#34;https://github.com/kmdupr33/Vice&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;a-trivial-proof-of-concept&#34;&gt;A Trivial Proof of Concept&lt;/h3&gt;

&lt;p&gt;Suppose we have a simple class that reverses a string:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Reverser&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #0000FF&#34;&gt;reverse&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String string&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; StringBuilder&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;string&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;reverse&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Suppose further that we don&amp;rsquo;t like the way &lt;code&gt;Reverser.reverse&lt;/code&gt; is implemented. If we want to be sure that our modifications don&amp;rsquo;t break anything, we would normally write a unit test for this method that looks like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ReverserCharacterization&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;characterizeReverse&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    Reverser reverser &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Reverser&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; String result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; reverser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;reverse&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertEquals&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;olleh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; result&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vice allows us to generate tests by simply writing code that exercises the classes for which we want tests. Let&amp;rsquo;s look at the Vice code that generates the above test.&lt;/p&gt;

&lt;p&gt;First, we create a &lt;code&gt;ViceMaker&lt;/code&gt; object:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@ViceFor&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Reverser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ViceMaker&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Clamp&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;clampReverse&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Reverser reverser&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        reverser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;reverse&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we run &lt;code&gt;Vice.make&lt;/code&gt;, passing in the class of our &lt;code&gt;ViceMaker&lt;/code&gt; and the path where we want our generated tests to live:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Vice vice &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Vice&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; String pathToGeneratedCharacterizationTest
        &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/Users/mattdupree/Developer/Vice/src/test/java/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Path testFilesPath &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Paths&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;pathToGeneratedCharacterizationTest&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
vice&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;testFilesPath&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; ViceMaker&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the above code is run, you&amp;rsquo;ll have regression test generated with code that is identical the code we would have written:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ReverserCharacterization&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;characterizeReverse&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    Reverser reverser &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Reverser&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; String result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; reverser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;reverse&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertEquals&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;olleh&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; result&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once this code is generated, you can ensure that your refactoring doesn&amp;rsquo;t break &lt;code&gt;Reverser&lt;/code&gt; simply by running your tests.&lt;/p&gt;

&lt;p&gt;In order to accomplish this, I&amp;rsquo;m using reflection and &lt;a href=&#34;http://bytebuddy.net/#/&#34;&gt;bytebuddy&lt;/a&gt;, a library that lets us rewrite java classes at runtime. With these two tools I&amp;rsquo;m rewriting the classes we want to generate regressions tests for so that every method on that class records its method invocations. This &amp;ldquo;recording&amp;rdquo; captures what method was called, the arguments that were passed in, and the return value of the method. Once I have this information, I use &lt;a href=&#34;https://github.com/square/javapoet&#34;&gt;javapoet&lt;/a&gt; to write out java test files.&lt;/p&gt;

&lt;h3 id=&#34;limitations-and-future-directions&#34;&gt;Limitations and Future Directions&lt;/h3&gt;

&lt;h4 id=&#34;supporting-void-methods&#34;&gt;Supporting Void Methods&lt;/h4&gt;

&lt;p&gt;Currently, my proof of concept only supports adding tests for methods with return values. However, I&amp;rsquo;d like to expand it to test methods that don&amp;rsquo;t return anything. Void methods are typically tested by examining the way in which those methods interact with their dependencies. Using bytebuddy, I can rewrite the dependencies of the methods we want to test so that they record their interactions. Once I have this information, I can generate mockito-powered tests that verify that the method interacts with its dependencies correctly.&lt;/p&gt;

&lt;h4 id=&#34;supporting-complex-method-parameters&#34;&gt;Supporting Complex Method Parameters&lt;/h4&gt;

&lt;p&gt;As I said earlier, bytebuddy let&amp;rsquo;s me rewrite the target classes so that they record the parameters that are passed into their methods. However, this is not enough. The tests that are generated will need to know how to construct complex method parameters so that methods can be invoked. To support this, the &lt;code&gt;ViceMaker&lt;/code&gt; object can contain annotated methods that provide the dependencies of the methods whose interactions we want to record.&lt;/p&gt;

&lt;h4 id=&#34;supporting-android-test-recording&#34;&gt;Supporting Android Test Recording&lt;/h4&gt;

&lt;p&gt;In the next release of Android Studio, we&amp;rsquo;ll be able to record espresso tests. These tests are great, but they can be slow and flaky, so they need to be augmented with unit tests.&lt;/p&gt;

&lt;p&gt;Ideally, I&amp;rsquo;d like to build upon the functionality of Vice to support Android &lt;em&gt;unit test&lt;/em&gt; recording. This functionality is less fleshed out in my mind, but it seems doable. The hope here is that you&amp;rsquo;d be able to launch your Android app, interact with it and your interactions would generate unit tests for your activities and fragments. These unit tests will allow us to move application logic out of our Activities and Fragments without having to spend an inordinate amount of time writing and running regression tests.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>