<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>android on Philosophical Hacker</title>
    <link>/tags/android/</link>
    <description>Recent content in android on Philosophical Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Oct 2019 19:27:36 -0400</lastBuildDate>
    
        <atom:link href="https://www.philosophicalhacker.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Maybe Don&#39;t Inject That</title>
      <link>https://www.philosophicalhacker.com/post/maybe-dont-inject-that/</link>
      <pubDate>Thu, 03 Oct 2019 19:27:36 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/maybe-dont-inject-that/</guid>
      <description>I&amp;rsquo;m actually always suspicious when I&amp;rsquo;m writing up a pattern or a technique if I can&amp;rsquo;t talk about reasons when you shouldn&amp;rsquo;t use and trade-offs against it. If I can&amp;rsquo;t find arguments against it, then I&amp;rsquo;m worrying that I&amp;rsquo;m not really analyzing things properly.
&amp;ndash;Martin Fowler, &amp;ldquo;Is TDD Dead?&amp;quot;, 35:00
  DI is useful. It&amp;rsquo;s great. It makes your code more flexible, testable, etc. Dagger? Also useful. Great. My favorite DI library.</description>
      
    </item>
    
    <item>
      <title>Dagger 2, 2 Years Later</title>
      <link>https://www.philosophicalhacker.com/post/dagger-2-years-later/</link>
      <pubDate>Tue, 27 Aug 2019 19:27:30 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/dagger-2-years-later/</guid>
      <description>&amp;hellip;in software, feedback cycles tend to be on the order of months, if not years&amp;hellip;It’s during the full lifetime of a project that a developer gains experience writing code, source controlling it, modifying it, testing it, and living with previous design and architecture decisions during maintenance phases. With everything I’ve just described, a developer is lucky to have a first try of less than six months&amp;hellip;
&amp;ndash;Erik Dietrich, &amp;ldquo;How Developers Stop Learning: Rise of the Expert Beginner&amp;rdquo;</description>
      
    </item>
    
    <item>
      <title>How to Abuse Kotlin Extension Functions</title>
      <link>https://www.philosophicalhacker.com/post/how-to-abuse-kotlin-extension-functions/</link>
      <pubDate>Fri, 26 May 2017 18:48:58 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/how-to-abuse-kotlin-extension-functions/</guid>
      <description>I&amp;rsquo;ve got a &amp;ldquo;sweet tooth,&amp;rdquo; which, in my case, is just a euphemism for me saying that I&amp;rsquo;m addicted to sugar. I&amp;rsquo;m young now, but I know that this addiction won&amp;rsquo;t end well once my metabolism slows down, so I try go to the gym.
Unfortunately, when I leave the gym, I often think to myself, &amp;ldquo;I just worked out, so I can snag that Oreo McFlurry I&amp;rsquo;ve been craving all day.</description>
      
    </item>
    
    <item>
      <title>Not Needing Dagger is a Code Smell (Pt. 1)</title>
      <link>https://www.philosophicalhacker.com/post/not-needing-dagger-is-a-smell-pt-1/</link>
      <pubDate>Fri, 12 May 2017 08:21:30 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/not-needing-dagger-is-a-smell-pt-1/</guid>
      <description>A code smell is a surface indication that usually corresponds to a deeper problem in the system&amp;hellip;smells don&amp;rsquo;t always indicate a problem&amp;hellip;You have to look deeper to see if there is an underlying problem there.
  &amp;ndash;Martin Fowler
 Some people don&amp;rsquo;t think Dagger is very useful. I&amp;rsquo;m a bit suspicious of these people. An application that doesn&amp;rsquo;t need Dagger smells. It suggests that there might be something wrong with the application&amp;rsquo;s architecture.</description>
      
    </item>
    
    <item>
      <title>Setting up a Jenkins Pipeline for Android Testing</title>
      <link>https://www.philosophicalhacker.com/post/setting-up-a-jenkins-pipeline-for-android-testing/</link>
      <pubDate>Fri, 28 Apr 2017 17:39:22 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/setting-up-a-jenkins-pipeline-for-android-testing/</guid>
      <description>Some tests are fast. You can run 1000s of them in seconds. These are the tests that are the heart and soul of TDD, so you run them every chance you get.
There are other tests that aren&amp;rsquo;t so fast. Because they&amp;rsquo;re slow, you don&amp;rsquo;t want to run them often. You&amp;rsquo;ve got better things to do than to sit and wait for test results to come through.
Unfortunately, the less you run your slow tests, the less valuable they are.</description>
      
    </item>
    
    <item>
      <title>Android Testing Calisthenics: Domain Objects</title>
      <link>https://www.philosophicalhacker.com/post/android-testing-calisthenics-domain-objects/</link>
      <pubDate>Fri, 14 Apr 2017 23:17:38 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/android-testing-calisthenics-domain-objects/</guid>
      <description>Imagine that you&amp;rsquo;ve never run a single mile in your life. You know that exercising is good for your health, so you decide that you&amp;rsquo;re going to take up running. Strangely, however, you also decide that you&amp;rsquo;re going to begin your journey towards physical fitness by running a marathon tomorrow.
That&amp;rsquo;s obviously a bad idea.
Less obviously, deciding to go from no experience with testing to writing tests for an already existing Android app is also a bad idea.</description>
      
    </item>
    
    <item>
      <title>Test Driving away Coupling in Activities</title>
      <link>https://www.philosophicalhacker.com/post/test-driving-away-coupling-in-activities/</link>
      <pubDate>Sun, 09 Apr 2017 15:33:20 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/test-driving-away-coupling-in-activities/</guid>
      <description>Activitys and Fragments, perhaps by some strange historical accidents, have been seen as the optimal building blocks upon which we can build our Android applications for much of the time that Android has been around. Let&amp;rsquo;s call this idea &amp;ndash; the idea that Activitys and Fragments are the best building blocks for our apps &amp;ndash; &amp;ldquo;android-centric&amp;rdquo; architecture.
This series of posts is about the connection between the testability of android-centric architecture and the other problems that are now leading Android developers to reject it; it&amp;rsquo;s about how our unit tests are trying to tell us that Activitys and Fragments &amp;ndash; like the cracking bricks in the above image &amp;ndash; don&amp;rsquo;t make the best building blocks for our apps because they tempt us to write code with tight coupling and low cohesion.</description>
      
    </item>
    
    <item>
      <title>Why Cryptography?</title>
      <link>https://www.philosophicalhacker.com/post/why-cryptography-for-android-developers/</link>
      <pubDate>Sat, 25 Mar 2017 23:59:53 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-cryptography-for-android-developers/</guid>
      <description>We as engineers somewhere have a level somewhere where everything beneath that is a black box&amp;hellip;
  Jake Wharton, Fragmented Episode 7, 1:12:00
 For a while now, anything security or crypto related on Android has been a black box for me. For example, when I read the docs on Android&amp;rsquo;s KeyStore class or hear about Android&amp;rsquo;s Fingerprint authentication functionality on Fragmented, I often feel like I&amp;rsquo;m just barely understanding what&amp;rsquo;s being said.</description>
      
    </item>
    
    <item>
      <title>Why Im Skeptical about Kotlin Coroutines for Android Development</title>
      <link>https://www.philosophicalhacker.com/post/why-im-skeptical-about-kotlin-coroutines-for-android-development/</link>
      <pubDate>Sun, 19 Mar 2017 00:34:58 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-im-skeptical-about-kotlin-coroutines-for-android-development/</guid>
      <description>A few weeks ago, the folks working on Kotlin announced the 1.1 release. Kotlin&amp;rsquo;s 1.1 release has experiment support for coroutines. Here&amp;rsquo;s the elevator pitch for coroutines from their blog post announcing the release:
 Asynchronous programming is taking over the world, and the only thing that is holding us back is that non-blocking code adds considerable complexity to our systems. Kotlin now offers means to tame this complexity by making coroutines first-class citizens in the language through the single primitive: suspending functions.</description>
      
    </item>
    
    <item>
      <title>What Unit Tests are Trying to Tell us About Activities Pt 2</title>
      <link>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt-2/</link>
      <pubDate>Fri, 10 Mar 2017 22:32:02 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt-2/</guid>
      <description>Activitys and Fragments, perhaps by some strange historical accidents, have been seen as the optimal building blocks upon which we can build our Android applications for much of the time that Android has been around. Let&amp;rsquo;s call this idea &amp;ndash; the idea that Activitys and Fragments are the best building blocks for our apps &amp;ndash; &amp;ldquo;android-centric&amp;rdquo; architecture.
This series of posts is about the connection between the testability of android-centric architecture and the other problems that are now leading Android developers to reject it; it&amp;rsquo;s about how our unit tests are trying to tell us that Activitys and Fragments don&amp;rsquo;t make the best building blocks for our apps because they force us to write code with tight coupling and low cohesion.</description>
      
    </item>
    
    <item>
      <title>Some Resources for Learning how to Test Android Apps</title>
      <link>https://www.philosophicalhacker.com/post/some-resources-for-learning-how-to-test-android-apps/</link>
      <pubDate>Fri, 03 Mar 2017 08:34:09 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/some-resources-for-learning-how-to-test-android-apps/</guid>
      <description>Someone recently asked me how I &amp;ldquo;know so much&amp;rdquo; about testing android apps. After disabusing them of the notion that I know a lot about testing, I said that I&amp;rsquo;d write up a blog post of some helpful resources I&amp;rsquo;ve found and send it to them. This is that blog post.
The resources are divided into books, articles, talks, and podcasts. I&amp;rsquo;ve marked resources that I think are essential with a &amp;ldquo;*&amp;rdquo;.</description>
      
    </item>
    
    <item>
      <title>What Unit Tests are Trying to Tell us about Activities: Pt. 1</title>
      <link>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/</link>
      <pubDate>Sat, 25 Feb 2017 09:33:51 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-unit-tests-are-trying-to-tell-us-about-activities-pt1/</guid>
      <description>Activitys and Fragments, perhaps by some strange historical accidents, have been seen as the optimal building blocks upon which we can build our Android applications for much of the time that Android has been around. Let&amp;rsquo;s call this idea &amp;ndash; the idea that Activitys and Fragments are the best building blocks for our apps &amp;ndash; &amp;ldquo;android-centric&amp;rdquo; architecture.
This series of posts is about the connection between the testability of android-centric architecture and the other problems that are now leading Android developers to reject it; it&amp;rsquo;s about how our unit tests are trying to tell us that Activitys and Fragments don&amp;rsquo;t make the best building blocks for our apps because they force us to write code with tight coupling and low cohesion.</description>
      
    </item>
    
    <item>
      <title>Towards Godless Android Development: How and Why I Kill God Objects</title>
      <link>https://www.philosophicalhacker.com/post/towards-godless-android-development-how-and-why-i-kill-god-objects/</link>
      <pubDate>Sat, 18 Feb 2017 09:27:03 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/towards-godless-android-development-how-and-why-i-kill-god-objects/</guid>
      <description>Korean Translation by Jihyok KIM
  God is dead&amp;hellip;and also Context is dead.
  &amp;ndash;Friedrich Nietszche (probably)
 Godlessness in the context of OO-programming &amp;ndash; unlike godlessness in a broader context &amp;ndash; is uncontroversially a good thing. Some may want gods in school or gods in government, but &amp;ndash; all other things being equal &amp;ndash; no one really wants gods in their programs.
In android development specifically, we have a god that we all know and love to hate: Context.</description>
      
    </item>
    
    <item>
      <title>Why Android Testing is so Hard: Historical Edition</title>
      <link>https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/</link>
      <pubDate>Thu, 09 Feb 2017 08:28:19 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-android-testing-is-so-hard-historical-edition/</guid>
      <description>As a profession, we also tend to be abysmally ignorant of our own history.
  David West, Object Thinking
  Almost two years ago, I wrote a couple articles that attempted to answer the question, &amp;ldquo;Why is testing Android apps so hard?&amp;rdquo; In those posts, I suggested that the standard architecture of Android applications is what makes testing difficult. This explanation of the difficulty of testing android apps raises a deeper, more historical question: why did an architecture that makes testing difficult became the default way of building Android apps in the first place?</description>
      
    </item>
    
    <item>
      <title>Why I Avoid Singletons for Android Data Loading</title>
      <link>https://www.philosophicalhacker.com/post/against-singletons-for-android-data-loading/</link>
      <pubDate>Sat, 04 Feb 2017 13:20:35 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/against-singletons-for-android-data-loading/</guid>
      <description>Imagine for a moment that there&amp;rsquo;s an annoying fly buzzing around your guests at a BBQ you&amp;rsquo;re hosting. You and your guests swat at it a few times, but no one manages to nail the sucker. You run into the house to grab a fly swatter, but you find that even if you wait for the fly to settle down somewhere, you can&amp;rsquo;t quite smash it.
Frustrated and desperate, you decide to evacuate the party (and the state), get your hands on a nuke, and nuke the fly along with your backyard and neighborhood.</description>
      
    </item>
    
    <item>
      <title>Espresso Test Addiction: An Anti-pattern</title>
      <link>https://www.philosophicalhacker.com/post/espresso-test-addiction/</link>
      <pubDate>Sat, 28 Jan 2017 09:19:38 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/espresso-test-addiction/</guid>
      <description>More than 1000 apps&amp;hellip;they have espresso tests for the first time using the test recorder&amp;hellip;espresso adoption has also grown since the introduction of [the espresso test recorder].
  Android Developers Backstage, Episode 37 Espresso Test Recorder, 31:10
   Record-playback tools are almost always a bad idea for any kind of automation, since they resist changeability and obstruct useful abstractions. They are only worth having as a tool to generate fragments of scripts which you can then edit as a proper programming language&amp;hellip;</description>
      
    </item>
    
    <item>
      <title>Exploiting Android-Specific Seams for Testing and Flexibility</title>
      <link>https://www.philosophicalhacker.com/post/exploiting-android-specific-seams-for-testing-and-flexibility/</link>
      <pubDate>Sat, 21 Jan 2017 11:20:01 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/exploiting-android-specific-seams-for-testing-and-flexibility/</guid>
      <description>As I pointed out throughout my series of posts on writing testable Android applications, the key to writing testable Android apps, is creating and exploiting seams. During these posts, I pointed out two types of seams that are available in any OO programming language and any programming environment. In this post, I want to highlight some Android-specific seams that we can leverage to make our applications more testable and flexible.</description>
      
    </item>
    
    <item>
      <title>Why I Don&#39;t use Robolectric</title>
      <link>https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/</link>
      <pubDate>Fri, 06 Jan 2017 22:01:04 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/</guid>
      <description>The more that I learn about testing, the more suspicious of Robolectric I get. I&amp;rsquo;m honestly starting to think that many of the heros of unit testing (e.g., Kent Beck, Michael Feathers, Steve Freeman, and Nat Pryce) would be pretty suspicious of Robolectric. Here are my concerns:
  Robolectric is largely1a set of mocks for a set of types we don&amp;rsquo;t own. Mocking types we don&amp;rsquo;t own is not recommended by the folks who invented mocks.</description>
      
    </item>
    
    <item>
      <title>What Should we Unit Test?</title>
      <link>https://www.philosophicalhacker.com/post/what-should-we-unit-test/</link>
      <pubDate>Sun, 01 Jan 2017 16:41:45 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-should-we-unit-test/</guid>
      <description>When I go to work, I&amp;rsquo;m afraid of three things. I worry that
 the new feature I&amp;rsquo;m implementing won&amp;rsquo;t work as expected the code I&amp;rsquo;m tweaking will break functionality that used to work the application isn&amp;rsquo;t architected in a way that makes it easy for me to adapt it to ever-changing business requirements  Automated testing is supposed to help alleviate all three of these fears, but when we&amp;rsquo;re first getting started with automated testing, it can be difficult to know where to start.</description>
      
    </item>
    
    <item>
      <title>How we Misuse Mocks for Android Tests</title>
      <link>https://www.philosophicalhacker.com/post/how-we-misuse-mocks-for-android-tests/</link>
      <pubDate>Tue, 27 Dec 2016 08:21:42 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/how-we-misuse-mocks-for-android-tests/</guid>
      <description>Mocks are a pretty standard tool in our android developer tool belt. The extent to which we should use this tool for unit testing is a complicated and controversial issue.1Within the Android community specifically, I think that a part of the controversy is due to confusion over the intended use of mocks. More specifically, some android developers seem intent on mocking types they don&amp;rsquo;t own and on verifying all interactions of a target class with a collaborator.</description>
      
    </item>
    
    <item>
      <title>Build Variants and Link Seams</title>
      <link>https://www.philosophicalhacker.com/post/build-variants-and-link-seams/</link>
      <pubDate>Sun, 18 Dec 2016 15:39:11 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/build-variants-and-link-seams/</guid>
      <description>This post is just another installment in a series of posts that are a written version of my Florida dev fest talk. Last time, we talked about object seams and how they make our apps more testable. This time, we&amp;rsquo;ll talk about how link seams help you write more testable apps and how build variants are used to create link seams.
What are link seams?  “[code] contains calls to code in other files.</description>
      
    </item>
    
    <item>
      <title>Object Seams and MVP for Testability</title>
      <link>https://www.philosophicalhacker.com/post/object-seams-and-mvp-for-testability/</link>
      <pubDate>Fri, 09 Dec 2016 18:29:54 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/object-seams-and-mvp-for-testability/</guid>
      <description>In my last post, a continuation of a written version of the talk I gave at Florida dev fest, I tried to give an answer to the question, &amp;ldquo;What makes apps testable?&amp;rdquo; The answer: seams. Seams make apps testable, and in this post, I want to talk about a particular kind of seam: object seams.
The key insight behind object seams in this:
 The fundamental thing to recognize is that when we look at a call in an object-oriented program, it does not define which method will actually be executed.</description>
      
    </item>
    
    <item>
      <title>What makes Android Apps Testable?</title>
      <link>https://www.philosophicalhacker.com/post/what-makes-android-apps-testable/</link>
      <pubDate>Sat, 03 Dec 2016 18:16:18 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/what-makes-android-apps-testable/</guid>
      <description>&lt;p&gt;&lt;img  src=&#34;https://www.philosophicalhacker.com/images/ascending-and-descending-escher.jpg&#34;
        alt/&gt;
This post is a continuation of my attempt to reproduce &lt;a href=&#34;https://devfestflorida.org/schedule/day1?sessionId=113&#34;target=&#34;_blank&#34;&gt;my recent DevFest talk&lt;/a&gt; in written form.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Why we Should Probably Write More Tests for Our Android Apps</title>
      <link>https://www.philosophicalhacker.com/post/why-we-should-probably-write-more-tests-for-our-android-apps/</link>
      <pubDate>Mon, 07 Nov 2016 07:36:45 -0500</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-we-should-probably-write-more-tests-for-our-android-apps/</guid>
      <description>This past weekend, I had the privilege of speaking about writing testable Android apps at Florida DevFest. This post is a written version of one of the major points I made in my presentation.
Let&amp;rsquo;s start off with two descriptions of attitudes towards testing. The first comes from Kaushik Goupal (he&amp;rsquo;s describing an attitude, not endorsing it):
 Testing seems to be like going to gym. Everyone feels like &amp;ldquo;yeah. I should be testing.</description>
      
    </item>
    
    <item>
      <title>Unit Testable RecyclerViews</title>
      <link>https://www.philosophicalhacker.com/post/unit-testable-recycler-views/</link>
      <pubDate>Mon, 08 Aug 2016 08:34:46 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/unit-testable-recycler-views/</guid>
      <description>&lt;p&gt;When building our Android apps, we can often wind up with a decent amount of code in our &lt;code&gt;RecyclerView.Adapter&lt;/code&gt;s that we want to test. In this article, I briefly suggest two ways of structuring our &lt;code&gt;RecyclerView&lt;/code&gt;-related classes so that we can accomplish this.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>RxLoader: Lightweight, Boilerplate-Free Data loading with Loaders and RxJava</title>
      <link>https://www.philosophicalhacker.com/post/rxloader-boilerplate-free-data-loading-with-loaders-and-rxjava/</link>
      <pubDate>Sat, 23 Jul 2016 15:43:29 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/rxloader-boilerplate-free-data-loading-with-loaders-and-rxjava/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Loaders are awesome&amp;hellip;they&amp;rsquo;re essentially the best practice implementation of asynchronous data loading in your Activities.&lt;/p&gt;
&lt;p&gt;-Reto Meier, Developing Android Apps Udacity Course&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>An Espresso Test Recorder Deep Dive</title>
      <link>https://www.philosophicalhacker.com/post/an-espresso-test-recorder-deep-dive/</link>
      <pubDate>Thu, 07 Jul 2016 23:28:29 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/an-espresso-test-recorder-deep-dive/</guid>
      <description>I&amp;rsquo;ve been working on a unit test recorder for Android. After struggling to find a way to implement the unit test recorder,1I decided to take a look at how Google implements the espresso test recorder. This post presents what I found when I dug into the source code of the espresso test recorder.
Collecting User Interaction Info Before I took a look at the source for the espresso recorder, I half expected to find some fancy bytecode manipulation of the sort we see for the proguard or jacoco transformers.</description>
      
    </item>
    
    <item>
      <title>How to Safely move Logic out of Activities</title>
      <link>https://www.philosophicalhacker.com/post/how-to-safely-move-logic-out-of-activities/</link>
      <pubDate>Thu, 16 Jun 2016 16:58:30 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/how-to-safely-move-logic-out-of-activities/</guid>
      <description>In my last post, I argued that we should stop putting our app logic in Activitys and Fragments because it makes both unit testing and functional testing our apps more difficult. In this post, I&amp;rsquo;ll try to suggest a method of safely removing app logic from our Activitys and Fragments, drawing on a central idea discussed in Michael Feathers&amp;rsquo; Working Effectively with Legacy Code: characterization tests.
In the first section, I briefly introduce the idea of characterization tests.</description>
      
    </item>
    
    <item>
      <title>Why we Should Stop Putting Logic in Activities</title>
      <link>https://www.philosophicalhacker.com/post/why-we-should-stop-putting-logic-in-activities/</link>
      <pubDate>Tue, 14 Jun 2016 23:13:00 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/why-we-should-stop-putting-logic-in-activities/</guid>
      <description>A while back, I wrote a series of articles about why unit testing Android apps is so difficult and what we can do to make our apps more unit testable. The upshot of the those articles is that dependency injection makes it easier to unit test our Android apps and we can&amp;rsquo;t get proper dependency injection just by using Dagger (or any other DI framework for that matter) to inject dependencies into our Activitys (or Fragments).</description>
      
    </item>
    
    <item>
      <title>A New way of Learning (Android Development)</title>
      <link>https://www.philosophicalhacker.com/post/a-new-way-of-learning-android-development/</link>
      <pubDate>Sat, 11 Jun 2016 07:52:48 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/a-new-way-of-learning-android-development/</guid>
      <description>I&amp;rsquo;m working on a new way of learning android development. I call it &amp;ldquo;University Android.&amp;rdquo; The first lesson is available now. Check it out.</description>
      
    </item>
    
    <item>
      <title>Testing Strategies with a React/Redux Architecture</title>
      <link>https://www.philosophicalhacker.com/post/testing-strategies-with-a-react-redux-architecture/</link>
      <pubDate>Thu, 09 Jun 2016 15:22:47 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/testing-strategies-with-a-react-redux-architecture/</guid>
      <description>In my last post, I briefly introduced the principles behind React and Redux. I said that React is about making what gets rendered to the screen a function of some view-state object. I also said that Redux is about making updates to the screen a function of the current view-state object and an action describing a user&amp;rsquo;s interaction with the view.
In this post, I explore a benefit of a React/Redux-like architecture vis-a-vis testing.</description>
      
    </item>
    
    <item>
      <title>How React-and-Redux-like Architectures for Android can make Testing Easier</title>
      <link>https://www.philosophicalhacker.com/post/react-and-redux-like-architectures-for-android/</link>
      <pubDate>Wed, 08 Jun 2016 17:30:09 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/react-and-redux-like-architectures-for-android/</guid>
      <description>I think there&amp;rsquo;s a lot of value in seeing what else is happening, even if you&amp;rsquo;re not a master of one of those other languages. As long as you&amp;rsquo;re being exposed to it, you&amp;rsquo;re opening your mind up to different ways of approaching problems and solving problems and different techniques.
  Jake Wharton, Fragmented, Episode 6, 27:45-28:20
 React and Redux are libraries that have taken the web development world by storm.</description>
      
    </item>
    
    <item>
      <title>PSA: Dont Use Espresso Idling Resources like Google does</title>
      <link>https://www.philosophicalhacker.com/post/psa-dont-use-esprsso-idling-resources-like-this/</link>
      <pubDate>Tue, 07 Jun 2016 06:54:20 -0400</pubDate>
      
      <guid>https://www.philosophicalhacker.com/post/psa-dont-use-esprsso-idling-resources-like-this/</guid>
      <description>Roman Nurik: &amp;hellip;That&amp;rsquo;s actually one of the harder things with writing good sample code. People are going to be copying and pasting the heck out of it so you can&amp;rsquo;t take those shortcuts that you sometimes hopefully aren&amp;rsquo;t taking.
  Chet Haase: I always take the shortcuts. That&amp;rsquo;s one of the more interesting things that the developer relations group does in general&amp;hellip;we will put together tests and sample code for the features that we work but we really don&amp;rsquo;t have the time to dive in deeply and do it in a real context.</description>
      
    </item>
    
    <item>
      <title>Making a TDD-based HackerNews client for Android</title>
      <link>https://www.philosophicalhacker.com/2015/07/17/making-a-tdd-based-hackernews-client-for-android/</link>
      <pubDate>Fri, 17 Jul 2015 11:53:55 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/07/17/making-a-tdd-based-hackernews-client-for-android/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m using TDD to write a HackerNews client for Android. This post (and the ones that will likely follow it) share a little bit about some of the techniques I used to follow a TDD-based work-flow for developing this application. It also discusses the architecture that arises when Android apps are built with testability in mind from the ground up.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Why Having Global Static References to Application Contexts is Probably not the Best Idea</title>
      <link>https://www.philosophicalhacker.com/2015/07/14/why-static-references-to-application-contexts-are-probably-not-the-best-idea/</link>
      <pubDate>Tue, 14 Jul 2015 18:35:40 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/07/14/why-static-references-to-application-contexts-are-probably-not-the-best-idea/</guid>
      <description>&lt;p&gt;In my last post, I went over &lt;a href=&#34;http://www.philosophicalhacker.com/2015/07/09/6-things-i-wish-i-knew-before-i-wrote-my-first-android-app/&#34;target=&#34;_blank&#34;&gt;6 things I wish I knew before I wrote my first Android app&lt;/a&gt;. One of the things I listed in that post was this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Don’t have static references to Contexts&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;The reason I warned against this is that static references to Contexts can cause memory leaks. An astute reader pointed out that a static reference to an application Context wouldn&amp;rsquo;t cause a memory leak since the application Context is around for the lifetime the app is running anyway. I then qualified my warning by saying:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;In this post, I want to say a little more about why think having and using a static reference to an application Context is &lt;em&gt;less-than-ideal&lt;/em&gt;. I emphasize &amp;ldquo;less-than-ideal&amp;rdquo; in the previous sentence as a way of highlighting what I&amp;rsquo;m not saying: I&amp;rsquo;m not saying that a kitten dies every time you use a static reference to an application Context. Once again, @codestandards is hilarious and relevant here:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Please, for the sake of the kittens. &lt;a href=&#34;http://t.co/xaj7pNDVfH&#34;&gt;pic.twitter.com/xaj7pNDVfH&lt;/a&gt;&lt;/p&gt;&amp;mdash; Code Standards (@codestandards) &lt;a href=&#34;https://twitter.com/codestandards/status/570224843536277504?ref_src=twsrc%5Etfw&#34;&gt;February 24, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;Instead, all I&amp;rsquo;m doing in this post is offering a few points that suggest that using static references to Contexts is probably not the cleanest way of coding Android apps.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>6 Things I wish I Knew before I Wrote my first Android App</title>
      <link>https://www.philosophicalhacker.com/2015/07/09/6-things-i-wish-i-knew-before-i-wrote-my-first-android-app/</link>
      <pubDate>Thu, 09 Jul 2015 21:07:51 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/07/09/6-things-i-wish-i-knew-before-i-wrote-my-first-android-app/</guid>
      <description>&lt;p&gt;My first app was terrible. It was so terrible, in fact, that I removed it from the store and I don&amp;rsquo;t even bother listing it on my resume&amp;rsquo; anymore. That app wouldn&amp;rsquo;t have been so terrible if I knew a few things about Android development before I wrote it.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a list of things to keep in mind as you&amp;rsquo;re writing your first Android apps. These lessons are derived from actual mistakes that I made in the source code of my first app, mistakes that I&amp;rsquo;ll be showing below. Keeping these things in mind will help you write an app that you can be a little prouder of.&lt;/p&gt;
&lt;p&gt;Of course, if you&amp;rsquo;re doing your job right as a student of Android development, you&amp;rsquo;ll probably hate your app later regardless. As @codestandards says,&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;If the code you wrote a year ago doesn&amp;#39;t seem bad to you, you&amp;#39;re probably not learning enough.&lt;/p&gt;&amp;mdash; Code Standards (@codestandards) &lt;a href=&#34;https://twitter.com/codestandards/status/601373392059518976?ref_src=twsrc%5Etfw&#34;&gt;May 21, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you&amp;rsquo;re an experienced Java developer, items 1, 2, and 5 probably won&amp;rsquo;t be interesting to you. Items 3 and 4, on the other hand, might show you some cool stuff you can do with Android Studio that you might not have known about, even if you&amp;rsquo;ve never been guilty of making the mistakes I demo in those items.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>My Response to Hannes Dorfmann on &#34;the Circular Dependency Problem&#34;</title>
      <link>https://www.philosophicalhacker.com/2015/07/08/my-response-to-hannes-dorfmann-on-the-circular-dependency-problem/</link>
      <pubDate>Wed, 08 Jul 2015 13:42:14 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/07/08/my-response-to-hannes-dorfmann-on-the-circular-dependency-problem/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://www.philosophicalhacker.com/2015/07/07/mvpr-a-flexible-testable-architecture-for-android-pt-1/&#34;target=&#34;_blank&#34;&gt;my last post&lt;/a&gt;, I argued that there are two disadvantages to &lt;code&gt;Activities&lt;/code&gt; and Presenters. The first disadvantage is that they are often bloated classes. The second disadvantage is that these classes often have a circular dependency between themselves and their Views. Yesterday, Hannes Dorfmann made a comment on my post that was so thoughtful and excellent that I think its worth dedicating an entire post to responding to it.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>MVPR: A Flexible, Testable Architecture for Android (Pt. 1)</title>
      <link>https://www.philosophicalhacker.com/2015/07/07/mvpr-a-flexible-testable-architecture-for-android-pt-1/</link>
      <pubDate>Tue, 07 Jul 2015 18:29:16 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/07/07/mvpr-a-flexible-testable-architecture-for-android-pt-1/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Steve Freeman and Nat Pryce, _Growing Object Oriented Software Guided by Tests_&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Lately, I&amp;rsquo;ve been working towards making Google&amp;rsquo;s IO app unit testable. A part of the reason I&amp;rsquo;m doing this is to test the claims that Freeman and Pryce make in the above quotation about unit testing. Although I&amp;rsquo;m still not even done with refactoring one Activity in Google&amp;rsquo;s IOSched app, I&amp;rsquo;m already finding some truth to what they&amp;rsquo;re saying.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Activity&lt;/code&gt; that I&amp;rsquo;ve been working on is the &lt;code&gt;SessionDetailActivity&lt;/code&gt;. If you&amp;rsquo;ve been following me for a while, you know exactly what Activity I&amp;rsquo;m talking about, but if you&amp;rsquo;re tuning in the first time, here&amp;rsquo;s what the &lt;code&gt;SessionDetailActivity&lt;/code&gt; UI looks like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.philosophicalhacker.com/wp-content/uploads/2015/05/io-testing-talk-04.png&#34;target=&#34;_blank&#34;&gt;&lt;img  src=&#34;http://www.philosophicalhacker.com/wp-content/uploads/2015/05/io-testing-talk-04.png&#34;
        alt=&#34;IO Testing Talk-04&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As I mentioned in &lt;a href=&#34;http://www.philosophicalhacker.com/2015/05/31/towards-a-unit-testable-fork-of-googles-iosched-app/&#34;target=&#34;_blank&#34;&gt;the post that introduced this series&lt;/a&gt;, there have been several challenges to making the &lt;code&gt;SessionDetailActivity&lt;/code&gt; unit testable. Unit testing its dynamically constructed views was a challenge that I discussed in &lt;a href=&#34;http://www.philosophicalhacker.com/2015/06/06/unit-testing-dynamically-constructed-views/&#34;target=&#34;_blank&#34;&gt;my last post in this series&lt;/a&gt;, but in that post, I noted that my strategy for testing dynamically constructed views wasn&amp;rsquo;t entirely clean because of a circular dependency between &lt;code&gt;Views&lt;/code&gt; and &lt;code&gt;Presenters&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This circular dependency is a symptom of a larger problem with how we structure our Android applications: both &lt;code&gt;Activities&lt;/code&gt; and &lt;code&gt;Presenters&lt;/code&gt; violate the principle of single responsibility. They are often responsible for at least two things: binding data to a &lt;code&gt;View&lt;/code&gt; and responding to user input. This is a part of the reason why &lt;a href=&#34;https://github.com/google/iosched/blob/master/android/src/main/java/com/google/samples/apps/iosched/ui/SessionDetailActivity.java&#34;target=&#34;_blank&#34;&gt;the &lt;code&gt;SessionDetailActivity&lt;/code&gt;&lt;/a&gt;, a class that&amp;rsquo;s supposed to serve as a model for Android development, is over 1000 lines long.&lt;/p&gt;
&lt;p&gt;I think there&amp;rsquo;s a better way to structure our applications. In the next few posts, I&amp;rsquo;ll propose a new architecture that has the following properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It breaks up the multiple responsibilities typically handled by &lt;code&gt;Presenters&lt;/code&gt; and &lt;code&gt;Activities&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It breaks the circular dependency that traditionally exists between Views on the one hand and Activities or Presenters on the other hand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It enables us to use constructor dependency injection for all of our objects that present data to the user and respond to user input.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It makes our ui-related business logic classes easier to unit test, impossible to construct without the dependencies necessary to fulfill their responsibilities, and (slightly) more amenable to the use of composition and polymorphism to extend and/or modify object behavior.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this post, I will try to give some reasons why we might consider a new architecture for Android development in the first place.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Introduction to RxJava for Android (Pt. 2)</title>
      <link>https://www.philosophicalhacker.com/2015/06/19/introduction-to-rxjava-for-android-pt-2/</link>
      <pubDate>Fri, 19 Jun 2015 12:19:14 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/06/19/introduction-to-rxjava-for-android-pt-2/</guid>
      <description>&lt;p&gt;I concluded my last post by summing up what we&amp;rsquo;ve seen so far and what we still need to understand about RxJava:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;In this post, I&amp;rsquo;ll fill in the missing gaps in our understanding of my initial statement of what RxJava allows us to do.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Introduction to RxJava for Android: The Talk</title>
      <link>https://www.philosophicalhacker.com/2015/06/16/introduction-to-rxjava-for-android-the-talk/</link>
      <pubDate>Wed, 17 Jun 2015 01:48:45 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/06/16/introduction-to-rxjava-for-android-the-talk/</guid>
      <description>Earlier today, I gave my Intro To RxJava talk. I&amp;rsquo;m not thrilled at how clear I was at explaining certain aspects of RxJava, but here&amp;rsquo;s the video nonetheless. My talk starts at 28:32. Hopefully, I&amp;rsquo;ll do a better job when I finish the written version of this talk.
If you want to hear a hilarious take down of the design of the new Pizza Hut app, check out Ian&amp;rsquo;s talk that happens before mine.</description>
      
    </item>
    
    <item>
      <title>An Introduction to RxJava for Android (Pt. 1)</title>
      <link>https://www.philosophicalhacker.com/2015/06/12/an-introduction-to-rxjava-for-android/</link>
      <pubDate>Fri, 12 Jun 2015 12:34:53 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/06/12/an-introduction-to-rxjava-for-android/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m taking a brief break from talking about testing. I&amp;rsquo;ll resume my discussion of how &lt;a href=&#34;http://www.philosophicalhacker.com/2015/05/31/towards-a-unit-testable-fork-of-googles-iosched-app/&#34;target=&#34;_blank&#34;&gt;I&amp;rsquo;m making Google&amp;rsquo;s IOSched app unit testable&lt;/a&gt; after I&amp;rsquo;ve posted the content from &lt;a href=&#34;http://www.meetup.com/University-Android/events/222048562/&#34;target=&#34;_blank&#34;&gt;my upcoming talk on RxJava&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;a href=&#34;http://www.philosophicalhacker.com/wp-content/uploads/2015/06/rxjava_prezi_rxjava_def.jpg&#34;target=&#34;_blank&#34;&gt;&lt;img  src=&#34;http://www.philosophicalhacker.com/wp-content/uploads/2015/06/rxjava_prezi_rxjava_def-1024x791.jpg&#34;
        alt=&#34;rxjava_prezi_rxjava_def&#34;/&gt;&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Unit Testing Dynamically Constructed Views</title>
      <link>https://www.philosophicalhacker.com/2015/06/06/unit-testing-dynamically-constructed-views/</link>
      <pubDate>Sat, 06 Jun 2015 11:08:03 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/06/06/unit-testing-dynamically-constructed-views/</guid>
      <description>&lt;p&gt;Some view hierarchies in Android are specified statically. The structure of these hierarchies does not change at run-time. Occasionally, we need to have dynamically constructed view hierarchies, hierarchies whose structure change at run-time. We might need to, for example, add or remove a view depending on some data we&amp;rsquo;ve fetched or in response to some input. The &lt;code&gt;SessionDetailActivity&lt;/code&gt; in Google&amp;rsquo;s IOSched app has a dynamically constructed view hierarchy. The number of tags associated with a particular IO session determines how many tag views are added to the &lt;code&gt;SessionDetailActivity&lt;/code&gt;&#39;s view hierarchy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.philosophicalhacker.com/wp-content/uploads/2015/05/io-testing-talk-04.png&#34;target=&#34;_blank&#34;&gt;&lt;img  src=&#34;http://www.philosophicalhacker.com/wp-content/uploads/2015/05/io-testing-talk-04.png&#34;
        alt=&#34;IO Testing Talk-04&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this screenshot, the &amp;ldquo;Distribute,&amp;rdquo; &amp;ldquo;Android,&amp;rdquo; and &amp;ldquo;Games&amp;rdquo; tags are added to the view hierarchy based on the tags associated with the &amp;ldquo;Going global with Google Play&amp;rdquo; IO session. In this post, I&amp;rsquo;ll outline an approach that I used to write the code that is both unit testable and able to dynamically construct the &lt;code&gt;SesisonDetailActivity&lt;/code&gt;&#39;s view hierarchy. This post is a part of a series of parts in which I discuss how we can take steps towards &lt;a href=&#34;http://www.philosophicalhacker.com/2015/05/31/towards-a-unit-testable-fork-of-googles-iosched-app/&#34;target=&#34;_blank&#34;&gt;making Google&amp;rsquo;s IOSched app unit testable&lt;/a&gt;.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Towards A Unit Testable Fork of Google&#39;s IOSched App</title>
      <link>https://www.philosophicalhacker.com/2015/05/31/towards-a-unit-testable-fork-of-googles-iosched-app/</link>
      <pubDate>Sun, 31 May 2015 20:11:16 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/05/31/towards-a-unit-testable-fork-of-googles-iosched-app/</guid>
      <description>&lt;p&gt;In my recent &lt;a href=&#34;http://www.philosophicalhacker.com/2015/04/10/against-android-unit-tests/&#34;target=&#34;_blank&#34;&gt;Against Android Unit Tests&lt;/a&gt; series, I discussed the difficulties of unit testing android applications and proposed a different way of building applications that would enhance their unit testability. My proposal in that series was really largely a rough sketch of what it would take to make parts of Google&amp;rsquo;s IOSched app unit testable.&lt;/p&gt;
&lt;p&gt;More recently, I&amp;rsquo;ve started to fill in the details of that proposal by forking the IOSched repo and refactoring it to make it unit testable. In the next few posts, I&amp;rsquo;ll be discussing some of the challenges that arose when attempting to make the &lt;code&gt;SessionDetailActivity&lt;/code&gt; unit testable within the IOSched app. In this post, I want to provide a broad overview of the challenges I&amp;rsquo;ll be discussing.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>An Introduction to Unit Testing on Android</title>
      <link>https://www.philosophicalhacker.com/2015/05/29/making-the-most-of-android-studios-unit-testing-support/</link>
      <pubDate>Fri, 29 May 2015 11:23:14 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/05/29/making-the-most-of-android-studios-unit-testing-support/</guid>
      <description>&lt;p&gt;Yesterday at IO Extended Orlando, I gave a talk on testing. What follows is a written version of the presentation I gave.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.philosophicalhacker.com/wp-content/uploads/2015/05/io-testing-talk-01.png&#34;target=&#34;_blank&#34;&gt;&lt;img  src=&#34;http://www.philosophicalhacker.com/wp-content/uploads/2015/05/io-testing-talk-01.png&#34;
        alt=&#34;IO Testing Talk-01&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android 1.2 introduced unit testing support. Now, we can run junit tests on the jvm while we&amp;rsquo;re developing our apps. During my talk, we&amp;rsquo;ll discuss the following questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Why should anyone care about this new feature?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What the heck is unit testing anyways?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Briefly, I&amp;rsquo;ll also mention some of the challenges of writing unit tests for Android.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>What I&#39;ve Learned From Trying to Make An Android App Unit Testable</title>
      <link>https://www.philosophicalhacker.com/2015/05/22/what-ive-learned-from-trying-to-make-an-android-app-unit-testable/</link>
      <pubDate>Fri, 22 May 2015 12:29:28 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/05/22/what-ive-learned-from-trying-to-make-an-android-app-unit-testable/</guid>
      <description>&lt;p&gt;For the past few posts, I&amp;rsquo;ve introduced and showed how we would apply The Square Way of building Android applications. The primary motivation for The Square Way was to increase the unit testability of our applications. As I stated in the &lt;a href=&#34;http://philosophicalhacker.com/2015/04/10/against-android-unit-tests/&#34;target=&#34;_blank&#34;&gt;introduction to this series&lt;/a&gt;, most tests in Android are slow, instrumentation tests and/or tests that rely on third-party frameworks like Roboletric. The Square Way was supposed to help us write fast unit tests that didn&amp;rsquo;t rely on any third-party frameworks.&lt;/p&gt;
&lt;p&gt;Now that we&amp;rsquo;ve discussed &lt;a href=&#34;http://philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/&#34;target=&#34;_blank&#34;&gt;why unit testing in Android is so difficult&lt;/a&gt; and seen how &lt;a href=&#34;http://philosophicalhacker.com/2015/05/01/how-to-make-our-android-apps-unit-testable-pt-1/&#34;target=&#34;_blank&#34;&gt;The Square Way resolves those difficulties&lt;/a&gt;, we are finally in a position to assess The Square Way as a whole as a method of creating unit testable Android applications. That assessment is the subject of this article. My assessment consists of the following three claims:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Removing all compile time dependencies on the Android SDK is not necessary for us write fast unit tests for Android. (Its also not really a practical thing to try to do anyway.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provided that we redefine The Square Way so that it does not require us to remove compile-time dependencies on the Android SDK, the only problem that arises when trying to apply The Square Way is simply writing all of boilerplate code. Fortunately, much of this boilerplate can be written for us by Android Studio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependency Injection is really the main &amp;ldquo;active ingredient&amp;rdquo; that allows The Square Way enhance the unit testability of our applications.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>Android Unit Testing Guides</title>
      <link>https://www.philosophicalhacker.com/2015/05/09/android-unit-testing-guides/</link>
      <pubDate>Sat, 09 May 2015 13:20:54 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/05/09/android-unit-testing-guides/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://philosophicalhacker.com/2015/05/08/how-to-make-our-android-apps-unit-testable-pt-2/&#34;target=&#34;_blank&#34;&gt;my last post&lt;/a&gt;, I showed how we can apply The Square Way to UI app component classes. More specifically I showed how The Square Way would have us rewrite the &lt;code&gt;SessionDetailActivity&lt;/code&gt; so that we could unit test its &lt;code&gt;onStop()&lt;/code&gt; method. At the end of my last post, I said that I&amp;rsquo;d be spending this and the next post doing an overall assessment of The Square Way.&lt;/p&gt;
&lt;p&gt;I actually won&amp;rsquo;t be doing that this post. I&amp;rsquo;ll be postponing the overall assessment of The Square Way until the next few posts. Instead, what I want to do in this post is simply present a few unit-testability guides. These cheatsheets summarize much of what&amp;rsquo;s been covered in the past few posts and provide you with simplified steps to follow if you are interested in enhancing your application&amp;rsquo;s unit-testability via The Square Way.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>How to Make Our Android Apps Unit Testable (Pt. 2)</title>
      <link>https://www.philosophicalhacker.com/2015/05/08/how-to-make-our-android-apps-unit-testable-pt-2/</link>
      <pubDate>Fri, 08 May 2015 11:46:13 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/05/08/how-to-make-our-android-apps-unit-testable-pt-2/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://philosophicalhacker.com/2015/05/01/how-to-make-our-android-apps-unit-testable-pt-1/&#34;target=&#34;_blank&#34;&gt;my last post&lt;/a&gt;, I introduced the “The Square Way” of structuring our android code. I said that The Square Way is a generalization of the approach that Square used to make the logic within their &lt;code&gt;Fragment&lt;/code&gt;s unit testable. I also showed how The Square Way would have us rewrite the &lt;code&gt;SessionCalendarService&lt;/code&gt; within Google’s IOSched app so that we could unit test the business logic within it. As we’ll see in this post, The Square Way also makes it easier/possible for us to unit test UI app component business logic.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>How to Make Our Android Apps Unit Testable (Pt. 1)</title>
      <link>https://www.philosophicalhacker.com/2015/05/01/how-to-make-our-android-apps-unit-testable-pt-1/</link>
      <pubDate>Fri, 01 May 2015 11:30:24 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/05/01/how-to-make-our-android-apps-unit-testable-pt-1/</guid>
      <description>&lt;p&gt;Unit testing Android apps is hard, and sometimes it can be impossible. For &lt;a href=&#34;http://philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/&#34;target=&#34;_blank&#34;&gt;the past two posts&lt;/a&gt;, I’ve been explaining why android unit testing is so difficult. The main conclusion from &lt;a href=&#34;http://philosophicalhacker.com/2015/04/24/why-android-unit-testing-is-so-hard-pt-2/&#34;target=&#34;_blank&#34;&gt;the last post&lt;/a&gt; is that it is difficult/impossible to unit test our Android applications because of the way we are encouraged to structure them. Google seems to want us to put our business logic in app component classes (e.g., &lt;code&gt;Activity&lt;/code&gt;s, &lt;code&gt;Fragment&lt;/code&gt;s, &lt;code&gt;Service&lt;/code&gt;s, etc.). This approach to writing Android applications is what I have been calling the “standard way.”&lt;/p&gt;
&lt;p&gt;In this post, I outline an alternative approach to structuring Android applications that will make it easier to unit test them. As I pointed out in &lt;a href=&#34;http://philosophicalhacker.com/2015/04/10/against-android-unit-tests/&#34;target=&#34;_blank&#34;&gt;the introduction to this series&lt;/a&gt;, the approach that I suggest is a generalization of the approach that Square uses to &lt;a href=&#34;https://corner.squareup.com/2014/10/advocating-against-android-fragments.html&#34;target=&#34;_blank&#34;&gt;remove Fragments from their applications&lt;/a&gt;. Since this approach is inspired by the folks at Square, I will call it “the square way.”&lt;/p&gt;
&lt;p&gt;The heart of the square way way is this: remove all business logic from app component classes (e.g., &lt;code&gt;Activity&lt;/code&gt;s, &lt;code&gt;Fragment&lt;/code&gt;s, &lt;code&gt;Service&lt;/code&gt;s) and place that logic into “business objects,” POJO objects whose dependencies are injected, android-specific implementations of android-agnostic interfaces. If we follow the square way of developing our apps, we will be in a better position to unit test them. In this post, I explain how the square way would have us refactor non-UI app components like the &lt;code&gt;SessionCalendarService&lt;/code&gt; I’ve been discussing for the past few posts.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Why Android Unit Testing Is So Hard (Pt. 2)</title>
      <link>https://www.philosophicalhacker.com/2015/04/24/why-android-unit-testing-is-so-hard-pt-2/</link>
      <pubDate>Fri, 24 Apr 2015 11:44:49 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/04/24/why-android-unit-testing-is-so-hard-pt-2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; In &lt;a href=&#34;http://philosophicalhacker.com/2015/05/22/what-ive-learned-from-trying-to-make-an-android-app-unit-testable/&#34;target=&#34;_blank&#34;&gt;the post that concludes this series&lt;/a&gt;, I point out that making unit testable Android apps does not require us to remove compile-time dependencies on the Android SDK and that attempting to do so is impractical anyway. Ignore anything in this post that suggests otherwise.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In my &lt;a href=&#34;http://philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/&#34;target=&#34;_blank&#34;&gt;last post&lt;/a&gt;, I showed that even the (intelligent) engineers over at Google have written some Android code that is simply untestable. More specifically, I showed that there’s no way to unit test the &lt;code&gt;SessionDetailActivity&lt;/code&gt;’s &lt;code&gt;onStop()&lt;/code&gt; method. I also gave a specific diagnosis for the untestability of &lt;code&gt;onStop()&lt;/code&gt;: we can’t complete the arrange- and assert-steps of a test against &lt;code&gt;onStop()&lt;/code&gt; because there is no way to alter the pre-act-state, nor is there a way to access the post-act-state for a test of &lt;code&gt;onStop()&lt;/code&gt;. I ended the last post by claiming that some properties of the Android SDK, along with the standard way we are encouraged to structure our android apps, encourage us to write code that is difficult/impossible to unit test and by promising that I’d elaborate more on that claim in this post.&lt;/p&gt;
&lt;p&gt;Before I do that, let me say again that showing that the difficulty of testing Android applications is caused by the standard structure of android apps is important for the overarching goal of this series of articles. This series is an attempt to argue that we should consider restructuring our applications so that they do not explicitly depend on the Android SDK and its an attempt to present a robust architecture that will enhance the testability of Android applications. You can read the introduction to this series &lt;a href=&#34;http://philosophicalhacker.com/2015/04/10/against-android-unit-tests/&#34;target=&#34;_blank&#34;&gt;here&lt;/a&gt;. With that said, I can move on to trying to demonstrate the central claim of this post.&lt;/p&gt;
&lt;p&gt;There’s a standard way of developing android applications. Sample code and open source code alike both place an app’s business logic within Android app component classes, namely, Activities, Services, and Fragments. Going forward, I’m going to refer to this practice as “the standard way.” Here’s the central claim of this post: As long as we follow the “standard way”, we’re going to write code that’s either difficult or impossible to unit test. In other words, the untestable code that I pointed out in my last article is not a fluke. The standard way prevents us from unit testing key pieces of our applications.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Why Android Unit Testing is so Hard (Pt 1)</title>
      <link>https://www.philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/</link>
      <pubDate>Fri, 17 Apr 2015 13:46:58 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/04/17/why-android-unit-testing-is-so-hard-pt-1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; In &lt;a href=&#34;http://philosophicalhacker.com/2015/05/22/what-ive-learned-from-trying-to-make-an-android-app-unit-testable/&#34;target=&#34;_blank&#34;&gt;the post that concludes this series&lt;/a&gt;, I point out that making unit testable Android apps does not require us to remove compile-time dependencies on the Android SDK and that attempting to do so is impractical anyway. Ignore anything in this post that suggests otherwise.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Unit testing your Android apps can be extremely difficult. As I suggested in &lt;a href=&#34;http://philosophicalhacker.com/2015/04/10/against-android-unit-tests/&#34;target=&#34;_blank&#34;&gt;the introduction to this series,&lt;/a&gt; it seems clear that there’s widespread agreement on this. The many folks who responded to my introductory post, moreover, seemed to reinforce my claim that Android unit testing is tough:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;What he said! RT &lt;a href=&#34;https://twitter.com/philosohacker?ref_src=twsrc%5Etfw&#34;&gt;@philosohacker&lt;/a&gt;: New post on how we can better test our Android apps &lt;a href=&#34;http://t.co/gQCJKIOrSN&#34;&gt;http://t.co/gQCJKIOrSN&lt;/a&gt;&lt;/p&gt;&amp;mdash; Andy Dyer (@dammitandy) &lt;a href=&#34;https://twitter.com/dammitandy/status/587629744188829699?ref_src=twsrc%5Etfw&#34;&gt;April 13, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/corey_latislaw?ref_src=twsrc%5Etfw&#34;&gt;@corey_latislaw&lt;/a&gt; Yay! Maybe I can finally figuring out how to test Android apps properly. Also, this. &lt;a href=&#34;http://t.co/8gIqfoFVnL&#34;&gt;http://t.co/8gIqfoFVnL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Vinay Shenoy (@vinaysshenoy) &lt;a href=&#34;https://twitter.com/vinaysshenoy/status/587608070131290112?ref_src=twsrc%5Etfw&#34;&gt;April 13, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Fully agree: &amp;quot;Against Android Unit Tests&amp;quot;. Structure your code to have as little contact with the SDK as possible. &lt;a href=&#34;http://t.co/rLZlpGrCD5&#34;&gt;http://t.co/rLZlpGrCD5&lt;/a&gt;&lt;/p&gt;&amp;mdash; Pascal Hartig 😷 (@passy) &lt;a href=&#34;https://twitter.com/passy/status/587336731260751875?ref_src=twsrc%5Etfw&#34;&gt;April 12, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;So, Android unit testing is hard. That much is clear. Why Android unit testing is so difficult, however, is less clear. Its true that a part of the difficulty with Android unit testing has to do with the nonsense that you have to overcome to get Roboletric started so that you can run your tests at a decent speed, but I think that there’s a deeper reason why we are having a hard time testing our applications: the way that Google has written the Android SDK and the way that Google encourages us to structure our applications makes testing difficult and, in some cases, impossible.&lt;/p&gt;
&lt;p&gt;I realize that this is a bold claim, so I will spend the entire post trying to establish it. In the following post, I’ll try to say more about how the “standard” way of developing Android applications encourages us to write code that is difficult/impossible to write sensible unit tests against. These posts are a part of a series in which I’m exploring the viability of enhancing the testability of Android applications by restructuring them so that application code does not directly depend on the Android SDK. Showing why the standard architecture for Android development makes testing difficult will both motivate and inform my alternative proposal for structuring Android applications, a proposal that I will outline in the fourth post of the series.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Against Android Unit Tests</title>
      <link>https://www.philosophicalhacker.com/2015/04/10/against-android-unit-tests/</link>
      <pubDate>Sat, 11 Apr 2015 03:35:55 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/04/10/against-android-unit-tests/</guid>
      <description>Edit: Since I&amp;rsquo;ve written this, I&amp;rsquo;ve come to realize that making unit testable Android apps does not require us to remove compile-time dependencies on the Android SDK. I talk about this realization in the post that concludes this series.
 Even the best among us admit that they struggle with testing their Android apps. Jake Wharton has said explicitly that the Android platform has traditionally been very difficult to test.¹ In the inaugural episode of their (excellent) podcast, Don Felker and Kaushik Gopal have echoed similar sentiments.</description>
      
    </item>
    
    <item>
      <title>Don&#39;t call it &#34;MVP&#34;</title>
      <link>https://www.philosophicalhacker.com/2015/04/06/dont-call-it-mvp/</link>
      <pubDate>Mon, 06 Apr 2015 03:39:02 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/04/06/dont-call-it-mvp/</guid>
      <description>Lately there&amp;rsquo;s been a lot of discussion about an alternative architectural pattern for Android development. The acronym that&amp;rsquo;s being used to denote this alternative pattern is &amp;ldquo;MVP.&amp;rdquo; I think that &amp;ldquo;MVP&amp;rdquo; is an inaccurate and confusing designation for this pattern. In this post, I will say why I think &amp;ldquo;MVP&amp;rdquo; is a bad name for the pattern, and I&amp;rsquo;ll suggest a different name for referring to it.
What is &amp;ldquo;MVP?&amp;rdquo; There are plenty of blog posts out there that describe the &amp;ldquo;MVP&amp;rdquo; pattern, so I&amp;rsquo;m not going to do that here.</description>
      
    </item>
    
    <item>
      <title>How to Keep your RxJava Subscribers from Leaking</title>
      <link>https://www.philosophicalhacker.com/2015/03/24/how-to-keep-your-rxjava-subscribers-from-leaking/</link>
      <pubDate>Tue, 24 Mar 2015 23:56:32 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2015/03/24/how-to-keep-your-rxjava-subscribers-from-leaking/</guid>
      <description>Edit: Shortly after writing this, I realized that the solution that I present here isn&amp;rsquo;t very good. I&amp;rsquo;m leaving it here just in case it can serve as a building block for better solutions.
Sometimes you don&amp;rsquo;t have control over the lifecycle of your Subscribers. In these cases, to avoid leaking your Subscriber, you have to unsubscribe from your Observable when you&amp;rsquo;re notified that your Subscriber is about to be destroyed.</description>
      
    </item>
    
    <item>
      <title>An Alternative Multiproject Setup for Android Studio</title>
      <link>https://www.philosophicalhacker.com/2014/10/03/an-alternative-multiproject-setup-for-android-studio/</link>
      <pubDate>Fri, 03 Oct 2014 03:02:54 +0000</pubDate>
      
      <guid>https://www.philosophicalhacker.com/2014/10/03/an-alternative-multiproject-setup-for-android-studio/</guid>
      <description>Google&amp;rsquo;s Gradle Plugin user guide recommends a method for configuring your gradle files to build multiple projects. That method has some shortcomings. In this post, I will briefly explain Google&amp;rsquo;s recommended configuration, note its shortcomings, and recommend a different way to configure your gradle files to support multi-project setups in Android Studio.
The Google Way 
This picture illustrates how Google suggests we handle multi-project setups: our main &amp;ldquo;app&amp;rdquo; module is supposed to depend on library modules that reside within the project directory.</description>
      
    </item>
    
  </channel>
</rss>
